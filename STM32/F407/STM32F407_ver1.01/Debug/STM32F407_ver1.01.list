
STM32F407_ver1.01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00003ecc  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003f3c  20003f3c  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d5ba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003b7e  00000000  00000000  0003d65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000933c  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  0004a518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0004b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007b21  00000000  00000000  0004c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000057fc  00000000  00000000  00053fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000597bd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003014  00000000  00000000  0005983c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  0005c850  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  0005c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037d8 	.word	0x080037d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080037d8 	.word	0x080037d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vMainUART>:
#include "cmsis_os.h"

xTaskHandle priority;
uint8_t value;
void vMainUART(void const * argument)
{
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t count = 0;
	while(1)
	{
		printf("asd %d\n", count);
 8000582:	4f0c      	ldr	r7, [pc, #48]	; (80005b4 <vMainUART+0x34>)
		count++;
		priority = uxTaskPriorityGet(vMainUART);//0xebfbbbf0
 8000584:	4e0c      	ldr	r6, [pc, #48]	; (80005b8 <vMainUART+0x38>)
 8000586:	4d0d      	ldr	r5, [pc, #52]	; (80005bc <vMainUART+0x3c>)
	uint8_t count = 0;
 8000588:	2400      	movs	r4, #0
		printf("asd %d\n", count);
 800058a:	4621      	mov	r1, r4
 800058c:	4638      	mov	r0, r7
 800058e:	f002 f9e5 	bl	800295c <iprintf>
		priority = uxTaskPriorityGet(vMainUART);//0xebfbbbf0
 8000592:	4630      	mov	r0, r6
 8000594:	f001 ff90 	bl	80024b8 <uxTaskPriorityGet>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15);
 8000598:	f44f 4140 	mov.w	r1, #49152	; 0xc000
		priority = uxTaskPriorityGet(vMainUART);//0xebfbbbf0
 800059c:	6028      	str	r0, [r5, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15);
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <vMainUART+0x40>)
 80005a0:	f000 fd75 	bl	800108e <HAL_GPIO_TogglePin>
		count++;
 80005a4:	3401      	adds	r4, #1
		osDelay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		count++;
 80005aa:	b2e4      	uxtb	r4, r4
		osDelay(1000);
 80005ac:	f001 fbbb 	bl	8001d26 <osDelay>
 80005b0:	e7eb      	b.n	800058a <vMainUART+0xa>
 80005b2:	bf00      	nop
 80005b4:	0800382c 	.word	0x0800382c
 80005b8:	08000581 	.word	0x08000581
 80005bc:	20003de4 	.word	0x20003de4
 80005c0:	40020c00 	.word	0x40020c00

080005c4 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80005c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	  osDelay(500);
 80005c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ca:	f001 fbac 	bl	8001d26 <osDelay>
 80005ce:	e7fa      	b.n	80005c6 <StartDefaultTask+0x2>

080005d0 <vMainUART2>:
  /* USER CODE END 5 */ 
}

/* vMainUART2 function */
void vMainUART2(void const * argument)
{
 80005d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vMainUART2 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	  osDelay(2000);
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f001 fba6 	bl	8001d26 <osDelay>
 80005da:	e7fa      	b.n	80005d2 <vMainUART2+0x2>

080005dc <SystemClock_Config>:
{
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2100      	movs	r1, #0
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <SystemClock_Config+0xa0>)
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xa4>)
 80005fa:	9102      	str	r1, [sp, #8]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	9302      	str	r3, [sp, #8]
 800060c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060e:	2301      	movs	r3, #1
 8000610:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000616:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800061e:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800062c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800062e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f000 fd31 	bl	8001098 <HAL_RCC_OscConfig>
 8000636:	4601      	mov	r1, r0
 8000638:	b100      	cbz	r0, 800063c <SystemClock_Config+0x60>
 800063a:	e7fe      	b.n	800063a <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800063c:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	240f      	movs	r4, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000644:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800064a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f000 fed4 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000650:	4605      	mov	r5, r0
 8000652:	b100      	cbz	r0, 8000656 <SystemClock_Config+0x7a>
 8000654:	e7fe      	b.n	8000654 <SystemClock_Config+0x78>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000656:	f000 ff69 	bl	800152c <HAL_RCC_GetHCLKFreq>
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000662:	f000 fbfb 	bl	8000e5c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000666:	4630      	mov	r0, r6
 8000668:	f000 fc0e 	bl	8000e88 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800066c:	462a      	mov	r2, r5
 800066e:	4621      	mov	r1, r4
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f000 fbb2 	bl	8000ddc <HAL_NVIC_SetPriority>
}
 8000678:	b014      	add	sp, #80	; 0x50
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <startInit>:
{
 8000684:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim7);
 8000686:	4c04      	ldr	r4, [pc, #16]	; (8000698 <startInit+0x14>)
 8000688:	4620      	mov	r0, r4
 800068a:	f000 ff93 	bl	80015b4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 800068e:	4620      	mov	r0, r4
}
 8000690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim7);
 8000694:	f000 bf9b 	b.w	80015ce <HAL_TIM_Base_Start_IT>
 8000698:	20003ebc 	.word	0x20003ebc

0800069c <main>:
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a0:	2400      	movs	r4, #0
  HAL_Init();
 80006a2:	f000 fa23 	bl	8000aec <HAL_Init>
  SystemClock_Config();
 80006a6:	f7ff ff99 	bl	80005dc <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b5f      	ldr	r3, [pc, #380]	; (8000828 <main+0x18c>)
 80006ac:	9400      	str	r4, [sp, #0]
 80006ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006b0:	485e      	ldr	r0, [pc, #376]	; (800082c <main+0x190>)
  htim6.Instance = TIM6;
 80006b2:	4d5f      	ldr	r5, [pc, #380]	; (8000830 <main+0x194>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
 80006ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	9401      	str	r4, [sp, #4]
 80006c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c8:	f042 0201 	orr.w	r2, r2, #1
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
 80006ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d0:	f002 0201 	and.w	r2, r2, #1
 80006d4:	9201      	str	r2, [sp, #4]
 80006d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	9402      	str	r4, [sp, #8]
 80006da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006dc:	f042 0208 	orr.w	r2, r2, #8
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006e8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006f2:	f000 fcc7 	bl	8001084 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006fa:	a90d      	add	r1, sp, #52	; 0x34
 80006fc:	484b      	ldr	r0, [pc, #300]	; (800082c <main+0x190>)
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006fe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000706:	f000 fbdd 	bl	8000ec4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800070a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070e:	4847      	ldr	r0, [pc, #284]	; (800082c <main+0x190>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000710:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000712:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f000 fbd3 	bl	8000ec4 <HAL_GPIO_Init>
  htim6.Init.Prescaler = 12000;
 800071e:	4b45      	ldr	r3, [pc, #276]	; (8000834 <main+0x198>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	60ac      	str	r4, [r5, #8]
  htim6.Init.Prescaler = 12000;
 8000722:	f642 68e0 	movw	r8, #12000	; 0x2ee0
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000726:	4628      	mov	r0, r5
  htim6.Init.Prescaler = 12000;
 8000728:	e885 0108 	stmia.w	r5, {r3, r8}
  htim6.Init.Period = 1;
 800072c:	60ee      	str	r6, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072e:	f001 f863 	bl	80017f8 <HAL_TIM_Base_Init>
 8000732:	b100      	cbz	r0, 8000736 <main+0x9a>
 8000734:	e7fe      	b.n	8000734 <main+0x98>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000736:	2720      	movs	r7, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800073a:	a90d      	add	r1, sp, #52	; 0x34
 800073c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800073e:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000740:	f001 f874 	bl	800182c <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	b100      	cbz	r0, 8000748 <main+0xac>
 8000746:	e7fe      	b.n	8000746 <main+0xaa>
  htim7.Instance = TIM7;
 8000748:	4c3b      	ldr	r4, [pc, #236]	; (8000838 <main+0x19c>)
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <main+0x1a0>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	60a0      	str	r0, [r4, #8]
  htim7.Init.Prescaler = 12000;
 800074e:	e884 0108 	stmia.w	r4, {r3, r8}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000752:	4620      	mov	r0, r4
  htim7.Init.Period = 500;
 8000754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000758:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800075a:	f001 f84d 	bl	80017f8 <HAL_TIM_Base_Init>
 800075e:	b100      	cbz	r0, 8000762 <main+0xc6>
 8000760:	e7fe      	b.n	8000760 <main+0xc4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000762:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000764:	a90d      	add	r1, sp, #52	; 0x34
 8000766:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000768:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800076a:	f001 f85f 	bl	800182c <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	b100      	cbz	r0, 8000772 <main+0xd6>
 8000770:	e7fe      	b.n	8000770 <main+0xd4>
  hadc1.Instance = ADC1;
 8000772:	4c33      	ldr	r4, [pc, #204]	; (8000840 <main+0x1a4>)
 8000774:	4b33      	ldr	r3, [pc, #204]	; (8000844 <main+0x1a8>)
 8000776:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000778:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077a:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077c:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077e:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000780:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <main+0x1ac>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000788:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078a:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 800078e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000790:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	f000 f9d7 	bl	8000b44 <HAL_ADC_Init>
 8000796:	b100      	cbz	r0, 800079a <main+0xfe>
 8000798:	e7fe      	b.n	8000798 <main+0xfc>
  sConfig.Channel = ADC_CHANNEL_0;
 800079a:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	a90d      	add	r1, sp, #52	; 0x34
 80007a0:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 80007a2:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	f000 fa72 	bl	8000c8c <HAL_ADC_ConfigChannel>
 80007a8:	b100      	cbz	r0, 80007ac <main+0x110>
 80007aa:	e7fe      	b.n	80007aa <main+0x10e>
  huart1.Instance = USART1;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <main+0x1b0>)
  huart1.Init.BaudRate = 115200;
 80007ae:	4928      	ldr	r1, [pc, #160]	; (8000850 <main+0x1b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b0:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 80007b2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b6:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ba:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007bc:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007be:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c0:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c2:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c4:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c6:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c8:	f001 f97c 	bl	8001ac4 <HAL_UART_Init>
 80007cc:	4607      	mov	r7, r0
 80007ce:	b100      	cbz	r0, 80007d2 <main+0x136>
 80007d0:	e7fe      	b.n	80007d0 <main+0x134>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007d2:	4c20      	ldr	r4, [pc, #128]	; (8000854 <main+0x1b8>)
  startInit();
 80007d4:	f7ff ff56 	bl	8000684 <startInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007da:	ae03      	add	r6, sp, #12
 80007dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007de:	4625      	mov	r5, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007e0:	4639      	mov	r1, r7
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e6:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007e8:	a803      	add	r0, sp, #12
 80007ea:	f001 fa84 	bl	8001cf6 <osThreadCreate>
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <main+0x1bc>)
 80007f0:	6018      	str	r0, [r3, #0]
  osThreadDef(Uart, vMainUART, 2, 0, 128);
 80007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f4:	ae08      	add	r6, sp, #32
 80007f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007f8:	682b      	ldr	r3, [r5, #0]
 80007fa:	6033      	str	r3, [r6, #0]
  UartHandle = osThreadCreate(osThread(Uart), NULL);
 80007fc:	4639      	mov	r1, r7
 80007fe:	a808      	add	r0, sp, #32
 8000800:	f001 fa79 	bl	8001cf6 <osThreadCreate>
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <main+0x1c0>)
  osThreadDef(uart2, vMainUART2, osPriorityIdle, 0, 128);
 8000806:	3418      	adds	r4, #24
  UartHandle = osThreadCreate(osThread(Uart), NULL);
 8000808:	6018      	str	r0, [r3, #0]
  osThreadDef(uart2, vMainUART2, osPriorityIdle, 0, 128);
 800080a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800080c:	ad0d      	add	r5, sp, #52	; 0x34
 800080e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	602b      	str	r3, [r5, #0]
  uart2Handle = osThreadCreate(osThread(uart2), NULL);
 8000814:	4639      	mov	r1, r7
 8000816:	a80d      	add	r0, sp, #52	; 0x34
 8000818:	f001 fa6d 	bl	8001cf6 <osThreadCreate>
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <main+0x1c4>)
 800081e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000820:	f001 fa64 	bl	8001cec <osKernelStart>
 8000824:	e7fe      	b.n	8000824 <main+0x188>
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	20003e80 	.word	0x20003e80
 8000834:	40001000 	.word	0x40001000
 8000838:	20003ebc 	.word	0x20003ebc
 800083c:	40001400 	.word	0x40001400
 8000840:	20003df8 	.word	0x20003df8
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001
 800084c:	20003e40 	.word	0x20003e40
 8000850:	40011000 	.word	0x40011000
 8000854:	080037f0 	.word	0x080037f0
 8000858:	20003df0 	.word	0x20003df0
 800085c:	20003df4 	.word	0x20003df4
 8000860:	20003dec 	.word	0x20003dec

08000864 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000864:	6802      	ldr	r2, [r0, #0]
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000868:	429a      	cmp	r2, r3
 800086a:	d101      	bne.n	8000870 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800086c:	f000 b958 	b.w	8000b20 <HAL_IncTick>
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40010000 	.word	0x40010000

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087a:	2003      	movs	r0, #3
 800087c:	f000 fa9c 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	4611      	mov	r1, r2
 8000884:	f06f 000b 	mvn.w	r0, #11
 8000888:	f000 faa8 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	4611      	mov	r1, r2
 8000890:	f06f 000a 	mvn.w	r0, #10
 8000894:	f000 faa2 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	4611      	mov	r1, r2
 800089c:	f06f 0009 	mvn.w	r0, #9
 80008a0:	f000 fa9c 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	4611      	mov	r1, r2
 80008a8:	f06f 0004 	mvn.w	r0, #4
 80008ac:	f000 fa96 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	4611      	mov	r1, r2
 80008b4:	f06f 0003 	mvn.w	r0, #3
 80008b8:	f000 fa90 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	210f      	movs	r1, #15
 80008c0:	f06f 0001 	mvn.w	r0, #1
 80008c4:	f000 fa8a 	bl	8000ddc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80008d4:	f000 ba82 	b.w	8000ddc <HAL_NVIC_SetPriority>

080008d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80008da:	6802      	ldr	r2, [r0, #0]
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_ADC_MspInit+0x3c>)
 80008de:	429a      	cmp	r2, r3
 80008e0:	d115      	bne.n	800090e <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008e2:	2100      	movs	r1, #0
 80008e4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80008e8:	9100      	str	r1, [sp, #0]
 80008ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008f2:	645a      	str	r2, [r3, #68]	; 0x44
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000900:	2301      	movs	r3, #1
 8000902:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f000 fadb 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800090e:	b007      	add	sp, #28
 8000910:	f85d fb04 	ldr.w	pc, [sp], #4
 8000914:	40012000 	.word	0x40012000
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800091c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 800091e:	6803      	ldr	r3, [r0, #0]
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_TIM_Base_MspInit+0x60>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d115      	bne.n	8000952 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_TIM_Base_MspInit+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	9200      	str	r2, [sp, #0]
 800092c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800092e:	f041 0110 	orr.w	r1, r1, #16
 8000932:	6419      	str	r1, [r3, #64]	; 0x40
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800093c:	2036      	movs	r0, #54	; 0x36
 800093e:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000940:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000942:	f000 fa4b 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000946:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000948:	f000 fa7c 	bl	8000e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800094c:	b003      	add	sp, #12
 800094e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_TIM_Base_MspInit+0x68>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d1f9      	bne.n	800094c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_TIM_Base_MspInit+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	9201      	str	r2, [sp, #4]
 800095e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000960:	f041 0120 	orr.w	r1, r1, #32
 8000964:	6419      	str	r1, [r3, #64]	; 0x40
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800096e:	2037      	movs	r0, #55	; 0x37
 8000970:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000972:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000974:	f000 fa32 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000978:	2037      	movs	r0, #55	; 0x37
 800097a:	e7e5      	b.n	8000948 <HAL_TIM_Base_MspInit+0x2c>
 800097c:	40001000 	.word	0x40001000
 8000980:	40023800 	.word	0x40023800
 8000984:	40001400 	.word	0x40001400

08000988 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800098a:	6802      	ldr	r2, [r0, #0]
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x58>)
 800098e:	429a      	cmp	r2, r3
{
 8000990:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8000992:	d123      	bne.n	80009dc <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000994:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000998:	2400      	movs	r4, #0
 800099a:	9400      	str	r4, [sp, #0]
 800099c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a0:	f041 0110 	orr.w	r1, r1, #16
 80009a4:	6459      	str	r1, [r3, #68]	; 0x44
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c4:	2307      	movs	r3, #7
 80009c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f000 fa7c 	bl	8000ec4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009cc:	2025      	movs	r0, #37	; 0x25
 80009ce:	4622      	mov	r2, r4
 80009d0:	2105      	movs	r1, #5
 80009d2:	f000 fa03 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009d6:	2025      	movs	r0, #37	; 0x25
 80009d8:	f000 fa34 	bl	8000e44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009dc:	b006      	add	sp, #24
 80009de:	bd10      	pop	{r4, pc}
 80009e0:	40011000 	.word	0x40011000
 80009e4:	40020000 	.word	0x40020000

080009e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80009ea:	4601      	mov	r1, r0
{
 80009ec:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80009ee:	2200      	movs	r2, #0
 80009f0:	2019      	movs	r0, #25
 80009f2:	f000 f9f3 	bl	8000ddc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 fa24 	bl	8000e44 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009fc:	2500      	movs	r5, #0
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x68>)
 8000a00:	9502      	str	r5, [sp, #8]
 8000a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a04:	4c13      	ldr	r4, [pc, #76]	; (8000a54 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a06:	f042 0201 	orr.w	r2, r2, #1
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	a901      	add	r1, sp, #4
 8000a16:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a18:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1a:	f000 fdad 	bl	8001578 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a1e:	f000 fd9b 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_InitTick+0x70>)
 8000a24:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a26:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000a2a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_InitTick+0x74>)
 8000a2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a32:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a34:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a36:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8000a38:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a3c:	f000 fedc 	bl	80017f8 <HAL_TIM_Base_Init>
 8000a40:	b920      	cbnz	r0, 8000a4c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a42:	4620      	mov	r0, r4
 8000a44:	f000 fdc3 	bl	80015ce <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000a48:	b009      	add	sp, #36	; 0x24
 8000a4a:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	e7fb      	b.n	8000a48 <HAL_InitTick+0x60>
 8000a50:	40023800 	.word	0x40023800
 8000a54:	20003ef8 	.word	0x20003ef8
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	000f4240 	.word	0x000f4240

08000a60 <NMI_Handler>:
 8000a60:	4770      	bx	lr

08000a62 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler>

08000a64 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler>

08000a66 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler>

08000a68 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler>

08000a6a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000a6c:	f001 b963 	b.w	8001d36 <osSystickHandler>

08000a70 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a70:	4801      	ldr	r0, [pc, #4]	; (8000a78 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000a72:	f000 bdbb 	b.w	80015ec <HAL_TIM_IRQHandler>
 8000a76:	bf00      	nop
 8000a78:	20003ef8 	.word	0x20003ef8

08000a7c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <USART1_IRQHandler+0x8>)
 8000a7e:	f001 b88d 	b.w	8001b9c <HAL_UART_IRQHandler>
 8000a82:	bf00      	nop
 8000a84:	20003e40 	.word	0x20003e40

08000a88 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a88:	4801      	ldr	r0, [pc, #4]	; (8000a90 <TIM6_DAC_IRQHandler+0x8>)
 8000a8a:	f000 bdaf 	b.w	80015ec <HAL_TIM_IRQHandler>
 8000a8e:	bf00      	nop
 8000a90:	20003e80 	.word	0x20003e80

08000a94 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a94:	4801      	ldr	r0, [pc, #4]	; (8000a9c <TIM7_IRQHandler+0x8>)
 8000a96:	f000 bda9 	b.w	80015ec <HAL_TIM_IRQHandler>
 8000a9a:	bf00      	nop
 8000a9c:	20003ebc 	.word	0x20003ebc

08000aa0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	490f      	ldr	r1, [pc, #60]	; (8000ae0 <SystemInit+0x40>)
 8000aa2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <SystemInit+0x44>)
 8000ab0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000ab4:	f042 0201 	orr.w	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000aba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ac2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ac6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <SystemInit+0x48>)
 8000aca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ad4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ada:	608b      	str	r3, [r1, #8]
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	24003010 	.word	0x24003010

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x30>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000af6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000afe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f955 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff ff6a 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff feb0 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000b18:	2000      	movs	r0, #0
 8000b1a:	bd08      	pop	{r3, pc}
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x10>)
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <HAL_IncTick+0x14>)
 8000b24:	6811      	ldr	r1, [r2, #0]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	440b      	add	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20003f34 	.word	0x20003f34
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <HAL_GetTick+0x8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20003f34 	.word	0x20003f34

08000b44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b44:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b46:	4604      	mov	r4, r0
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	f000 8099 	beq.w	8000c80 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b50:	b923      	cbnz	r3, 8000b5c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b52:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b58:	f7ff febe 	bl	80008d8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b5e:	06db      	lsls	r3, r3, #27
 8000b60:	f100 808c 	bmi.w	8000c7c <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b6a:	f023 0302 	bic.w	r3, r3, #2
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b74:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <HAL_ADC_Init+0x140>)
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000b7c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	6861      	ldr	r1, [r4, #4]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b86:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b88:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b9a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b9c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b9e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ba2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000baa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bac:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bba:	4933      	ldr	r1, [pc, #204]	; (8000c88 <HAL_ADC_Init+0x144>)
 8000bbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	d050      	beq.n	8000c64 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bc2:	6899      	ldr	r1, [r3, #8]
 8000bc4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000bc8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000bca:	6899      	ldr	r1, [r3, #8]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bd0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000bd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bde:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000be0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000be2:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000be4:	f022 0202 	bic.w	r2, r2, #2
 8000be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bf2:	6a22      	ldr	r2, [r4, #32]
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d03d      	beq.n	8000c74 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bf8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c00:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c08:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	3901      	subs	r1, #1
 8000c0e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c16:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c18:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c20:	3901      	subs	r1, #1
 8000c22:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c28:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000c38:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c3a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c3c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c44:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000c46:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c48:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000c4c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000c4e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000c50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c52:	f023 0303 	bic.w	r3, r3, #3
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000c62:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c72:	e7b4      	b.n	8000bde <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c7a:	e7ca      	b.n	8000c12 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	e7ed      	b.n	8000c5c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000c80:	2001      	movs	r0, #1
}
 8000c82:	bd10      	pop	{r4, pc}
 8000c84:	40012300 	.word	0x40012300
 8000c88:	0f000001 	.word	0x0f000001

08000c8c <HAL_ADC_ConfigChannel>:
{
 8000c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000c92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	f000 8083 	beq.w	8000da2 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c9c:	680d      	ldr	r5, [r1, #0]
 8000c9e:	6804      	ldr	r4, [r0, #0]
 8000ca0:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000ca2:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ca4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000ca6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000caa:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cac:	d92a      	bls.n	8000d04 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000cb2:	68e7      	ldr	r7, [r4, #12]
 8000cb4:	3b1e      	subs	r3, #30
 8000cb6:	f04f 0e07 	mov.w	lr, #7
 8000cba:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cbe:	ea27 070e 	bic.w	r7, r7, lr
 8000cc2:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cc4:	68e7      	ldr	r7, [r4, #12]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	433b      	orrs	r3, r7
 8000ccc:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000cce:	684a      	ldr	r2, [r1, #4]
 8000cd0:	2a06      	cmp	r2, #6
 8000cd2:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000cd6:	d825      	bhi.n	8000d24 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cd8:	4413      	add	r3, r2
 8000cda:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000cdc:	1f59      	subs	r1, r3, #5
 8000cde:	231f      	movs	r3, #31
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	ea27 0303 	bic.w	r3, r7, r3
 8000ce6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ce8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000cea:	fa06 f101 	lsl.w	r1, r6, r1
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_ADC_ConfigChannel+0x11c>)
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	d034      	beq.n	8000d62 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000cfe:	4618      	mov	r0, r3
}
 8000d00:	b003      	add	sp, #12
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d04:	6927      	ldr	r7, [r4, #16]
 8000d06:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000d0a:	f04f 0e07 	mov.w	lr, #7
 8000d0e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000d12:	ea27 070e 	bic.w	r7, r7, lr
 8000d16:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d18:	6927      	ldr	r7, [r4, #16]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	433b      	orrs	r3, r7
 8000d20:	6123      	str	r3, [r4, #16]
 8000d22:	e7d4      	b.n	8000cce <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000d24:	2a0c      	cmp	r2, #12
 8000d26:	d80e      	bhi.n	8000d46 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d28:	4413      	add	r3, r2
 8000d2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d2c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000d30:	231f      	movs	r3, #31
 8000d32:	4093      	lsls	r3, r2
 8000d34:	ea21 0303 	bic.w	r3, r1, r3
 8000d38:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d3c:	fa06 f202 	lsl.w	r2, r6, r2
 8000d40:	431a      	orrs	r2, r3
 8000d42:	6322      	str	r2, [r4, #48]	; 0x30
 8000d44:	e7d5      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d46:	4413      	add	r3, r2
 8000d48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d4a:	3b41      	subs	r3, #65	; 0x41
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	ea21 0202 	bic.w	r2, r1, r2
 8000d54:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d58:	fa06 f103 	lsl.w	r1, r6, r3
 8000d5c:	4311      	orrs	r1, r2
 8000d5e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000d60:	e7c7      	b.n	8000cf2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d62:	2d12      	cmp	r5, #18
 8000d64:	d104      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <HAL_ADC_ConfigChannel+0x120>)
 8000d68:	6853      	ldr	r3, [r2, #4]
 8000d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d6e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d70:	f1a5 0310 	sub.w	r3, r5, #16
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d8bf      	bhi.n	8000cf8 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_ADC_ConfigChannel+0x120>)
 8000d7a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d7c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d82:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d84:	d1b8      	bne.n	8000cf8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_ADC_ConfigChannel+0x124>)
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_ADC_ConfigChannel+0x128>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d90:	230a      	movs	r3, #10
 8000d92:	4353      	muls	r3, r2
        counter--;
 8000d94:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0ad      	beq.n	8000cf8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000d9c:	9b01      	ldr	r3, [sp, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	e7f8      	b.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000da2:	2002      	movs	r0, #2
 8000da4:	e7ac      	b.n	8000d00 <HAL_ADC_ConfigChannel+0x74>
 8000da6:	bf00      	nop
 8000da8:	40012000 	.word	0x40012000
 8000dac:	40012300 	.word	0x40012300
 8000db0:	20000000 	.word	0x20000000
 8000db4:	000f4240 	.word	0x000f4240

08000db8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dc0:	041b      	lsls	r3, r3, #16
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dc8:	0200      	lsls	r0, r0, #8
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000dd2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dd4:	60d3      	str	r3, [r2, #12]
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b530      	push	{r4, r5, lr}
 8000de0:	68dc      	ldr	r4, [r3, #12]
 8000de2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	bf28      	it	cs
 8000df0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 0501 	mov.w	r5, #1
 8000df8:	fa05 f303 	lsl.w	r3, r5, r3
 8000dfc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e00:	bf8c      	ite	hi
 8000e02:	3c03      	subhi	r4, #3
 8000e04:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e06:	4019      	ands	r1, r3
 8000e08:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e0e:	3c01      	subs	r4, #1
 8000e10:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	ea42 0201 	orr.w	r2, r2, r1
 8000e18:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	bfaf      	iteee	ge
 8000e1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	f000 000f 	andlt.w	r0, r0, #15
 8000e26:	4b06      	ldrlt	r3, [pc, #24]	; (8000e40 <HAL_NVIC_SetPriority+0x64>)
 8000e28:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	bfa5      	ittet	ge
 8000e2c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e30:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e38:	bd30      	pop	{r4, r5, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	e000ed14 	.word	0xe000ed14

08000e44 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e44:	0942      	lsrs	r2, r0, #5
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 001f 	and.w	r0, r0, #31
 8000e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e50:	4b01      	ldr	r3, [pc, #4]	; (8000e58 <HAL_NVIC_EnableIRQ+0x14>)
 8000e52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e62:	d20a      	bcs.n	8000e7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e68:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	21f0      	movs	r1, #240	; 0xf0
 8000e6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e8a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e8c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e8e:	bf0c      	ite	eq
 8000e90:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e94:	f022 0204 	bicne.w	r2, r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000eac:	2001      	movs	r0, #1
 8000eae:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000eb8:	6813      	ldr	r3, [r2, #0]
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000ec0:	2000      	movs	r0, #0
}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800107c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed0:	4a68      	ldr	r2, [pc, #416]	; (8001074 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001080 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000eda:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000ee0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ee8:	45b6      	cmp	lr, r6
 8000eea:	f040 80ae 	bne.w	800104a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	684c      	ldr	r4, [r1, #4]
 8000ef0:	f024 0710 	bic.w	r7, r4, #16
 8000ef4:	2f02      	cmp	r7, #2
 8000ef6:	d116      	bne.n	8000f26 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000efc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f00:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f0c:	f04f 0c0f 	mov.w	ip, #15
 8000f10:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f14:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f18:	690d      	ldr	r5, [r1, #16]
 8000f1a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f1e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	f8ca 5020 	str.w	r5, [sl, #32]
 8000f26:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f2c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f30:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f34:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f36:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f42:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f4a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4e:	d811      	bhi.n	8000f74 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000f50:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f52:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	68cf      	ldr	r7, [r1, #12]
 8000f58:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f5c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f60:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f62:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f68:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f6c:	409f      	lsls	r7, r3
 8000f6e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f72:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f74:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f76:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	688f      	ldr	r7, [r1, #8]
 8000f7a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f7e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f80:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f82:	00e5      	lsls	r5, r4, #3
 8000f84:	d561      	bpl.n	800104a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	f04f 0b00 	mov.w	fp, #0
 8000f8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f8e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f92:	4d39      	ldr	r5, [pc, #228]	; (8001078 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f98:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f9c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000fa0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000fa4:	9703      	str	r7, [sp, #12]
 8000fa6:	9f03      	ldr	r7, [sp, #12]
 8000fa8:	f023 0703 	bic.w	r7, r3, #3
 8000fac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fb0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fbc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fc0:	f04f 0e0f 	mov.w	lr, #15
 8000fc4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fca:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	d043      	beq.n	8001058 <HAL_GPIO_Init+0x194>
 8000fd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fd4:	42a8      	cmp	r0, r5
 8000fd6:	d041      	beq.n	800105c <HAL_GPIO_Init+0x198>
 8000fd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fdc:	42a8      	cmp	r0, r5
 8000fde:	d03f      	beq.n	8001060 <HAL_GPIO_Init+0x19c>
 8000fe0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fe4:	42a8      	cmp	r0, r5
 8000fe6:	d03d      	beq.n	8001064 <HAL_GPIO_Init+0x1a0>
 8000fe8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fec:	42a8      	cmp	r0, r5
 8000fee:	d03b      	beq.n	8001068 <HAL_GPIO_Init+0x1a4>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d03b      	beq.n	800106c <HAL_GPIO_Init+0x1a8>
 8000ff4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000ff8:	42a8      	cmp	r0, r5
 8000ffa:	d039      	beq.n	8001070 <HAL_GPIO_Init+0x1ac>
 8000ffc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001000:	42a8      	cmp	r0, r5
 8001002:	bf14      	ite	ne
 8001004:	2508      	movne	r5, #8
 8001006:	2507      	moveq	r5, #7
 8001008:	fa05 f50c 	lsl.w	r5, r5, ip
 800100c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001010:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001012:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001014:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001016:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800101a:	bf0c      	ite	eq
 800101c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800101e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001020:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001022:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001028:	bf0c      	ite	eq
 800102a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800102c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800102e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001030:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001032:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001036:	bf0c      	ite	eq
 8001038:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800103a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800103c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800103e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001042:	bf54      	ite	pl
 8001044:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001046:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001048:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	3301      	adds	r3, #1
 800104c:	2b10      	cmp	r3, #16
 800104e:	f47f af44 	bne.w	8000eda <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001052:	b005      	add	sp, #20
 8001054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001058:	465d      	mov	r5, fp
 800105a:	e7d5      	b.n	8001008 <HAL_GPIO_Init+0x144>
 800105c:	2501      	movs	r5, #1
 800105e:	e7d3      	b.n	8001008 <HAL_GPIO_Init+0x144>
 8001060:	2502      	movs	r5, #2
 8001062:	e7d1      	b.n	8001008 <HAL_GPIO_Init+0x144>
 8001064:	2503      	movs	r5, #3
 8001066:	e7cf      	b.n	8001008 <HAL_GPIO_Init+0x144>
 8001068:	2504      	movs	r5, #4
 800106a:	e7cd      	b.n	8001008 <HAL_GPIO_Init+0x144>
 800106c:	2505      	movs	r5, #5
 800106e:	e7cb      	b.n	8001008 <HAL_GPIO_Init+0x144>
 8001070:	2506      	movs	r5, #6
 8001072:	e7c9      	b.n	8001008 <HAL_GPIO_Init+0x144>
 8001074:	40013c00 	.word	0x40013c00
 8001078:	40020000 	.word	0x40020000
 800107c:	40023800 	.word	0x40023800
 8001080:	40021400 	.word	0x40021400

08001084 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	b10a      	cbz	r2, 800108a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001086:	6181      	str	r1, [r0, #24]
 8001088:	4770      	bx	lr
 800108a:	0409      	lsls	r1, r1, #16
 800108c:	e7fb      	b.n	8001086 <HAL_GPIO_WritePin+0x2>

0800108e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800108e:	6943      	ldr	r3, [r0, #20]
 8001090:	4059      	eors	r1, r3
 8001092:	6141      	str	r1, [r0, #20]
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	4604      	mov	r4, r0
 800109e:	b918      	cbnz	r0, 80010a8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010a2:	b002      	add	sp, #8
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a8:	6803      	ldr	r3, [r0, #0]
 80010aa:	07dd      	lsls	r5, r3, #31
 80010ac:	d410      	bmi.n	80010d0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	0798      	lsls	r0, r3, #30
 80010b2:	d458      	bmi.n	8001166 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	071a      	lsls	r2, r3, #28
 80010b8:	f100 809a 	bmi.w	80011f0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	075b      	lsls	r3, r3, #29
 80010c0:	f100 80b8 	bmi.w	8001234 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c4:	69a2      	ldr	r2, [r4, #24]
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	f040 8119 	bne.w	80012fe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80010cc:	2000      	movs	r0, #0
 80010ce:	e7e8      	b.n	80010a2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d0:	4ba6      	ldr	r3, [pc, #664]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	f002 020c 	and.w	r2, r2, #12
 80010d8:	2a04      	cmp	r2, #4
 80010da:	d007      	beq.n	80010ec <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e2:	2a08      	cmp	r2, #8
 80010e4:	d10a      	bne.n	80010fc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	0259      	lsls	r1, r3, #9
 80010ea:	d507      	bpl.n	80010fc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	4b9f      	ldr	r3, [pc, #636]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	039a      	lsls	r2, r3, #14
 80010f2:	d5dc      	bpl.n	80010ae <HAL_RCC_OscConfig+0x16>
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1d9      	bne.n	80010ae <HAL_RCC_OscConfig+0x16>
 80010fa:	e7d1      	b.n	80010a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	4d9b      	ldr	r5, [pc, #620]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d111      	bne.n	800112a <HAL_RCC_OscConfig+0x92>
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800110e:	f7ff fd13 	bl	8000b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4d96      	ldr	r5, [pc, #600]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001114:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	039b      	lsls	r3, r3, #14
 800111a:	d4c8      	bmi.n	80010ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fd0c 	bl	8000b38 <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	2864      	cmp	r0, #100	; 0x64
 8001124:	d9f7      	bls.n	8001116 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001126:	2003      	movs	r0, #3
 8001128:	e7bb      	b.n	80010a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800112e:	d104      	bne.n	800113a <HAL_RCC_OscConfig+0xa2>
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001136:	602b      	str	r3, [r5, #0]
 8001138:	e7e5      	b.n	8001106 <HAL_RCC_OscConfig+0x6e>
 800113a:	682a      	ldr	r2, [r5, #0]
 800113c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001140:	602a      	str	r2, [r5, #0]
 8001142:	682a      	ldr	r2, [r5, #0]
 8001144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001148:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1df      	bne.n	800110e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800114e:	f7ff fcf3 	bl	8000b38 <HAL_GetTick>
 8001152:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	039f      	lsls	r7, r3, #14
 8001158:	d5a9      	bpl.n	80010ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115a:	f7ff fced 	bl	8000b38 <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	2864      	cmp	r0, #100	; 0x64
 8001162:	d9f7      	bls.n	8001154 <HAL_RCC_OscConfig+0xbc>
 8001164:	e7df      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	4b81      	ldr	r3, [pc, #516]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	f012 0f0c 	tst.w	r2, #12
 800116e:	d007      	beq.n	8001180 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	2a08      	cmp	r2, #8
 8001178:	d111      	bne.n	800119e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	025e      	lsls	r6, r3, #9
 800117e:	d40e      	bmi.n	800119e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001180:	4b7a      	ldr	r3, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	0795      	lsls	r5, r2, #30
 8001186:	d502      	bpl.n	800118e <HAL_RCC_OscConfig+0xf6>
 8001188:	68e2      	ldr	r2, [r4, #12]
 800118a:	2a01      	cmp	r2, #1
 800118c:	d188      	bne.n	80010a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6921      	ldr	r1, [r4, #16]
 8001192:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001196:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800119a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119c:	e78a      	b.n	80010b4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800119e:	68e2      	ldr	r2, [r4, #12]
 80011a0:	4b73      	ldr	r3, [pc, #460]	; (8001370 <HAL_RCC_OscConfig+0x2d8>)
 80011a2:	b1b2      	cbz	r2, 80011d2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcc6 	bl	8000b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4d6f      	ldr	r5, [pc, #444]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	0798      	lsls	r0, r3, #30
 80011b4:	d507      	bpl.n	80011c6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	6922      	ldr	r2, [r4, #16]
 80011ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	e776      	b.n	80010b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fcb7 	bl	8000b38 <HAL_GetTick>
 80011ca:	1b80      	subs	r0, r0, r6
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9ef      	bls.n	80011b0 <HAL_RCC_OscConfig+0x118>
 80011d0:	e7a9      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80011d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011d4:	f7ff fcb0 	bl	8000b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d8:	4d64      	ldr	r5, [pc, #400]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	0799      	lsls	r1, r3, #30
 80011e0:	f57f af68 	bpl.w	80010b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fca8 	bl	8000b38 <HAL_GetTick>
 80011e8:	1b80      	subs	r0, r0, r6
 80011ea:	2802      	cmp	r0, #2
 80011ec:	d9f6      	bls.n	80011dc <HAL_RCC_OscConfig+0x144>
 80011ee:	e79a      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011f0:	6962      	ldr	r2, [r4, #20]
 80011f2:	4b60      	ldr	r3, [pc, #384]	; (8001374 <HAL_RCC_OscConfig+0x2dc>)
 80011f4:	b17a      	cbz	r2, 8001216 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011fa:	f7ff fc9d 	bl	8000b38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4d5b      	ldr	r5, [pc, #364]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001200:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001204:	079f      	lsls	r7, r3, #30
 8001206:	f53f af59 	bmi.w	80010bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fc95 	bl	8000b38 <HAL_GetTick>
 800120e:	1b80      	subs	r0, r0, r6
 8001210:	2802      	cmp	r0, #2
 8001212:	d9f6      	bls.n	8001202 <HAL_RCC_OscConfig+0x16a>
 8001214:	e787      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001216:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001218:	f7ff fc8e 	bl	8000b38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4d53      	ldr	r5, [pc, #332]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800121e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001220:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001222:	0798      	lsls	r0, r3, #30
 8001224:	f57f af4a 	bpl.w	80010bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fc86 	bl	8000b38 <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	2802      	cmp	r0, #2
 8001230:	d9f6      	bls.n	8001220 <HAL_RCC_OscConfig+0x188>
 8001232:	e778      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001238:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800123c:	d128      	bne.n	8001290 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	9201      	str	r2, [sp, #4]
 8001240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001252:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4d48      	ldr	r5, [pc, #288]	; (8001378 <HAL_RCC_OscConfig+0x2e0>)
 8001256:	682b      	ldr	r3, [r5, #0]
 8001258:	05d9      	lsls	r1, r3, #23
 800125a:	d51b      	bpl.n	8001294 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125c:	68a3      	ldr	r3, [r4, #8]
 800125e:	4d43      	ldr	r5, [pc, #268]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001260:	2b01      	cmp	r3, #1
 8001262:	d127      	bne.n	80012b4 <HAL_RCC_OscConfig+0x21c>
 8001264:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800126c:	f7ff fc64 	bl	8000b38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	4d3e      	ldr	r5, [pc, #248]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001272:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800127a:	079b      	lsls	r3, r3, #30
 800127c:	d539      	bpl.n	80012f2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800127e:	2e00      	cmp	r6, #0
 8001280:	f43f af20 	beq.w	80010c4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001284:	4a39      	ldr	r2, [pc, #228]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001286:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	e719      	b.n	80010c4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001290:	2600      	movs	r6, #0
 8001292:	e7df      	b.n	8001254 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800129c:	f7ff fc4c 	bl	8000b38 <HAL_GetTick>
 80012a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	05da      	lsls	r2, r3, #23
 80012a6:	d4d9      	bmi.n	800125c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a8:	f7ff fc46 	bl	8000b38 <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	2802      	cmp	r0, #2
 80012b0:	d9f7      	bls.n	80012a2 <HAL_RCC_OscConfig+0x20a>
 80012b2:	e738      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d104      	bne.n	80012c2 <HAL_RCC_OscConfig+0x22a>
 80012b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	672b      	str	r3, [r5, #112]	; 0x70
 80012c0:	e7d0      	b.n	8001264 <HAL_RCC_OscConfig+0x1cc>
 80012c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	672a      	str	r2, [r5, #112]	; 0x70
 80012ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012cc:	f022 0204 	bic.w	r2, r2, #4
 80012d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ca      	bne.n	800126c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc2f 	bl	8000b38 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012e2:	0798      	lsls	r0, r3, #30
 80012e4:	d5cb      	bpl.n	800127e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fc27 	bl	8000b38 <HAL_GetTick>
 80012ea:	1bc0      	subs	r0, r0, r7
 80012ec:	4540      	cmp	r0, r8
 80012ee:	d9f7      	bls.n	80012e0 <HAL_RCC_OscConfig+0x248>
 80012f0:	e719      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fc21 	bl	8000b38 <HAL_GetTick>
 80012f6:	1bc0      	subs	r0, r0, r7
 80012f8:	4540      	cmp	r0, r8
 80012fa:	d9bd      	bls.n	8001278 <HAL_RCC_OscConfig+0x1e0>
 80012fc:	e713      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012fe:	4d1b      	ldr	r5, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
 8001300:	68ab      	ldr	r3, [r5, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b08      	cmp	r3, #8
 8001308:	f43f aeca 	beq.w	80010a0 <HAL_RCC_OscConfig+0x8>
 800130c:	4e1b      	ldr	r6, [pc, #108]	; (800137c <HAL_RCC_OscConfig+0x2e4>)
 800130e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001310:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001312:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001314:	d134      	bne.n	8001380 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001316:	f7ff fc0f 	bl	8000b38 <HAL_GetTick>
 800131a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	0199      	lsls	r1, r3, #6
 8001320:	d41e      	bmi.n	8001360 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001322:	6a22      	ldr	r2, [r4, #32]
 8001324:	69e3      	ldr	r3, [r4, #28]
 8001326:	4313      	orrs	r3, r2
 8001328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800132a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800132e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001330:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001334:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001336:	4c0d      	ldr	r4, [pc, #52]	; (800136c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001338:	0852      	lsrs	r2, r2, #1
 800133a:	3a01      	subs	r2, #1
 800133c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001340:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001342:	2301      	movs	r3, #1
 8001344:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001346:	f7ff fbf7 	bl	8000b38 <HAL_GetTick>
 800134a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	019a      	lsls	r2, r3, #6
 8001350:	f53f aebc 	bmi.w	80010cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fbf0 	bl	8000b38 <HAL_GetTick>
 8001358:	1b40      	subs	r0, r0, r5
 800135a:	2802      	cmp	r0, #2
 800135c:	d9f6      	bls.n	800134c <HAL_RCC_OscConfig+0x2b4>
 800135e:	e6e2      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fbea 	bl	8000b38 <HAL_GetTick>
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	2802      	cmp	r0, #2
 8001368:	d9d8      	bls.n	800131c <HAL_RCC_OscConfig+0x284>
 800136a:	e6dc      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
 800136c:	40023800 	.word	0x40023800
 8001370:	42470000 	.word	0x42470000
 8001374:	42470e80 	.word	0x42470e80
 8001378:	40007000 	.word	0x40007000
 800137c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001380:	f7ff fbda 	bl	8000b38 <HAL_GetTick>
 8001384:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	f57f ae9f 	bpl.w	80010cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fbd3 	bl	8000b38 <HAL_GetTick>
 8001392:	1b00      	subs	r0, r0, r4
 8001394:	2802      	cmp	r0, #2
 8001396:	d9f6      	bls.n	8001386 <HAL_RCC_OscConfig+0x2ee>
 8001398:	e6c5      	b.n	8001126 <HAL_RCC_OscConfig+0x8e>
 800139a:	bf00      	nop

0800139c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800139c:	4913      	ldr	r1, [pc, #76]	; (80013ec <HAL_RCC_GetSysClockFreq+0x50>)
{
 800139e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a0:	688b      	ldr	r3, [r1, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d003      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x16>
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d003      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013b0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80013b4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c0:	bf14      	ite	ne
 80013c2:	480c      	ldrne	r0, [pc, #48]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c4:	480a      	ldreq	r0, [pc, #40]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013ca:	bf18      	it	ne
 80013cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	fba1 0100 	umull	r0, r1, r1, r0
 80013d6:	f7fe ff4b 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_RCC_GetSysClockFreq+0x50>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	00f42400 	.word	0x00f42400
 80013f4:	007a1200 	.word	0x007a1200

080013f8 <HAL_RCC_ClockConfig>:
{
 80013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013fe:	4604      	mov	r4, r0
 8001400:	b910      	cbnz	r0, 8001408 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b44      	ldr	r3, [pc, #272]	; (800151c <HAL_RCC_ClockConfig+0x124>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f002 020f 	and.w	r2, r2, #15
 8001410:	428a      	cmp	r2, r1
 8001412:	d328      	bcc.n	8001466 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	6821      	ldr	r1, [r4, #0]
 8001416:	078f      	lsls	r7, r1, #30
 8001418:	d42d      	bmi.n	8001476 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	07c8      	lsls	r0, r1, #31
 800141c:	d440      	bmi.n	80014a0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_ClockConfig+0x124>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f002 020f 	and.w	r2, r2, #15
 8001426:	4295      	cmp	r5, r2
 8001428:	d366      	bcc.n	80014f8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142a:	6822      	ldr	r2, [r4, #0]
 800142c:	0751      	lsls	r1, r2, #29
 800142e:	d46c      	bmi.n	800150a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	0713      	lsls	r3, r2, #28
 8001432:	d507      	bpl.n	8001444 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001434:	4a3a      	ldr	r2, [pc, #232]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 8001436:	6921      	ldr	r1, [r4, #16]
 8001438:	6893      	ldr	r3, [r2, #8]
 800143a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800143e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001442:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001444:	f7ff ffaa 	bl	800139c <HAL_RCC_GetSysClockFreq>
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 800144a:	4a36      	ldr	r2, [pc, #216]	; (8001524 <HAL_RCC_ClockConfig+0x12c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	40d8      	lsrs	r0, r3
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_ClockConfig+0x130>)
 8001458:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff fac4 	bl	80009e8 <HAL_InitTick>
  return HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	4299      	cmp	r1, r3
 8001472:	d1c6      	bne.n	8001402 <HAL_RCC_ClockConfig+0xa>
 8001474:	e7ce      	b.n	8001414 <HAL_RCC_ClockConfig+0x1c>
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800147c:	bf1e      	ittt	ne
 800147e:	689a      	ldrne	r2, [r3, #8]
 8001480:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001484:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	bf42      	ittt	mi
 800148a:	689a      	ldrmi	r2, [r3, #8]
 800148c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001490:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	68a0      	ldr	r0, [r4, #8]
 8001496:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800149a:	4302      	orrs	r2, r0
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	e7bc      	b.n	800141a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a0:	6862      	ldr	r2, [r4, #4]
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 80014a4:	2a01      	cmp	r2, #1
 80014a6:	d11d      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	d0a8      	beq.n	8001402 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b0:	4e1b      	ldr	r6, [pc, #108]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 80014b2:	68b3      	ldr	r3, [r6, #8]
 80014b4:	f023 0303 	bic.w	r3, r3, #3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014bc:	f7ff fb3c 	bl	8000b38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	68b3      	ldr	r3, [r6, #8]
 80014c8:	6862      	ldr	r2, [r4, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014d2:	d0a4      	beq.n	800141e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff fb30 	bl	8000b38 <HAL_GetTick>
 80014d8:	1bc0      	subs	r0, r0, r7
 80014da:	4540      	cmp	r0, r8
 80014dc:	d9f3      	bls.n	80014c6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80014de:	2003      	movs	r0, #3
}
 80014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e4:	1e91      	subs	r1, r2, #2
 80014e6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	d802      	bhi.n	80014f2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f0:	e7dd      	b.n	80014ae <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	f013 0f02 	tst.w	r3, #2
 80014f6:	e7da      	b.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f8:	b2ea      	uxtb	r2, r5
 80014fa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	429d      	cmp	r5, r3
 8001504:	f47f af7d 	bne.w	8001402 <HAL_RCC_ClockConfig+0xa>
 8001508:	e78f      	b.n	800142a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150a:	4905      	ldr	r1, [pc, #20]	; (8001520 <HAL_RCC_ClockConfig+0x128>)
 800150c:	68e0      	ldr	r0, [r4, #12]
 800150e:	688b      	ldr	r3, [r1, #8]
 8001510:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001514:	4303      	orrs	r3, r0
 8001516:	608b      	str	r3, [r1, #8]
 8001518:	e78a      	b.n	8001430 <HAL_RCC_ClockConfig+0x38>
 800151a:	bf00      	nop
 800151c:	40023c00 	.word	0x40023c00
 8001520:	40023800 	.word	0x40023800
 8001524:	0800384b 	.word	0x0800384b
 8001528:	20000000 	.word	0x20000000

0800152c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800152c:	4b01      	ldr	r3, [pc, #4]	; (8001534 <HAL_RCC_GetHCLKFreq+0x8>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_GetPCLK1Freq+0x14>)
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <HAL_RCC_GetPCLK1Freq+0x18>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001546:	6810      	ldr	r0, [r2, #0]
}
 8001548:	40d8      	lsrs	r0, r3
 800154a:	4770      	bx	lr
 800154c:	40023800 	.word	0x40023800
 8001550:	0800385b 	.word	0x0800385b
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_RCC_GetPCLK2Freq+0x14>)
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x18>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001566:	6810      	ldr	r0, [r2, #0]
}
 8001568:	40d8      	lsrs	r0, r3
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	0800385b 	.word	0x0800385b
 8001574:	20000000 	.word	0x20000000

08001578 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001578:	230f      	movs	r3, #15
 800157a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_GetClockConfig+0x34>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800158c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001594:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	08db      	lsrs	r3, r3, #3
 800159a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800159e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_GetClockConfig+0x38>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	600b      	str	r3, [r1, #0]
 80015aa:	4770      	bx	lr
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015b4:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 80015bc:	6813      	ldr	r3, [r2, #0]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 80015ca:	2000      	movs	r0, #0
 80015cc:	4770      	bx	lr

080015ce <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80015e0:	2000      	movs	r0, #0
 80015e2:	4770      	bx	lr

080015e4 <HAL_TIM_OC_DelayElapsedCallback>:
 80015e4:	4770      	bx	lr

080015e6 <HAL_TIM_IC_CaptureCallback>:
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_TriggerCallback>:
 80015ea:	4770      	bx	lr

080015ec <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ec:	6803      	ldr	r3, [r0, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	0791      	lsls	r1, r2, #30
{
 80015f2:	b510      	push	{r4, lr}
 80015f4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f6:	d50e      	bpl.n	8001616 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	0792      	lsls	r2, r2, #30
 80015fc:	d50b      	bpl.n	8001616 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015fe:	f06f 0202 	mvn.w	r2, #2
 8001602:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001604:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001606:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001608:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800160a:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800160c:	d077      	beq.n	80016fe <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800160e:	f7ff ffea 	bl	80015e6 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001612:	2300      	movs	r3, #0
 8001614:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	0750      	lsls	r0, r2, #29
 800161c:	d510      	bpl.n	8001640 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	0751      	lsls	r1, r2, #29
 8001622:	d50d      	bpl.n	8001640 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001624:	f06f 0204 	mvn.w	r2, #4
 8001628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001632:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001634:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001636:	d068      	beq.n	800170a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001638:	f7ff ffd5 	bl	80015e6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163c:	2300      	movs	r3, #0
 800163e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	0712      	lsls	r2, r2, #28
 8001646:	d50f      	bpl.n	8001668 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	0710      	lsls	r0, r2, #28
 800164c:	d50c      	bpl.n	8001668 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800164e:	f06f 0208 	mvn.w	r2, #8
 8001652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001654:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001656:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001658:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800165c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165e:	d05a      	beq.n	8001716 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001660:	f7ff ffc1 	bl	80015e6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001664:	2300      	movs	r3, #0
 8001666:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	06d2      	lsls	r2, r2, #27
 800166e:	d510      	bpl.n	8001692 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	06d0      	lsls	r0, r2, #27
 8001674:	d50d      	bpl.n	8001692 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001676:	f06f 0210 	mvn.w	r2, #16
 800167a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800167c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800167e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001680:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001684:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001686:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001688:	d04b      	beq.n	8001722 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800168a:	f7ff ffac 	bl	80015e6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168e:	2300      	movs	r3, #0
 8001690:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	07d1      	lsls	r1, r2, #31
 8001698:	d508      	bpl.n	80016ac <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	07d2      	lsls	r2, r2, #31
 800169e:	d505      	bpl.n	80016ac <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a0:	f06f 0201 	mvn.w	r2, #1
 80016a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff f8dc 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	0610      	lsls	r0, r2, #24
 80016b2:	d508      	bpl.n	80016c6 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	0611      	lsls	r1, r2, #24
 80016b8:	d505      	bpl.n	80016c6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f000 f8d6 	bl	8001872 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	0652      	lsls	r2, r2, #25
 80016cc:	d508      	bpl.n	80016e0 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	0650      	lsls	r0, r2, #25
 80016d2:	d505      	bpl.n	80016e0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ff85 	bl	80015ea <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	0691      	lsls	r1, r2, #26
 80016e6:	d522      	bpl.n	800172e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	0692      	lsls	r2, r2, #26
 80016ec:	d51f      	bpl.n	800172e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f4:	611a      	str	r2, [r3, #16]
    }
  }
}
 80016f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80016fa:	f000 b8b9 	b.w	8001870 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fe:	f7ff ff71 	bl	80015e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff ff70 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001708:	e783      	b.n	8001612 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	f7ff ff6b 	bl	80015e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff ff6a 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001714:	e792      	b.n	800163c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001716:	f7ff ff65 	bl	80015e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff ff64 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001720:	e7a0      	b.n	8001664 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001722:	f7ff ff5f 	bl	80015e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff5e 	bl	80015e8 <HAL_TIM_PWM_PulseFinishedCallback>
 800172c:	e7af      	b.n	800168e <HAL_TIM_IRQHandler+0xa2>
 800172e:	bd10      	pop	{r4, pc}

08001730 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001730:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001732:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001734:	4290      	cmp	r0, r2
 8001736:	d012      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 8001738:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800173c:	d00f      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 800173e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001742:	4290      	cmp	r0, r2
 8001744:	d00b      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 8001746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174a:	4290      	cmp	r0, r2
 800174c:	d007      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 800174e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001752:	4290      	cmp	r0, r2
 8001754:	d003      	beq.n	800175e <TIM_Base_SetConfig+0x2e>
 8001756:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800175a:	4290      	cmp	r0, r2
 800175c:	d11d      	bne.n	800179a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800175e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001764:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <TIM_Base_SetConfig+0xbc>)
 8001768:	4290      	cmp	r0, r2
 800176a:	d104      	bne.n	8001776 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800176c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800176e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001772:	4313      	orrs	r3, r2
 8001774:	e028      	b.n	80017c8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001776:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800177a:	d0f7      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <TIM_Base_SetConfig+0xc0>)
 800177e:	4290      	cmp	r0, r2
 8001780:	d0f4      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 8001782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001786:	4290      	cmp	r0, r2
 8001788:	d0f0      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 800178a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800178e:	4290      	cmp	r0, r2
 8001790:	d0ec      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 8001792:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001796:	4290      	cmp	r0, r2
 8001798:	d0e8      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <TIM_Base_SetConfig+0xc4>)
 800179c:	4290      	cmp	r0, r2
 800179e:	d0e5      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 80017a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017a4:	4290      	cmp	r0, r2
 80017a6:	d0e1      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 80017a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ac:	4290      	cmp	r0, r2
 80017ae:	d0dd      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 80017b0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017b4:	4290      	cmp	r0, r2
 80017b6:	d0d9      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 80017b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017bc:	4290      	cmp	r0, r2
 80017be:	d0d5      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
 80017c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c4:	4290      	cmp	r0, r2
 80017c6:	d0d1      	beq.n	800176c <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 80017c8:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ca:	688b      	ldr	r3, [r1, #8]
 80017cc:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017ce:	680b      	ldr	r3, [r1, #0]
 80017d0:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <TIM_Base_SetConfig+0xbc>)
 80017d4:	4298      	cmp	r0, r3
 80017d6:	d006      	beq.n	80017e6 <TIM_Base_SetConfig+0xb6>
 80017d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017dc:	4298      	cmp	r0, r3
 80017de:	d002      	beq.n	80017e6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017e0:	2301      	movs	r3, #1
 80017e2:	6143      	str	r3, [r0, #20]
}
 80017e4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80017e6:	690b      	ldr	r3, [r1, #16]
 80017e8:	6303      	str	r3, [r0, #48]	; 0x30
 80017ea:	e7f9      	b.n	80017e0 <TIM_Base_SetConfig+0xb0>
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40000400 	.word	0x40000400
 80017f4:	40014000 	.word	0x40014000

080017f8 <HAL_TIM_Base_Init>:
{ 
 80017f8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017fa:	4604      	mov	r4, r0
 80017fc:	b1a0      	cbz	r0, 8001828 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001802:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001806:	b91b      	cbnz	r3, 8001810 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001808:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800180c:	f7ff f886 	bl	800091c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001810:	2302      	movs	r3, #2
 8001812:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001816:	6820      	ldr	r0, [r4, #0]
 8001818:	1d21      	adds	r1, r4, #4
 800181a:	f7ff ff89 	bl	8001730 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800181e:	2301      	movs	r3, #1
 8001820:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001824:	2000      	movs	r0, #0
 8001826:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
}
 800182a:	bd10      	pop	{r4, pc}

0800182c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800182c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001830:	2b01      	cmp	r3, #1
{
 8001832:	b510      	push	{r4, lr}
 8001834:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001838:	d018      	beq.n	800186c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800183a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800183e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001840:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001842:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001844:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800184a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4322      	orrs	r2, r4
 8001850:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001858:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001860:	2301      	movs	r3, #1
 8001862:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001866:	2300      	movs	r3, #0
 8001868:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800186c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800186e:	bd10      	pop	{r4, pc}

08001870 <HAL_TIMEx_CommutationCallback>:
 8001870:	4770      	bx	lr

08001872 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001872:	4770      	bx	lr

08001874 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001874:	6803      	ldr	r3, [r0, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800187c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001886:	2320      	movs	r3, #32
 8001888:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800188c:	4770      	bx	lr
	...

08001890 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001894:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001896:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001898:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800189a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800189c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80018a0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80018a2:	6133      	str	r3, [r6, #16]
{
 80018a4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018a6:	6883      	ldr	r3, [r0, #8]
 80018a8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80018aa:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018ac:	4303      	orrs	r3, r0
 80018ae:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80018b0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018b4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80018b6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018ba:	430b      	orrs	r3, r1
 80018bc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80018be:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80018c0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80018c2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80018c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80018c8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80018ce:	6173      	str	r3, [r6, #20]
 80018d0:	4b7a      	ldr	r3, [pc, #488]	; (8001abc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018d2:	d17c      	bne.n	80019ce <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80018d4:	429e      	cmp	r6, r3
 80018d6:	d003      	beq.n	80018e0 <UART_SetConfig+0x50>
 80018d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018dc:	429e      	cmp	r6, r3
 80018de:	d144      	bne.n	800196a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018e0:	f7ff fe3a 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80018e4:	2519      	movs	r5, #25
 80018e6:	fb05 f300 	mul.w	r3, r5, r0
 80018ea:	6860      	ldr	r0, [r4, #4]
 80018ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018f0:	0040      	lsls	r0, r0, #1
 80018f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80018f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80018fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80018fe:	f7ff fe2b 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	4368      	muls	r0, r5
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fbb0 f7f3 	udiv	r7, r0, r3
 800190c:	f7ff fe24 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	4368      	muls	r0, r5
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	fbb3 f3f9 	udiv	r3, r3, r9
 800191e:	fb09 7313 	mls	r3, r9, r3, r7
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	3332      	adds	r3, #50	; 0x32
 8001926:	fbb3 f3f9 	udiv	r3, r3, r9
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001930:	f7ff fe12 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001934:	6862      	ldr	r2, [r4, #4]
 8001936:	4368      	muls	r0, r5
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	fbb0 faf2 	udiv	sl, r0, r2
 800193e:	f7ff fe0b 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	4368      	muls	r0, r5
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fbb0 f3f3 	udiv	r3, r0, r3
 800194c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001950:	fb09 a313 	mls	r3, r9, r3, sl
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	3332      	adds	r3, #50	; 0x32
 8001958:	fbb3 f3f9 	udiv	r3, r3, r9
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001962:	443b      	add	r3, r7
 8001964:	60b3      	str	r3, [r6, #8]
 8001966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800196a:	f7ff fde5 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 800196e:	2519      	movs	r5, #25
 8001970:	fb05 f300 	mul.w	r3, r5, r0
 8001974:	6860      	ldr	r0, [r4, #4]
 8001976:	f04f 0964 	mov.w	r9, #100	; 0x64
 800197a:	0040      	lsls	r0, r0, #1
 800197c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001980:	fbb3 f3f9 	udiv	r3, r3, r9
 8001984:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001988:	f7ff fdd6 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	4368      	muls	r0, r5
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fbb0 f7f3 	udiv	r7, r0, r3
 8001996:	f7ff fdcf 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	4368      	muls	r0, r5
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019a8:	fb09 7313 	mls	r3, r9, r3, r7
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	3332      	adds	r3, #50	; 0x32
 80019b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80019ba:	f7ff fdbd 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 80019be:	6862      	ldr	r2, [r4, #4]
 80019c0:	4368      	muls	r0, r5
 80019c2:	0052      	lsls	r2, r2, #1
 80019c4:	fbb0 faf2 	udiv	sl, r0, r2
 80019c8:	f7ff fdb6 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 80019cc:	e7b9      	b.n	8001942 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80019ce:	429e      	cmp	r6, r3
 80019d0:	d002      	beq.n	80019d8 <UART_SetConfig+0x148>
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <UART_SetConfig+0x230>)
 80019d4:	429e      	cmp	r6, r3
 80019d6:	d140      	bne.n	8001a5a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80019d8:	f7ff fdbe 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80019dc:	6867      	ldr	r7, [r4, #4]
 80019de:	2519      	movs	r5, #25
 80019e0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019e4:	fb05 f300 	mul.w	r3, r5, r0
 80019e8:	00bf      	lsls	r7, r7, #2
 80019ea:	fbb3 f3f7 	udiv	r3, r3, r7
 80019ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80019f2:	011f      	lsls	r7, r3, #4
 80019f4:	f7ff fdb0 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80019f8:	6863      	ldr	r3, [r4, #4]
 80019fa:	4368      	muls	r0, r5
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a02:	f7ff fda9 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001a06:	6863      	ldr	r3, [r4, #4]
 8001a08:	4368      	muls	r0, r5
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a10:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a14:	fb09 8313 	mls	r3, r9, r3, r8
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	3332      	adds	r3, #50	; 0x32
 8001a1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a20:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a24:	f7ff fd98 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8001a28:	6862      	ldr	r2, [r4, #4]
 8001a2a:	4368      	muls	r0, r5
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	fbb0 faf2 	udiv	sl, r0, r2
 8001a32:	f7ff fd91 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a36:	6863      	ldr	r3, [r4, #4]
 8001a38:	4368      	muls	r0, r5
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a40:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a44:	fb09 a313 	mls	r3, r9, r3, sl
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	3332      	adds	r3, #50	; 0x32
 8001a4c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	ea43 0308 	orr.w	r3, r3, r8
 8001a58:	e783      	b.n	8001962 <UART_SetConfig+0xd2>
 8001a5a:	f7ff fd6d 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a5e:	6867      	ldr	r7, [r4, #4]
 8001a60:	2519      	movs	r5, #25
 8001a62:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a66:	fb05 f300 	mul.w	r3, r5, r0
 8001a6a:	00bf      	lsls	r7, r7, #2
 8001a6c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a70:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a74:	011f      	lsls	r7, r3, #4
 8001a76:	f7ff fd5f 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	4368      	muls	r0, r5
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a84:	f7ff fd58 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001a88:	6863      	ldr	r3, [r4, #4]
 8001a8a:	4368      	muls	r0, r5
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a96:	fb09 8313 	mls	r3, r9, r3, r8
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	3332      	adds	r3, #50	; 0x32
 8001a9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aa2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001aa6:	f7ff fd47 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001aaa:	6862      	ldr	r2, [r4, #4]
 8001aac:	4368      	muls	r0, r5
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	fbb0 faf2 	udiv	sl, r0, r2
 8001ab4:	f7ff fd40 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 8001ab8:	e7bd      	b.n	8001a36 <UART_SetConfig+0x1a6>
 8001aba:	bf00      	nop
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40011400 	.word	0x40011400

08001ac4 <HAL_UART_Init>:
{
 8001ac4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	b340      	cbz	r0, 8001b1c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001aca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ace:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ad2:	b91b      	cbnz	r3, 8001adc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ad4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ad8:	f7fe ff56 	bl	8000988 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001adc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ade:	2324      	movs	r3, #36	; 0x24
 8001ae0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001ae4:	68d3      	ldr	r3, [r2, #12]
 8001ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fecf 	bl	8001890 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001afa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b02:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b0a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001b0e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b10:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001b12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001b16:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
}
 8001b1e:	bd10      	pop	{r4, pc}

08001b20 <HAL_UART_TxCpltCallback>:
 8001b20:	4770      	bx	lr

08001b22 <HAL_UART_RxCpltCallback>:
 8001b22:	4770      	bx	lr

08001b24 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001b24:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001b28:	2b22      	cmp	r3, #34	; 0x22
{
 8001b2a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001b2c:	d132      	bne.n	8001b94 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b2e:	6883      	ldr	r3, [r0, #8]
 8001b30:	6901      	ldr	r1, [r0, #16]
 8001b32:	6802      	ldr	r2, [r0, #0]
 8001b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b3a:	d11f      	bne.n	8001b7c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b3c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b3e:	b9c9      	cbnz	r1, 8001b74 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b44:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001b48:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001b4a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001b4c:	3c01      	subs	r4, #1
 8001b4e:	b2a4      	uxth	r4, r4
 8001b50:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001b52:	b96c      	cbnz	r4, 8001b70 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b54:	6803      	ldr	r3, [r0, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b5c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001b66:	2320      	movs	r3, #32
 8001b68:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001b6c:	f7ff ffd9 	bl	8001b22 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001b70:	2000      	movs	r0, #0
}
 8001b72:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f823 2b01 	strh.w	r2, [r3], #1
 8001b7a:	e7e5      	b.n	8001b48 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b7c:	b921      	cbnz	r1, 8001b88 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	6852      	ldr	r2, [r2, #4]
 8001b82:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e7e0      	b.n	8001b4a <UART_Receive_IT+0x26>
 8001b88:	6852      	ldr	r2, [r2, #4]
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	6281      	str	r1, [r0, #40]	; 0x28
 8001b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b92:	e7f7      	b.n	8001b84 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001b94:	2002      	movs	r0, #2
 8001b96:	bd10      	pop	{r4, pc}

08001b98 <HAL_UART_ErrorCallback>:
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ba0:	68d9      	ldr	r1, [r3, #12]
{
 8001ba2:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001ba4:	0716      	lsls	r6, r2, #28
{
 8001ba6:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ba8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001baa:	d107      	bne.n	8001bbc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bac:	0696      	lsls	r6, r2, #26
 8001bae:	d55a      	bpl.n	8001c66 <HAL_UART_IRQHandler+0xca>
 8001bb0:	068d      	lsls	r5, r1, #26
 8001bb2:	d558      	bpl.n	8001c66 <HAL_UART_IRQHandler+0xca>
}
 8001bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001bb8:	f7ff bfb4 	b.w	8001b24 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bbc:	f015 0501 	ands.w	r5, r5, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_UART_IRQHandler+0x2c>
 8001bc2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001bc6:	d04e      	beq.n	8001c66 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bc8:	07d3      	lsls	r3, r2, #31
 8001bca:	d505      	bpl.n	8001bd8 <HAL_UART_IRQHandler+0x3c>
 8001bcc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bce:	bf42      	ittt	mi
 8001bd0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001bd2:	f043 0301 	orrmi.w	r3, r3, #1
 8001bd6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bd8:	0750      	lsls	r0, r2, #29
 8001bda:	d504      	bpl.n	8001be6 <HAL_UART_IRQHandler+0x4a>
 8001bdc:	b11d      	cbz	r5, 8001be6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001be6:	0793      	lsls	r3, r2, #30
 8001be8:	d504      	bpl.n	8001bf4 <HAL_UART_IRQHandler+0x58>
 8001bea:	b11d      	cbz	r5, 8001bf4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bf4:	0716      	lsls	r6, r2, #28
 8001bf6:	d504      	bpl.n	8001c02 <HAL_UART_IRQHandler+0x66>
 8001bf8:	b11d      	cbz	r5, 8001c02 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d066      	beq.n	8001cd6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c08:	0695      	lsls	r5, r2, #26
 8001c0a:	d504      	bpl.n	8001c16 <HAL_UART_IRQHandler+0x7a>
 8001c0c:	0688      	lsls	r0, r1, #26
 8001c0e:	d502      	bpl.n	8001c16 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff ff87 	bl	8001b24 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c1c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001c1e:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c20:	d402      	bmi.n	8001c28 <HAL_UART_IRQHandler+0x8c>
 8001c22:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c26:	d01a      	beq.n	8001c5e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001c28:	f7ff fe24 	bl	8001874 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	0652      	lsls	r2, r2, #25
 8001c32:	d510      	bpl.n	8001c56 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c34:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001c36:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c3c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001c3e:	b150      	cbz	r0, 8001c56 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_UART_IRQHandler+0x13c>)
 8001c42:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c44:	f7ff f92c 	bl	8000ea0 <HAL_DMA_Abort_IT>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d044      	beq.n	8001cd6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c54:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff ff9e 	bl	8001b98 <HAL_UART_ErrorCallback>
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001c5e:	f7ff ff9b 	bl	8001b98 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c62:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c66:	0616      	lsls	r6, r2, #24
 8001c68:	d527      	bpl.n	8001cba <HAL_UART_IRQHandler+0x11e>
 8001c6a:	060d      	lsls	r5, r1, #24
 8001c6c:	d525      	bpl.n	8001cba <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c6e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001c72:	2a21      	cmp	r2, #33	; 0x21
 8001c74:	d12f      	bne.n	8001cd6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c76:	68a2      	ldr	r2, [r4, #8]
 8001c78:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c7c:	6a22      	ldr	r2, [r4, #32]
 8001c7e:	d117      	bne.n	8001cb0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c80:	8811      	ldrh	r1, [r2, #0]
 8001c82:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c86:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001c88:	6921      	ldr	r1, [r4, #16]
 8001c8a:	b979      	cbnz	r1, 8001cac <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001c8c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001c8e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001c90:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001c92:	3a01      	subs	r2, #1
 8001c94:	b292      	uxth	r2, r2
 8001c96:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001c98:	b9ea      	cbnz	r2, 8001cd6 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca0:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001cac:	3201      	adds	r2, #1
 8001cae:	e7ee      	b.n	8001c8e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001cb0:	1c51      	adds	r1, r2, #1
 8001cb2:	6221      	str	r1, [r4, #32]
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	e7ea      	b.n	8001c90 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cba:	0650      	lsls	r0, r2, #25
 8001cbc:	d50b      	bpl.n	8001cd6 <HAL_UART_IRQHandler+0x13a>
 8001cbe:	064a      	lsls	r2, r1, #25
 8001cc0:	d509      	bpl.n	8001cd6 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff ff25 	bl	8001b20 <HAL_UART_TxCpltCallback>
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
 8001cd8:	08001cdd 	.word	0x08001cdd

08001cdc <UART_DMAAbortOnError>:
{
 8001cdc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cde:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001ce4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001ce6:	f7ff ff57 	bl	8001b98 <HAL_UART_ErrorCallback>
 8001cea:	bd08      	pop	{r3, pc}

08001cec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001cec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001cee:	f000 fbf1 	bl	80024d4 <vTaskStartScheduler>
  
  return osOK;
}
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	bd08      	pop	{r3, pc}

08001cf6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001cf6:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cf8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001cfc:	8a02      	ldrh	r2, [r0, #16]
{
 8001cfe:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d00:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001d04:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001d06:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001d08:	bf14      	ite	ne
 8001d0a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d0c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d0e:	a803      	add	r0, sp, #12
 8001d10:	9001      	str	r0, [sp, #4]
 8001d12:	9400      	str	r4, [sp, #0]
 8001d14:	4628      	mov	r0, r5
 8001d16:	f000 faff 	bl	8002318 <xTaskCreate>
 8001d1a:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001d1c:	bf0c      	ite	eq
 8001d1e:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001d20:	2000      	movne	r0, #0
}
 8001d22:	b005      	add	sp, #20
 8001d24:	bd30      	pop	{r4, r5, pc}

08001d26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d26:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	bf08      	it	eq
 8001d2c:	2001      	moveq	r0, #1
 8001d2e:	f000 fd1f 	bl	8002770 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d32:	2000      	movs	r0, #0
 8001d34:	bd08      	pop	{r3, pc}

08001d36 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001d36:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d38:	f000 fdb2 	bl	80028a0 <xTaskGetSchedulerState>
 8001d3c:	2801      	cmp	r0, #1
 8001d3e:	d003      	beq.n	8001d48 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001d44:	f000 b906 	b.w	8001f54 <xPortSysTickHandler>
 8001d48:	bd08      	pop	{r3, pc}

08001d4a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d4a:	f100 0308 	add.w	r3, r0, #8
 8001d4e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d54:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d56:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d58:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d5a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d5c:	6003      	str	r3, [r0, #0]
 8001d5e:	4770      	bx	lr

08001d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	6103      	str	r3, [r0, #16]
 8001d64:	4770      	bx	lr

08001d66 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d66:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d68:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d72:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d74:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d76:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d78:	3301      	adds	r3, #1
 8001d7a:	6003      	str	r3, [r0, #0]
 8001d7c:	4770      	bx	lr

08001d7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d7e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d80:	1c53      	adds	r3, r2, #1
{
 8001d82:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001d84:	d10a      	bne.n	8001d9c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d86:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d8c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d8e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d90:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d92:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d94:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d96:	3301      	adds	r3, #1
 8001d98:	6003      	str	r3, [r0, #0]
 8001d9a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9c:	f100 0308 	add.w	r3, r0, #8
 8001da0:	685c      	ldr	r4, [r3, #4]
 8001da2:	6825      	ldr	r5, [r4, #0]
 8001da4:	42aa      	cmp	r2, r5
 8001da6:	d3ef      	bcc.n	8001d88 <vListInsert+0xa>
 8001da8:	4623      	mov	r3, r4
 8001daa:	e7f9      	b.n	8001da0 <vListInsert+0x22>

08001dac <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001dac:	6841      	ldr	r1, [r0, #4]
 8001dae:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001db0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001db2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001db4:	6882      	ldr	r2, [r0, #8]
 8001db6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001dbc:	bf08      	it	eq
 8001dbe:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	3801      	subs	r0, #1
 8001dc8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001dca:	4770      	bx	lr

08001dcc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <prvTaskExitError+0x2c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	d008      	beq.n	8001de6 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd8:	f383 8811 	msr	BASEPRI, r3
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	e7fe      	b.n	8001de4 <prvTaskExitError+0x18>
 8001de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dea:	f383 8811 	msr	BASEPRI, r3
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	e7fe      	b.n	8001df6 <prvTaskExitError+0x2a>
 8001df8:	20000008 	.word	0x20000008

08001dfc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <prvPortStartFirstTask+0x1c>)
 8001dfe:	6800      	ldr	r0, [r0, #0]
 8001e00:	6800      	ldr	r0, [r0, #0]
 8001e02:	f380 8808 	msr	MSP, r0
 8001e06:	b662      	cpsie	i
 8001e08:	b661      	cpsie	f
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	df00      	svc	0
 8001e14:	bf00      	nop
 8001e16:	0000      	.short	0x0000
 8001e18:	e000ed08 	.word	0xe000ed08

08001e1c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001e1c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001e2c <vPortEnableVFP+0x10>
 8001e20:	6801      	ldr	r1, [r0, #0]
 8001e22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e26:	6001      	str	r1, [r0, #0]
 8001e28:	4770      	bx	lr
 8001e2a:	0000      	.short	0x0000
 8001e2c:	e000ed88 	.word	0xe000ed88

08001e30 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e34:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <pxPortInitialiseStack+0x28>)
 8001e3a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e3e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001e42:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e46:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001e4a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001e4e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001e52:	3844      	subs	r0, #68	; 0x44
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	08001dcd 	.word	0x08001dcd
 8001e5c:	00000000 	.word	0x00000000

08001e60 <SVC_Handler>:
	__asm volatile (
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <pxCurrentTCBConst2>)
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	6808      	ldr	r0, [r1, #0]
 8001e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e6a:	f380 8809 	msr	PSP, r0
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f04f 0000 	mov.w	r0, #0
 8001e76:	f380 8811 	msr	BASEPRI, r0
 8001e7a:	4770      	bx	lr
 8001e7c:	f3af 8000 	nop.w

08001e80 <pxCurrentTCBConst2>:
 8001e80:	20003cac 	.word	0x20003cac

08001e84 <vPortEnterCritical>:
 8001e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <vPortEnterCritical+0x3c>)
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001e9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001e9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e9e:	d10d      	bne.n	8001ebc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <vPortEnterCritical+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001ea8:	d008      	beq.n	8001ebc <vPortEnterCritical+0x38>
 8001eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eae:	f383 8811 	msr	BASEPRI, r3
 8001eb2:	f3bf 8f6f 	isb	sy
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	e7fe      	b.n	8001eba <vPortEnterCritical+0x36>
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	e000ed04 	.word	0xe000ed04

08001ec8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001ec8:	4a08      	ldr	r2, [pc, #32]	; (8001eec <vPortExitCritical+0x24>)
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	b943      	cbnz	r3, 8001ee0 <vPortExitCritical+0x18>
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	e7fe      	b.n	8001ede <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001ee4:	b90b      	cbnz	r3, 8001eea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	4770      	bx	lr
 8001eec:	20000008 	.word	0x20000008

08001ef0 <PendSV_Handler>:
	__asm volatile
 8001ef0:	f3ef 8009 	mrs	r0, PSP
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <pxCurrentTCBConst>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	f01e 0f10 	tst.w	lr, #16
 8001f00:	bf08      	it	eq
 8001f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0a:	6010      	str	r0, [r2, #0]
 8001f0c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f14:	f380 8811 	msr	BASEPRI, r0
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f000 fc84 	bl	800282c <vTaskSwitchContext>
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f380 8811 	msr	BASEPRI, r0
 8001f2c:	bc08      	pop	{r3}
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	6808      	ldr	r0, [r1, #0]
 8001f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f36:	f01e 0f10 	tst.w	lr, #16
 8001f3a:	bf08      	it	eq
 8001f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f40:	f380 8809 	msr	PSP, r0
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w

08001f50 <pxCurrentTCBConst>:
 8001f50:	20003cac 	.word	0x20003cac

08001f54 <xPortSysTickHandler>:
{
 8001f54:	b508      	push	{r3, lr}
	__asm volatile
 8001f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5a:	f383 8811 	msr	BASEPRI, r3
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001f66:	f000 faf9 	bl	800255c <xTaskIncrementTick>
 8001f6a:	b118      	cbz	r0, 8001f74 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <xPortSysTickHandler+0x28>)
 8001f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f72:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001f74:	2300      	movs	r3, #0
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	bd08      	pop	{r3, pc}
 8001f7c:	e000ed04 	.word	0xe000ed04

08001f80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <vPortSetupTimerInterrupt+0x1c>)
 8001f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <vPortSetupTimerInterrupt+0x20>)
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <vPortSetupTimerInterrupt+0x24>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	e000e014 	.word	0xe000e014
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <xPortStartScheduler+0xc8>)
 8001faa:	4a32      	ldr	r2, [pc, #200]	; (8002074 <xPortStartScheduler+0xcc>)
{
 8001fac:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	4291      	cmp	r1, r2
 8001fb2:	d108      	bne.n	8001fc6 <xPortStartScheduler+0x1e>
	__asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	e7fe      	b.n	8001fc4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <xPortStartScheduler+0xd0>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d108      	bne.n	8001fe0 <xPortStartScheduler+0x38>
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	e7fe      	b.n	8001fde <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <xPortStartScheduler+0xd4>)
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fec:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ff6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ffa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ffe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <xPortStartScheduler+0xdc>)
 8002002:	2207      	movs	r2, #7
 8002004:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002006:	2100      	movs	r1, #0
 8002008:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800200c:	0600      	lsls	r0, r0, #24
 800200e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002012:	d423      	bmi.n	800205c <xPortStartScheduler+0xb4>
 8002014:	b101      	cbz	r1, 8002018 <xPortStartScheduler+0x70>
 8002016:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800201c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002020:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <xPortStartScheduler+0xd4>)
 8002026:	b2db      	uxtb	r3, r3
 8002028:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <xPortStartScheduler+0xe0>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002032:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800203a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800203c:	f7ff ffa0 	bl	8001f80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <xPortStartScheduler+0xe4>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002046:	f7ff fee9 	bl	8001e1c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <xPortStartScheduler+0xe8>)
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002052:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002054:	f7ff fed2 	bl	8001dfc <prvPortStartFirstTask>
	prvTaskExitError();
 8002058:	f7ff feb8 	bl	8001dcc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800205c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002060:	0052      	lsls	r2, r2, #1
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f88d 2003 	strb.w	r2, [sp, #3]
 8002068:	2101      	movs	r1, #1
 800206a:	4622      	mov	r2, r4
 800206c:	e7cc      	b.n	8002008 <xPortStartScheduler+0x60>
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	410fc271 	.word	0x410fc271
 8002078:	410fc270 	.word	0x410fc270
 800207c:	e000e400 	.word	0xe000e400
 8002080:	2000008c 	.word	0x2000008c
 8002084:	20000090 	.word	0x20000090
 8002088:	e000ed20 	.word	0xe000ed20
 800208c:	20000008 	.word	0x20000008
 8002090:	e000ef34 	.word	0xe000ef34

08002094 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002094:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <prvInsertBlockIntoFreeList+0x40>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4282      	cmp	r2, r0
 800209c:	d318      	bcc.n	80020d0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800209e:	685c      	ldr	r4, [r3, #4]
 80020a0:	1919      	adds	r1, r3, r4
 80020a2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80020a4:	bf01      	itttt	eq
 80020a6:	6841      	ldreq	r1, [r0, #4]
 80020a8:	4618      	moveq	r0, r3
 80020aa:	1909      	addeq	r1, r1, r4
 80020ac:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020ae:	6844      	ldr	r4, [r0, #4]
 80020b0:	1901      	adds	r1, r0, r4
 80020b2:	428a      	cmp	r2, r1
 80020b4:	d107      	bne.n	80020c6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <prvInsertBlockIntoFreeList+0x44>)
 80020b8:	6809      	ldr	r1, [r1, #0]
 80020ba:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020bc:	bf1f      	itttt	ne
 80020be:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020c0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020c2:	1909      	addne	r1, r1, r4
 80020c4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020c6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020c8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020ca:	bf18      	it	ne
 80020cc:	6018      	strne	r0, [r3, #0]
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	4613      	mov	r3, r2
 80020d2:	e7e1      	b.n	8002098 <prvInsertBlockIntoFreeList+0x4>
 80020d4:	20003ca4 	.word	0x20003ca4
 80020d8:	20000094 	.word	0x20000094

080020dc <pvPortMalloc>:
{
 80020dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80020e2:	f000 fa33 	bl	800254c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80020e6:	493e      	ldr	r1, [pc, #248]	; (80021e0 <pvPortMalloc+0x104>)
 80020e8:	4d3e      	ldr	r5, [pc, #248]	; (80021e4 <pvPortMalloc+0x108>)
 80020ea:	680b      	ldr	r3, [r1, #0]
 80020ec:	bb0b      	cbnz	r3, 8002132 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80020ee:	4a3e      	ldr	r2, [pc, #248]	; (80021e8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020f0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020f2:	bf1f      	itttt	ne
 80020f4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020f6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020fa:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80020fe:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002100:	bf14      	ite	ne
 8002102:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002104:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002108:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800210a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800210c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002110:	4e36      	ldr	r6, [pc, #216]	; (80021ec <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002112:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002114:	2000      	movs	r0, #0
 8002116:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002118:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800211a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800211c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800211e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002120:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002124:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002126:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <pvPortMalloc+0x118>)
 800212a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800212c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002130:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002132:	682f      	ldr	r7, [r5, #0]
 8002134:	4227      	tst	r7, r4
 8002136:	d116      	bne.n	8002166 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002138:	2c00      	cmp	r4, #0
 800213a:	d041      	beq.n	80021c0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800213c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002140:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002142:	bf1c      	itt	ne
 8002144:	f023 0307 	bicne.w	r3, r3, #7
 8002148:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800214a:	b163      	cbz	r3, 8002166 <pvPortMalloc+0x8a>
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <pvPortMalloc+0x118>)
 800214e:	6816      	ldr	r6, [r2, #0]
 8002150:	42b3      	cmp	r3, r6
 8002152:	4690      	mov	r8, r2
 8002154:	d807      	bhi.n	8002166 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002156:	4a25      	ldr	r2, [pc, #148]	; (80021ec <pvPortMalloc+0x110>)
 8002158:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800215a:	6868      	ldr	r0, [r5, #4]
 800215c:	4283      	cmp	r3, r0
 800215e:	d804      	bhi.n	800216a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002160:	6809      	ldr	r1, [r1, #0]
 8002162:	428d      	cmp	r5, r1
 8002164:	d107      	bne.n	8002176 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002166:	2400      	movs	r4, #0
 8002168:	e02a      	b.n	80021c0 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800216a:	682c      	ldr	r4, [r5, #0]
 800216c:	2c00      	cmp	r4, #0
 800216e:	d0f7      	beq.n	8002160 <pvPortMalloc+0x84>
 8002170:	462a      	mov	r2, r5
 8002172:	4625      	mov	r5, r4
 8002174:	e7f1      	b.n	800215a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002176:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002178:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800217a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800217c:	1ac2      	subs	r2, r0, r3
 800217e:	2a10      	cmp	r2, #16
 8002180:	d90f      	bls.n	80021a2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002182:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002184:	0741      	lsls	r1, r0, #29
 8002186:	d008      	beq.n	800219a <pvPortMalloc+0xbe>
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	e7fe      	b.n	8002198 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800219a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800219c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800219e:	f7ff ff79 	bl	8002094 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80021a2:	4913      	ldr	r1, [pc, #76]	; (80021f0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80021a4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80021a6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80021a8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021aa:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80021ac:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80021ae:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80021b2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80021b6:	bf38      	it	cc
 80021b8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80021ba:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021bc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021be:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80021c0:	f000 fa5e 	bl	8002680 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021c4:	0763      	lsls	r3, r4, #29
 80021c6:	d008      	beq.n	80021da <pvPortMalloc+0xfe>
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	e7fe      	b.n	80021d8 <pvPortMalloc+0xfc>
}
 80021da:	4620      	mov	r0, r4
 80021dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021e0:	20000094 	.word	0x20000094
 80021e4:	20003c98 	.word	0x20003c98
 80021e8:	20000098 	.word	0x20000098
 80021ec:	20003ca4 	.word	0x20003ca4
 80021f0:	20003ca0 	.word	0x20003ca0
 80021f4:	20003c9c 	.word	0x20003c9c

080021f8 <vPortFree>:
{
 80021f8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80021fa:	4604      	mov	r4, r0
 80021fc:	b370      	cbz	r0, 800225c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021fe:	4a18      	ldr	r2, [pc, #96]	; (8002260 <vPortFree+0x68>)
 8002200:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4213      	tst	r3, r2
 8002208:	d108      	bne.n	800221c <vPortFree+0x24>
 800220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	e7fe      	b.n	800221a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800221c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002220:	b141      	cbz	r1, 8002234 <vPortFree+0x3c>
 8002222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002226:	f383 8811 	msr	BASEPRI, r3
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	e7fe      	b.n	8002232 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002234:	ea23 0302 	bic.w	r3, r3, r2
 8002238:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800223c:	f000 f986 	bl	800254c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <vPortFree+0x6c>)
 8002242:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002246:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002248:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800224c:	440b      	add	r3, r1
 800224e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002250:	f7ff ff20 	bl	8002094 <prvInsertBlockIntoFreeList>
}
 8002254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002258:	f000 ba12 	b.w	8002680 <xTaskResumeAll>
 800225c:	bd10      	pop	{r4, pc}
 800225e:	bf00      	nop
 8002260:	20003c98 	.word	0x20003c98
 8002264:	20003c9c 	.word	0x20003c9c

08002268 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <prvResetNextTaskUnblockTime+0x1c>)
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <prvResetNextTaskUnblockTime+0x20>)
 8002270:	b919      	cbnz	r1, 800227a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800227e:	68d2      	ldr	r2, [r2, #12]
 8002280:	6852      	ldr	r2, [r2, #4]
 8002282:	e7f8      	b.n	8002276 <prvResetNextTaskUnblockTime+0xe>
 8002284:	20003cb0 	.word	0x20003cb0
 8002288:	20003d88 	.word	0x20003d88

0800228c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002290:	4e1b      	ldr	r6, [pc, #108]	; (8002300 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002292:	681d      	ldr	r5, [r3, #0]
{
 8002294:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002296:	6830      	ldr	r0, [r6, #0]
 8002298:	3004      	adds	r0, #4
{
 800229a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800229c:	f7ff fd86 	bl	8001dac <uxListRemove>
 80022a0:	4633      	mov	r3, r6
 80022a2:	b940      	cbnz	r0, 80022b6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80022a4:	6831      	ldr	r1, [r6, #0]
 80022a6:	4e17      	ldr	r6, [pc, #92]	; (8002304 <prvAddCurrentTaskToDelayedList+0x78>)
 80022a8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80022aa:	6832      	ldr	r2, [r6, #0]
 80022ac:	2001      	movs	r0, #1
 80022ae:	4088      	lsls	r0, r1
 80022b0:	ea22 0200 	bic.w	r2, r2, r0
 80022b4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022b6:	1c62      	adds	r2, r4, #1
 80022b8:	d107      	bne.n	80022ca <prvAddCurrentTaskToDelayedList+0x3e>
 80022ba:	b137      	cbz	r7, 80022ca <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <prvAddCurrentTaskToDelayedList+0x7c>)
 80022c0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022c6:	f7ff bd4e 	b.w	8001d66 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022ca:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022cc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80022ce:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022d0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80022d2:	d907      	bls.n	80022e4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <prvAddCurrentTaskToDelayedList+0x80>)
 80022d6:	6810      	ldr	r0, [r2, #0]
 80022d8:	6819      	ldr	r1, [r3, #0]
}
 80022da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022de:	3104      	adds	r1, #4
 80022e0:	f7ff bd4d 	b.w	8001d7e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <prvAddCurrentTaskToDelayedList+0x84>)
 80022e6:	6810      	ldr	r0, [r2, #0]
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	3104      	adds	r1, #4
 80022ec:	f7ff fd47 	bl	8001d7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <prvAddCurrentTaskToDelayedList+0x88>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80022f6:	bf38      	it	cc
 80022f8:	601c      	strcc	r4, [r3, #0]
 80022fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022fc:	20003dd0 	.word	0x20003dd0
 8002300:	20003cac 	.word	0x20003cac
 8002304:	20003d58 	.word	0x20003d58
 8002308:	20003da8 	.word	0x20003da8
 800230c:	20003cb4 	.word	0x20003cb4
 8002310:	20003cb0 	.word	0x20003cb0
 8002314:	20003d88 	.word	0x20003d88

08002318 <xTaskCreate>:
	{
 8002318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002320:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002322:	4650      	mov	r0, sl
	{
 8002324:	460f      	mov	r7, r1
 8002326:	4699      	mov	r9, r3
 8002328:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800232a:	f7ff fed7 	bl	80020dc <pvPortMalloc>
			if( pxStack != NULL )
 800232e:	4605      	mov	r5, r0
 8002330:	2800      	cmp	r0, #0
 8002332:	f000 8096 	beq.w	8002462 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002336:	2054      	movs	r0, #84	; 0x54
 8002338:	f7ff fed0 	bl	80020dc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800233c:	4604      	mov	r4, r0
 800233e:	2800      	cmp	r0, #0
 8002340:	f000 808c 	beq.w	800245c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002344:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002348:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800234a:	4455      	add	r5, sl
 800234c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800234e:	f025 0a07 	bic.w	sl, r5, #7
 8002352:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002356:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002358:	7859      	ldrb	r1, [r3, #1]
 800235a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800235e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002362:	b109      	cbz	r1, 8002368 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002364:	42bb      	cmp	r3, r7
 8002366:	d1f7      	bne.n	8002358 <xTaskCreate+0x40>
 8002368:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800236a:	2d06      	cmp	r5, #6
 800236c:	bf28      	it	cs
 800236e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002370:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002374:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002376:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002378:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800237a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800237c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002380:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002384:	f7ff fcec 	bl	8001d60 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002388:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800238c:	f104 0018 	add.w	r0, r4, #24
 8002390:	f7ff fce6 	bl	8001d60 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002394:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002398:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800239c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800239e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023a2:	464a      	mov	r2, r9
 80023a4:	4641      	mov	r1, r8
 80023a6:	4650      	mov	r0, sl
 80023a8:	f7ff fd42 	bl	8001e30 <pxPortInitialiseStack>
 80023ac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80023ae:	b106      	cbz	r6, 80023b2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023b0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80023b2:	f7ff fd67 	bl	8001e84 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80023b8:	4e32      	ldr	r6, [pc, #200]	; (8002484 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80024b0 <xTaskCreate+0x198>
 80023c0:	3201      	adds	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80023c4:	6835      	ldr	r5, [r6, #0]
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d14e      	bne.n	8002468 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80023ca:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11d      	bne.n	800240e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023d2:	eb08 0005 	add.w	r0, r8, r5
 80023d6:	3514      	adds	r5, #20
 80023d8:	f7ff fcb7 	bl	8001d4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023dc:	2d8c      	cmp	r5, #140	; 0x8c
 80023de:	d1f8      	bne.n	80023d2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80023e0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80024b4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80023e4:	4d28      	ldr	r5, [pc, #160]	; (8002488 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80023e6:	4648      	mov	r0, r9
 80023e8:	f7ff fcaf 	bl	8001d4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023ec:	4628      	mov	r0, r5
 80023ee:	f7ff fcac 	bl	8001d4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023f2:	4826      	ldr	r0, [pc, #152]	; (800248c <xTaskCreate+0x174>)
 80023f4:	f7ff fca9 	bl	8001d4a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80023f8:	4825      	ldr	r0, [pc, #148]	; (8002490 <xTaskCreate+0x178>)
 80023fa:	f7ff fca6 	bl	8001d4a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80023fe:	4825      	ldr	r0, [pc, #148]	; (8002494 <xTaskCreate+0x17c>)
 8002400:	f7ff fca3 	bl	8001d4a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <xTaskCreate+0x180>)
 8002406:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <xTaskCreate+0x184>)
 800240c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002410:	4924      	ldr	r1, [pc, #144]	; (80024a4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002412:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002414:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002416:	3301      	adds	r3, #1
 8002418:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800241a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800241c:	2501      	movs	r5, #1
 800241e:	fa05 f302 	lsl.w	r3, r5, r2
 8002422:	4303      	orrs	r3, r0
 8002424:	2014      	movs	r0, #20
 8002426:	600b      	str	r3, [r1, #0]
 8002428:	fb00 8002 	mla	r0, r0, r2, r8
 800242c:	4639      	mov	r1, r7
 800242e:	f7ff fc9a 	bl	8001d66 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002432:	f7ff fd49 	bl	8001ec8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <xTaskCreate+0x190>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b163      	cbz	r3, 8002456 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800243c:	6833      	ldr	r3, [r6, #0]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002442:	429a      	cmp	r2, r3
 8002444:	d207      	bcs.n	8002456 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <xTaskCreate+0x194>)
 8002448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	f3bf 8f6f 	isb	sy
	}
 8002456:	4628      	mov	r0, r5
 8002458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800245c:	4628      	mov	r0, r5
 800245e:	f7ff fecb 	bl	80021f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002462:	f04f 35ff 	mov.w	r5, #4294967295
 8002466:	e7f6      	b.n	8002456 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <xTaskCreate+0x190>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ce      	bne.n	800240e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002470:	6833      	ldr	r3, [r6, #0]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002476:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002478:	bf98      	it	ls
 800247a:	6034      	strls	r4, [r6, #0]
 800247c:	e7c7      	b.n	800240e <xTaskCreate+0xf6>
 800247e:	bf00      	nop
 8002480:	20003d44 	.word	0x20003d44
 8002484:	20003cac 	.word	0x20003cac
 8002488:	20003d70 	.word	0x20003d70
 800248c:	20003d90 	.word	0x20003d90
 8002490:	20003dbc 	.word	0x20003dbc
 8002494:	20003da8 	.word	0x20003da8
 8002498:	20003cb0 	.word	0x20003cb0
 800249c:	20003cb4 	.word	0x20003cb4
 80024a0:	20003d54 	.word	0x20003d54
 80024a4:	20003d58 	.word	0x20003d58
 80024a8:	20003da4 	.word	0x20003da4
 80024ac:	e000ed04 	.word	0xe000ed04
 80024b0:	20003cb8 	.word	0x20003cb8
 80024b4:	20003d5c 	.word	0x20003d5c

080024b8 <uxTaskPriorityGet>:
	{
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 80024bc:	f7ff fce2 	bl	8001e84 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 80024c0:	b90c      	cbnz	r4, 80024c6 <uxTaskPriorityGet+0xe>
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <uxTaskPriorityGet+0x18>)
 80024c4:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 80024c6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 80024c8:	f7ff fcfe 	bl	8001ec8 <vPortExitCritical>
	}
 80024cc:	4620      	mov	r0, r4
 80024ce:	bd10      	pop	{r4, pc}
 80024d0:	20003cac 	.word	0x20003cac

080024d4 <vTaskStartScheduler>:
{
 80024d4:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <vTaskStartScheduler+0x60>)
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	2400      	movs	r4, #0
 80024dc:	9400      	str	r4, [sp, #0]
 80024de:	4623      	mov	r3, r4
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	4915      	ldr	r1, [pc, #84]	; (8002538 <vTaskStartScheduler+0x64>)
 80024e4:	4815      	ldr	r0, [pc, #84]	; (800253c <vTaskStartScheduler+0x68>)
 80024e6:	f7ff ff17 	bl	8002318 <xTaskCreate>
	if( xReturn == pdPASS )
 80024ea:	2801      	cmp	r0, #1
 80024ec:	d114      	bne.n	8002518 <vTaskStartScheduler+0x44>
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <vTaskStartScheduler+0x6c>)
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <vTaskStartScheduler+0x70>)
 8002508:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <vTaskStartScheduler+0x74>)
 800250c:	601c      	str	r4, [r3, #0]
}
 800250e:	b002      	add	sp, #8
 8002510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002514:	f7ff bd48 	b.w	8001fa8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002518:	3001      	adds	r0, #1
 800251a:	d108      	bne.n	800252e <vTaskStartScheduler+0x5a>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	e7fe      	b.n	800252c <vTaskStartScheduler+0x58>
}
 800252e:	b002      	add	sp, #8
 8002530:	bd10      	pop	{r4, pc}
 8002532:	bf00      	nop
 8002534:	20003d84 	.word	0x20003d84
 8002538:	08003863 	.word	0x08003863
 800253c:	080027b9 	.word	0x080027b9
 8002540:	20003d88 	.word	0x20003d88
 8002544:	20003da4 	.word	0x20003da4
 8002548:	20003dd0 	.word	0x20003dd0

0800254c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <vTaskSuspendAll+0xc>)
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20003d50 	.word	0x20003d50

0800255c <xTaskIncrementTick>:
{
 800255c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002560:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <xTaskIncrementTick+0xf8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d153      	bne.n	8002610 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002568:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <xTaskIncrementTick+0xfc>)
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800256e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002570:	b9bc      	cbnz	r4, 80025a2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <xTaskIncrementTick+0x100>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	b142      	cbz	r2, 800258c <xTaskIncrementTick+0x30>
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	e7fe      	b.n	800258a <xTaskIncrementTick+0x2e>
 800258c:	4a34      	ldr	r2, [pc, #208]	; (8002660 <xTaskIncrementTick+0x104>)
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	6810      	ldr	r0, [r2, #0]
 8002592:	6018      	str	r0, [r3, #0]
 8002594:	6011      	str	r1, [r2, #0]
 8002596:	4a33      	ldr	r2, [pc, #204]	; (8002664 <xTaskIncrementTick+0x108>)
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	f7ff fe63 	bl	8002268 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025a2:	4d31      	ldr	r5, [pc, #196]	; (8002668 <xTaskIncrementTick+0x10c>)
 80025a4:	4f31      	ldr	r7, [pc, #196]	; (800266c <xTaskIncrementTick+0x110>)
 80025a6:	682b      	ldr	r3, [r5, #0]
 80025a8:	429c      	cmp	r4, r3
 80025aa:	f04f 0b00 	mov.w	fp, #0
 80025ae:	d33e      	bcc.n	800262e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800265c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80025b4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800267c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b8:	f8d8 2000 	ldr.w	r2, [r8]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	bb72      	cbnz	r2, 800261e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	602a      	str	r2, [r5, #0]
					break;
 80025c6:	e032      	b.n	800262e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c8:	f106 0a04 	add.w	sl, r6, #4
 80025cc:	4650      	mov	r0, sl
 80025ce:	f7ff fbed 	bl	8001dac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025d2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80025d4:	b119      	cbz	r1, 80025de <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025d6:	f106 0018 	add.w	r0, r6, #24
 80025da:	f7ff fbe7 	bl	8001dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025de:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80025e0:	f8d9 3000 	ldr.w	r3, [r9]
 80025e4:	2201      	movs	r2, #1
 80025e6:	fa02 f100 	lsl.w	r1, r2, r0
 80025ea:	4319      	orrs	r1, r3
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <xTaskIncrementTick+0x114>)
 80025ee:	f8c9 1000 	str.w	r1, [r9]
 80025f2:	f04f 0e14 	mov.w	lr, #20
 80025f6:	4651      	mov	r1, sl
 80025f8:	fb0e 3000 	mla	r0, lr, r0, r3
 80025fc:	f7ff fbb3 	bl	8001d66 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002604:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002606:	4291      	cmp	r1, r2
 8002608:	bf28      	it	cs
 800260a:	f04f 0b01 	movcs.w	fp, #1
 800260e:	e7d3      	b.n	80025b8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002610:	4a18      	ldr	r2, [pc, #96]	; (8002674 <xTaskIncrementTick+0x118>)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002618:	f04f 0b00 	mov.w	fp, #0
 800261c:	e011      	b.n	8002642 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800261e:	f8d8 2000 	ldr.w	r2, [r8]
 8002622:	68d2      	ldr	r2, [r2, #12]
 8002624:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002626:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002628:	428c      	cmp	r4, r1
 800262a:	d2cd      	bcs.n	80025c8 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800262c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <xTaskIncrementTick+0x114>)
 8002632:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002634:	2214      	movs	r2, #20
 8002636:	434a      	muls	r2, r1
 8002638:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800263a:	2a02      	cmp	r2, #2
 800263c:	bf28      	it	cs
 800263e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <xTaskIncrementTick+0x11c>)
 8002644:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002646:	2a00      	cmp	r2, #0
 8002648:	bf18      	it	ne
 800264a:	f04f 0b01 	movne.w	fp, #1
}
 800264e:	4658      	mov	r0, fp
 8002650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002654:	20003d50 	.word	0x20003d50
 8002658:	20003dd0 	.word	0x20003dd0
 800265c:	20003cb0 	.word	0x20003cb0
 8002660:	20003cb4 	.word	0x20003cb4
 8002664:	20003d8c 	.word	0x20003d8c
 8002668:	20003d88 	.word	0x20003d88
 800266c:	20003cac 	.word	0x20003cac
 8002670:	20003cb8 	.word	0x20003cb8
 8002674:	20003d4c 	.word	0x20003d4c
 8002678:	20003dd4 	.word	0x20003dd4
 800267c:	20003d58 	.word	0x20003d58

08002680 <xTaskResumeAll>:
{
 8002680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002684:	4c31      	ldr	r4, [pc, #196]	; (800274c <xTaskResumeAll+0xcc>)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	b943      	cbnz	r3, 800269c <xTaskResumeAll+0x1c>
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	e7fe      	b.n	800269a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800269c:	f7ff fbf2 	bl	8001e84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026a6:	6824      	ldr	r4, [r4, #0]
 80026a8:	b12c      	cbz	r4, 80026b6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80026aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80026ac:	f7ff fc0c 	bl	8001ec8 <vPortExitCritical>
}
 80026b0:	4620      	mov	r0, r4
 80026b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <xTaskResumeAll+0xd0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f5      	beq.n	80026aa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026be:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002768 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80026c2:	4f24      	ldr	r7, [pc, #144]	; (8002754 <xTaskResumeAll+0xd4>)
 80026c4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800276c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026c8:	f8d9 3000 	ldr.w	r3, [r9]
 80026cc:	b9e3      	cbnz	r3, 8002708 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80026ce:	b10c      	cbz	r4, 80026d4 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80026d0:	f7ff fdca 	bl	8002268 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026d4:	4d20      	ldr	r5, [pc, #128]	; (8002758 <xTaskResumeAll+0xd8>)
 80026d6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026d8:	b144      	cbz	r4, 80026ec <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80026da:	4e20      	ldr	r6, [pc, #128]	; (800275c <xTaskResumeAll+0xdc>)
 80026dc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80026de:	f7ff ff3d 	bl	800255c <xTaskIncrementTick>
 80026e2:	b100      	cbz	r0, 80026e6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80026e4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80026e6:	3c01      	subs	r4, #1
 80026e8:	d1f9      	bne.n	80026de <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80026ea:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <xTaskResumeAll+0xdc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0da      	beq.n	80026aa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <xTaskResumeAll+0xe0>)
 80026f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002704:	2401      	movs	r4, #1
 8002706:	e7d1      	b.n	80026ac <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002708:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800270c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800270e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002710:	f104 0018 	add.w	r0, r4, #24
 8002714:	f7ff fb4a 	bl	8001dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002718:	4630      	mov	r0, r6
 800271a:	f7ff fb47 	bl	8001dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800271e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	2501      	movs	r5, #1
 8002724:	fa05 f302 	lsl.w	r3, r5, r2
 8002728:	2014      	movs	r0, #20
 800272a:	430b      	orrs	r3, r1
 800272c:	fb00 8002 	mla	r0, r0, r2, r8
 8002730:	4631      	mov	r1, r6
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	f7ff fb17 	bl	8001d66 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <xTaskResumeAll+0xe4>)
 800273a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002742:	bf24      	itt	cs
 8002744:	4b05      	ldrcs	r3, [pc, #20]	; (800275c <xTaskResumeAll+0xdc>)
 8002746:	601d      	strcs	r5, [r3, #0]
 8002748:	e7be      	b.n	80026c8 <xTaskResumeAll+0x48>
 800274a:	bf00      	nop
 800274c:	20003d50 	.word	0x20003d50
 8002750:	20003d44 	.word	0x20003d44
 8002754:	20003d58 	.word	0x20003d58
 8002758:	20003d4c 	.word	0x20003d4c
 800275c:	20003dd4 	.word	0x20003dd4
 8002760:	e000ed04 	.word	0xe000ed04
 8002764:	20003cac 	.word	0x20003cac
 8002768:	20003d90 	.word	0x20003d90
 800276c:	20003cb8 	.word	0x20003cb8

08002770 <vTaskDelay>:
	{
 8002770:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002772:	b940      	cbnz	r0, 8002786 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <vTaskDelay+0x40>)
 8002776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <vTaskDelay+0x44>)
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	b141      	cbz	r1, 800279e <vTaskDelay+0x2e>
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	e7fe      	b.n	800279c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800279e:	f7ff fed5 	bl	800254c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027a2:	f7ff fd73 	bl	800228c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80027a6:	f7ff ff6b 	bl	8002680 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d0e2      	beq.n	8002774 <vTaskDelay+0x4>
 80027ae:	bd08      	pop	{r3, pc}
 80027b0:	e000ed04 	.word	0xe000ed04
 80027b4:	20003d50 	.word	0x20003d50

080027b8 <prvIdleTask>:
{
 80027b8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80027ba:	4e17      	ldr	r6, [pc, #92]	; (8002818 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027bc:	4c17      	ldr	r4, [pc, #92]	; (800281c <prvIdleTask+0x64>)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	b963      	cbnz	r3, 80027dc <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <prvIdleTask+0x68>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d9f8      	bls.n	80027bc <prvIdleTask+0x4>
				taskYIELD();
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <prvIdleTask+0x6c>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	e7ef      	b.n	80027bc <prvIdleTask+0x4>
			vTaskSuspendAll();
 80027dc:	f7ff feb6 	bl	800254c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80027e0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80027e2:	f7ff ff4d 	bl	8002680 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	d0e9      	beq.n	80027be <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80027ea:	f7ff fb4b 	bl	8001e84 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80027ee:	68f3      	ldr	r3, [r6, #12]
 80027f0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027f2:	1d28      	adds	r0, r5, #4
 80027f4:	f7ff fada 	bl	8001dac <uxListRemove>
					--uxCurrentNumberOfTasks;
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <prvIdleTask+0x70>)
 80027fa:	6813      	ldr	r3, [r2, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8002806:	f7ff fb5f 	bl	8001ec8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800280a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800280c:	f7ff fcf4 	bl	80021f8 <vPortFree>
			vPortFree( pxTCB );
 8002810:	4628      	mov	r0, r5
 8002812:	f7ff fcf1 	bl	80021f8 <vPortFree>
 8002816:	e7d2      	b.n	80027be <prvIdleTask+0x6>
 8002818:	20003dbc 	.word	0x20003dbc
 800281c:	20003d48 	.word	0x20003d48
 8002820:	20003cb8 	.word	0x20003cb8
 8002824:	e000ed04 	.word	0xe000ed04
 8002828:	20003d44 	.word	0x20003d44

0800282c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <vTaskSwitchContext+0x60>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <vTaskSwitchContext+0x64>)
{
 8002832:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002834:	b112      	cbz	r2, 800283c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002836:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800283c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <vTaskSwitchContext+0x68>)
 8002840:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f1c3 031f 	rsb	r3, r3, #31
 800284c:	2214      	movs	r2, #20
 800284e:	4912      	ldr	r1, [pc, #72]	; (8002898 <vTaskSwitchContext+0x6c>)
 8002850:	435a      	muls	r2, r3
 8002852:	1888      	adds	r0, r1, r2
 8002854:	588c      	ldr	r4, [r1, r2]
 8002856:	b944      	cbnz	r4, 800286a <vTaskSwitchContext+0x3e>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	e7fe      	b.n	8002868 <vTaskSwitchContext+0x3c>
 800286a:	6844      	ldr	r4, [r0, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	6864      	ldr	r4, [r4, #4]
 8002870:	6044      	str	r4, [r0, #4]
 8002872:	440a      	add	r2, r1
 8002874:	4294      	cmp	r4, r2
 8002876:	bf04      	itt	eq
 8002878:	6862      	ldreq	r2, [r4, #4]
 800287a:	6042      	streq	r2, [r0, #4]
 800287c:	2214      	movs	r2, #20
 800287e:	fb02 1303 	mla	r3, r2, r3, r1
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <vTaskSwitchContext+0x70>)
 8002888:	e7d6      	b.n	8002838 <vTaskSwitchContext+0xc>
 800288a:	bf00      	nop
 800288c:	20003d50 	.word	0x20003d50
 8002890:	20003dd4 	.word	0x20003dd4
 8002894:	20003d58 	.word	0x20003d58
 8002898:	20003cb8 	.word	0x20003cb8
 800289c:	20003cac 	.word	0x20003cac

080028a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <xTaskGetSchedulerState+0x18>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b133      	cbz	r3, 80028b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <xTaskGetSchedulerState+0x1c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80028ac:	bf0c      	ite	eq
 80028ae:	2002      	moveq	r0, #2
 80028b0:	2000      	movne	r0, #0
 80028b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80028b4:	2001      	movs	r0, #1
	}
 80028b6:	4770      	bx	lr
 80028b8:	20003da4 	.word	0x20003da4
 80028bc:	20003d50 	.word	0x20003d50

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028c6:	e003      	b.n	80028d0 <LoopCopyDataInit>

080028c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028ce:	3104      	adds	r1, #4

080028d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028d0:	480b      	ldr	r0, [pc, #44]	; (8002900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028d8:	d3f6      	bcc.n	80028c8 <CopyDataInit>
  ldr  r2, =_sbss
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028dc:	e002      	b.n	80028e4 <LoopFillZerobss>

080028de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028e0:	f842 3b04 	str.w	r3, [r2], #4

080028e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028e8:	d3f9      	bcc.n	80028de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028ea:	f7fe f8d9 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ee:	f000 f811 	bl	8002914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7fd fed3 	bl	800069c <main>
  bx  lr    
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028fc:	08003910 	.word	0x08003910
  ldr  r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002904:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002908:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800290c:	20003f3c 	.word	0x20003f3c

08002910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC_IRQHandler>
	...

08002914 <__libc_init_array>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	4e0d      	ldr	r6, [pc, #52]	; (800294c <__libc_init_array+0x38>)
 8002918:	4c0d      	ldr	r4, [pc, #52]	; (8002950 <__libc_init_array+0x3c>)
 800291a:	1ba4      	subs	r4, r4, r6
 800291c:	10a4      	asrs	r4, r4, #2
 800291e:	2500      	movs	r5, #0
 8002920:	42a5      	cmp	r5, r4
 8002922:	d109      	bne.n	8002938 <__libc_init_array+0x24>
 8002924:	4e0b      	ldr	r6, [pc, #44]	; (8002954 <__libc_init_array+0x40>)
 8002926:	4c0c      	ldr	r4, [pc, #48]	; (8002958 <__libc_init_array+0x44>)
 8002928:	f000 ff56 	bl	80037d8 <_init>
 800292c:	1ba4      	subs	r4, r4, r6
 800292e:	10a4      	asrs	r4, r4, #2
 8002930:	2500      	movs	r5, #0
 8002932:	42a5      	cmp	r5, r4
 8002934:	d105      	bne.n	8002942 <__libc_init_array+0x2e>
 8002936:	bd70      	pop	{r4, r5, r6, pc}
 8002938:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800293c:	4798      	blx	r3
 800293e:	3501      	adds	r5, #1
 8002940:	e7ee      	b.n	8002920 <__libc_init_array+0xc>
 8002942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002946:	4798      	blx	r3
 8002948:	3501      	adds	r5, #1
 800294a:	e7f2      	b.n	8002932 <__libc_init_array+0x1e>
 800294c:	08003908 	.word	0x08003908
 8002950:	08003908 	.word	0x08003908
 8002954:	08003908 	.word	0x08003908
 8002958:	0800390c 	.word	0x0800390c

0800295c <iprintf>:
 800295c:	b40f      	push	{r0, r1, r2, r3}
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <iprintf+0x2c>)
 8002960:	b513      	push	{r0, r1, r4, lr}
 8002962:	681c      	ldr	r4, [r3, #0]
 8002964:	b124      	cbz	r4, 8002970 <iprintf+0x14>
 8002966:	69a3      	ldr	r3, [r4, #24]
 8002968:	b913      	cbnz	r3, 8002970 <iprintf+0x14>
 800296a:	4620      	mov	r0, r4
 800296c:	f000 f84e 	bl	8002a0c <__sinit>
 8002970:	ab05      	add	r3, sp, #20
 8002972:	9a04      	ldr	r2, [sp, #16]
 8002974:	68a1      	ldr	r1, [r4, #8]
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	4620      	mov	r0, r4
 800297a:	f000 f961 	bl	8002c40 <_vfiprintf_r>
 800297e:	b002      	add	sp, #8
 8002980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002984:	b004      	add	sp, #16
 8002986:	4770      	bx	lr
 8002988:	2000000c 	.word	0x2000000c

0800298c <_cleanup_r>:
 800298c:	4901      	ldr	r1, [pc, #4]	; (8002994 <_cleanup_r+0x8>)
 800298e:	f000 b8a9 	b.w	8002ae4 <_fwalk_reent>
 8002992:	bf00      	nop
 8002994:	08003515 	.word	0x08003515

08002998 <std.isra.0>:
 8002998:	2300      	movs	r3, #0
 800299a:	b510      	push	{r4, lr}
 800299c:	4604      	mov	r4, r0
 800299e:	6003      	str	r3, [r0, #0]
 80029a0:	6043      	str	r3, [r0, #4]
 80029a2:	6083      	str	r3, [r0, #8]
 80029a4:	8181      	strh	r1, [r0, #12]
 80029a6:	6643      	str	r3, [r0, #100]	; 0x64
 80029a8:	81c2      	strh	r2, [r0, #14]
 80029aa:	6103      	str	r3, [r0, #16]
 80029ac:	6143      	str	r3, [r0, #20]
 80029ae:	6183      	str	r3, [r0, #24]
 80029b0:	4619      	mov	r1, r3
 80029b2:	2208      	movs	r2, #8
 80029b4:	305c      	adds	r0, #92	; 0x5c
 80029b6:	f000 f8b3 	bl	8002b20 <memset>
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <std.isra.0+0x38>)
 80029bc:	6263      	str	r3, [r4, #36]	; 0x24
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <std.isra.0+0x3c>)
 80029c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <std.isra.0+0x40>)
 80029c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <std.isra.0+0x44>)
 80029c8:	6224      	str	r4, [r4, #32]
 80029ca:	6323      	str	r3, [r4, #48]	; 0x30
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	bf00      	nop
 80029d0:	080031b9 	.word	0x080031b9
 80029d4:	080031db 	.word	0x080031db
 80029d8:	08003213 	.word	0x08003213
 80029dc:	08003237 	.word	0x08003237

080029e0 <__sfmoreglue>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	1e4a      	subs	r2, r1, #1
 80029e4:	2568      	movs	r5, #104	; 0x68
 80029e6:	4355      	muls	r5, r2
 80029e8:	460e      	mov	r6, r1
 80029ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029ee:	f000 f89f 	bl	8002b30 <_malloc_r>
 80029f2:	4604      	mov	r4, r0
 80029f4:	b140      	cbz	r0, 8002a08 <__sfmoreglue+0x28>
 80029f6:	2100      	movs	r1, #0
 80029f8:	e880 0042 	stmia.w	r0, {r1, r6}
 80029fc:	300c      	adds	r0, #12
 80029fe:	60a0      	str	r0, [r4, #8]
 8002a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a04:	f000 f88c 	bl	8002b20 <memset>
 8002a08:	4620      	mov	r0, r4
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}

08002a0c <__sinit>:
 8002a0c:	6983      	ldr	r3, [r0, #24]
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	4604      	mov	r4, r0
 8002a12:	bb33      	cbnz	r3, 8002a62 <__sinit+0x56>
 8002a14:	6483      	str	r3, [r0, #72]	; 0x48
 8002a16:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002a18:	6503      	str	r3, [r0, #80]	; 0x50
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <__sinit+0x58>)
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <__sinit+0x5c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6282      	str	r2, [r0, #40]	; 0x28
 8002a22:	4298      	cmp	r0, r3
 8002a24:	bf04      	itt	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	6183      	streq	r3, [r0, #24]
 8002a2a:	f000 f81f 	bl	8002a6c <__sfp>
 8002a2e:	6060      	str	r0, [r4, #4]
 8002a30:	4620      	mov	r0, r4
 8002a32:	f000 f81b 	bl	8002a6c <__sfp>
 8002a36:	60a0      	str	r0, [r4, #8]
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f000 f817 	bl	8002a6c <__sfp>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60e0      	str	r0, [r4, #12]
 8002a42:	2104      	movs	r1, #4
 8002a44:	6860      	ldr	r0, [r4, #4]
 8002a46:	f7ff ffa7 	bl	8002998 <std.isra.0>
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	2109      	movs	r1, #9
 8002a4e:	68a0      	ldr	r0, [r4, #8]
 8002a50:	f7ff ffa2 	bl	8002998 <std.isra.0>
 8002a54:	2202      	movs	r2, #2
 8002a56:	2112      	movs	r1, #18
 8002a58:	68e0      	ldr	r0, [r4, #12]
 8002a5a:	f7ff ff9d 	bl	8002998 <std.isra.0>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61a3      	str	r3, [r4, #24]
 8002a62:	bd10      	pop	{r4, pc}
 8002a64:	080038c8 	.word	0x080038c8
 8002a68:	0800298d 	.word	0x0800298d

08002a6c <__sfp>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <__sfp+0x74>)
 8002a70:	681e      	ldr	r6, [r3, #0]
 8002a72:	69b3      	ldr	r3, [r6, #24]
 8002a74:	4607      	mov	r7, r0
 8002a76:	b913      	cbnz	r3, 8002a7e <__sfp+0x12>
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f7ff ffc7 	bl	8002a0c <__sinit>
 8002a7e:	3648      	adds	r6, #72	; 0x48
 8002a80:	68b4      	ldr	r4, [r6, #8]
 8002a82:	6873      	ldr	r3, [r6, #4]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	d503      	bpl.n	8002a90 <__sfp+0x24>
 8002a88:	6833      	ldr	r3, [r6, #0]
 8002a8a:	b133      	cbz	r3, 8002a9a <__sfp+0x2e>
 8002a8c:	6836      	ldr	r6, [r6, #0]
 8002a8e:	e7f7      	b.n	8002a80 <__sfp+0x14>
 8002a90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a94:	b16d      	cbz	r5, 8002ab2 <__sfp+0x46>
 8002a96:	3468      	adds	r4, #104	; 0x68
 8002a98:	e7f4      	b.n	8002a84 <__sfp+0x18>
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	f7ff ff9f 	bl	80029e0 <__sfmoreglue>
 8002aa2:	6030      	str	r0, [r6, #0]
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d1f1      	bne.n	8002a8c <__sfp+0x20>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4604      	mov	r4, r0
 8002aae:	4620      	mov	r0, r4
 8002ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab6:	81e3      	strh	r3, [r4, #14]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	81a3      	strh	r3, [r4, #12]
 8002abc:	6665      	str	r5, [r4, #100]	; 0x64
 8002abe:	6025      	str	r5, [r4, #0]
 8002ac0:	60a5      	str	r5, [r4, #8]
 8002ac2:	6065      	str	r5, [r4, #4]
 8002ac4:	6125      	str	r5, [r4, #16]
 8002ac6:	6165      	str	r5, [r4, #20]
 8002ac8:	61a5      	str	r5, [r4, #24]
 8002aca:	2208      	movs	r2, #8
 8002acc:	4629      	mov	r1, r5
 8002ace:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ad2:	f000 f825 	bl	8002b20 <memset>
 8002ad6:	6365      	str	r5, [r4, #52]	; 0x34
 8002ad8:	63a5      	str	r5, [r4, #56]	; 0x38
 8002ada:	64a5      	str	r5, [r4, #72]	; 0x48
 8002adc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002ade:	e7e6      	b.n	8002aae <__sfp+0x42>
 8002ae0:	080038c8 	.word	0x080038c8

08002ae4 <_fwalk_reent>:
 8002ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae8:	4680      	mov	r8, r0
 8002aea:	4689      	mov	r9, r1
 8002aec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002af0:	2600      	movs	r6, #0
 8002af2:	b914      	cbnz	r4, 8002afa <_fwalk_reent+0x16>
 8002af4:	4630      	mov	r0, r6
 8002af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002afa:	68a5      	ldr	r5, [r4, #8]
 8002afc:	6867      	ldr	r7, [r4, #4]
 8002afe:	3f01      	subs	r7, #1
 8002b00:	d501      	bpl.n	8002b06 <_fwalk_reent+0x22>
 8002b02:	6824      	ldr	r4, [r4, #0]
 8002b04:	e7f5      	b.n	8002af2 <_fwalk_reent+0xe>
 8002b06:	89ab      	ldrh	r3, [r5, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d907      	bls.n	8002b1c <_fwalk_reent+0x38>
 8002b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b10:	3301      	adds	r3, #1
 8002b12:	d003      	beq.n	8002b1c <_fwalk_reent+0x38>
 8002b14:	4629      	mov	r1, r5
 8002b16:	4640      	mov	r0, r8
 8002b18:	47c8      	blx	r9
 8002b1a:	4306      	orrs	r6, r0
 8002b1c:	3568      	adds	r5, #104	; 0x68
 8002b1e:	e7ee      	b.n	8002afe <_fwalk_reent+0x1a>

08002b20 <memset>:
 8002b20:	4402      	add	r2, r0
 8002b22:	4603      	mov	r3, r0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d100      	bne.n	8002b2a <memset+0xa>
 8002b28:	4770      	bx	lr
 8002b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2e:	e7f9      	b.n	8002b24 <memset+0x4>

08002b30 <_malloc_r>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	1ccd      	adds	r5, r1, #3
 8002b34:	f025 0503 	bic.w	r5, r5, #3
 8002b38:	3508      	adds	r5, #8
 8002b3a:	2d0c      	cmp	r5, #12
 8002b3c:	bf38      	it	cc
 8002b3e:	250c      	movcc	r5, #12
 8002b40:	2d00      	cmp	r5, #0
 8002b42:	4606      	mov	r6, r0
 8002b44:	db01      	blt.n	8002b4a <_malloc_r+0x1a>
 8002b46:	42a9      	cmp	r1, r5
 8002b48:	d903      	bls.n	8002b52 <_malloc_r+0x22>
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	6033      	str	r3, [r6, #0]
 8002b4e:	2000      	movs	r0, #0
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
 8002b52:	f000 fd7f 	bl	8003654 <__malloc_lock>
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <_malloc_r+0xb4>)
 8002b58:	6814      	ldr	r4, [r2, #0]
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	b991      	cbnz	r1, 8002b84 <_malloc_r+0x54>
 8002b5e:	4c22      	ldr	r4, [pc, #136]	; (8002be8 <_malloc_r+0xb8>)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	b91b      	cbnz	r3, 8002b6c <_malloc_r+0x3c>
 8002b64:	4630      	mov	r0, r6
 8002b66:	f000 fb17 	bl	8003198 <_sbrk_r>
 8002b6a:	6020      	str	r0, [r4, #0]
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f000 fb12 	bl	8003198 <_sbrk_r>
 8002b74:	1c43      	adds	r3, r0, #1
 8002b76:	d126      	bne.n	8002bc6 <_malloc_r+0x96>
 8002b78:	230c      	movs	r3, #12
 8002b7a:	6033      	str	r3, [r6, #0]
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f000 fd6a 	bl	8003656 <__malloc_unlock>
 8002b82:	e7e4      	b.n	8002b4e <_malloc_r+0x1e>
 8002b84:	680b      	ldr	r3, [r1, #0]
 8002b86:	1b5b      	subs	r3, r3, r5
 8002b88:	d41a      	bmi.n	8002bc0 <_malloc_r+0x90>
 8002b8a:	2b0b      	cmp	r3, #11
 8002b8c:	d90f      	bls.n	8002bae <_malloc_r+0x7e>
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	50cd      	str	r5, [r1, r3]
 8002b92:	18cc      	adds	r4, r1, r3
 8002b94:	4630      	mov	r0, r6
 8002b96:	f000 fd5e 	bl	8003656 <__malloc_unlock>
 8002b9a:	f104 000b 	add.w	r0, r4, #11
 8002b9e:	1d23      	adds	r3, r4, #4
 8002ba0:	f020 0007 	bic.w	r0, r0, #7
 8002ba4:	1ac3      	subs	r3, r0, r3
 8002ba6:	d01b      	beq.n	8002be0 <_malloc_r+0xb0>
 8002ba8:	425a      	negs	r2, r3
 8002baa:	50e2      	str	r2, [r4, r3]
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	428c      	cmp	r4, r1
 8002bb0:	bf0d      	iteet	eq
 8002bb2:	6863      	ldreq	r3, [r4, #4]
 8002bb4:	684b      	ldrne	r3, [r1, #4]
 8002bb6:	6063      	strne	r3, [r4, #4]
 8002bb8:	6013      	streq	r3, [r2, #0]
 8002bba:	bf18      	it	ne
 8002bbc:	460c      	movne	r4, r1
 8002bbe:	e7e9      	b.n	8002b94 <_malloc_r+0x64>
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	6849      	ldr	r1, [r1, #4]
 8002bc4:	e7ca      	b.n	8002b5c <_malloc_r+0x2c>
 8002bc6:	1cc4      	adds	r4, r0, #3
 8002bc8:	f024 0403 	bic.w	r4, r4, #3
 8002bcc:	42a0      	cmp	r0, r4
 8002bce:	d005      	beq.n	8002bdc <_malloc_r+0xac>
 8002bd0:	1a21      	subs	r1, r4, r0
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	f000 fae0 	bl	8003198 <_sbrk_r>
 8002bd8:	3001      	adds	r0, #1
 8002bda:	d0cd      	beq.n	8002b78 <_malloc_r+0x48>
 8002bdc:	6025      	str	r5, [r4, #0]
 8002bde:	e7d9      	b.n	8002b94 <_malloc_r+0x64>
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	bf00      	nop
 8002be4:	20003dd8 	.word	0x20003dd8
 8002be8:	20003ddc 	.word	0x20003ddc

08002bec <__sfputc_r>:
 8002bec:	6893      	ldr	r3, [r2, #8]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	b410      	push	{r4}
 8002bf4:	6093      	str	r3, [r2, #8]
 8002bf6:	da09      	bge.n	8002c0c <__sfputc_r+0x20>
 8002bf8:	6994      	ldr	r4, [r2, #24]
 8002bfa:	42a3      	cmp	r3, r4
 8002bfc:	db02      	blt.n	8002c04 <__sfputc_r+0x18>
 8002bfe:	b2cb      	uxtb	r3, r1
 8002c00:	2b0a      	cmp	r3, #10
 8002c02:	d103      	bne.n	8002c0c <__sfputc_r+0x20>
 8002c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c08:	f000 bb1a 	b.w	8003240 <__swbuf_r>
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	1c58      	adds	r0, r3, #1
 8002c10:	6010      	str	r0, [r2, #0]
 8002c12:	7019      	strb	r1, [r3, #0]
 8002c14:	b2c8      	uxtb	r0, r1
 8002c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <__sfputs_r>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	4606      	mov	r6, r0
 8002c20:	460f      	mov	r7, r1
 8002c22:	4614      	mov	r4, r2
 8002c24:	18d5      	adds	r5, r2, r3
 8002c26:	42ac      	cmp	r4, r5
 8002c28:	d101      	bne.n	8002c2e <__sfputs_r+0x12>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e007      	b.n	8002c3e <__sfputs_r+0x22>
 8002c2e:	463a      	mov	r2, r7
 8002c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c34:	4630      	mov	r0, r6
 8002c36:	f7ff ffd9 	bl	8002bec <__sfputc_r>
 8002c3a:	1c43      	adds	r3, r0, #1
 8002c3c:	d1f3      	bne.n	8002c26 <__sfputs_r+0xa>
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c40 <_vfiprintf_r>:
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	b09d      	sub	sp, #116	; 0x74
 8002c46:	460c      	mov	r4, r1
 8002c48:	4617      	mov	r7, r2
 8002c4a:	9303      	str	r3, [sp, #12]
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	b118      	cbz	r0, 8002c58 <_vfiprintf_r+0x18>
 8002c50:	6983      	ldr	r3, [r0, #24]
 8002c52:	b90b      	cbnz	r3, 8002c58 <_vfiprintf_r+0x18>
 8002c54:	f7ff feda 	bl	8002a0c <__sinit>
 8002c58:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <_vfiprintf_r+0x20c>)
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	d157      	bne.n	8002d0e <_vfiprintf_r+0xce>
 8002c5e:	6874      	ldr	r4, [r6, #4]
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	0718      	lsls	r0, r3, #28
 8002c64:	d55d      	bpl.n	8002d22 <_vfiprintf_r+0xe2>
 8002c66:	6923      	ldr	r3, [r4, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05a      	beq.n	8002d22 <_vfiprintf_r+0xe2>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c70:	2320      	movs	r3, #32
 8002c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c76:	2330      	movs	r3, #48	; 0x30
 8002c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c7c:	f04f 0b01 	mov.w	fp, #1
 8002c80:	46b8      	mov	r8, r7
 8002c82:	4645      	mov	r5, r8
 8002c84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d155      	bne.n	8002d38 <_vfiprintf_r+0xf8>
 8002c8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002c90:	d00b      	beq.n	8002caa <_vfiprintf_r+0x6a>
 8002c92:	4653      	mov	r3, sl
 8002c94:	463a      	mov	r2, r7
 8002c96:	4621      	mov	r1, r4
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f7ff ffbf 	bl	8002c1c <__sfputs_r>
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	f000 80c4 	beq.w	8002e2c <_vfiprintf_r+0x1ec>
 8002ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ca6:	4453      	add	r3, sl
 8002ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8002caa:	f898 3000 	ldrb.w	r3, [r8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80bc 	beq.w	8002e2c <_vfiprintf_r+0x1ec>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	9304      	str	r3, [sp, #16]
 8002cbc:	9307      	str	r3, [sp, #28]
 8002cbe:	9205      	str	r2, [sp, #20]
 8002cc0:	9306      	str	r3, [sp, #24]
 8002cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002cc8:	2205      	movs	r2, #5
 8002cca:	7829      	ldrb	r1, [r5, #0]
 8002ccc:	4860      	ldr	r0, [pc, #384]	; (8002e50 <_vfiprintf_r+0x210>)
 8002cce:	f7fd fa7f 	bl	80001d0 <memchr>
 8002cd2:	f105 0801 	add.w	r8, r5, #1
 8002cd6:	9b04      	ldr	r3, [sp, #16]
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d131      	bne.n	8002d40 <_vfiprintf_r+0x100>
 8002cdc:	06d9      	lsls	r1, r3, #27
 8002cde:	bf44      	itt	mi
 8002ce0:	2220      	movmi	r2, #32
 8002ce2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ce6:	071a      	lsls	r2, r3, #28
 8002ce8:	bf44      	itt	mi
 8002cea:	222b      	movmi	r2, #43	; 0x2b
 8002cec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cf0:	782a      	ldrb	r2, [r5, #0]
 8002cf2:	2a2a      	cmp	r2, #42	; 0x2a
 8002cf4:	d02c      	beq.n	8002d50 <_vfiprintf_r+0x110>
 8002cf6:	9a07      	ldr	r2, [sp, #28]
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	200a      	movs	r0, #10
 8002cfc:	46a8      	mov	r8, r5
 8002cfe:	3501      	adds	r5, #1
 8002d00:	f898 3000 	ldrb.w	r3, [r8]
 8002d04:	3b30      	subs	r3, #48	; 0x30
 8002d06:	2b09      	cmp	r3, #9
 8002d08:	d96d      	bls.n	8002de6 <_vfiprintf_r+0x1a6>
 8002d0a:	b371      	cbz	r1, 8002d6a <_vfiprintf_r+0x12a>
 8002d0c:	e026      	b.n	8002d5c <_vfiprintf_r+0x11c>
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <_vfiprintf_r+0x214>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d101      	bne.n	8002d18 <_vfiprintf_r+0xd8>
 8002d14:	68b4      	ldr	r4, [r6, #8]
 8002d16:	e7a3      	b.n	8002c60 <_vfiprintf_r+0x20>
 8002d18:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <_vfiprintf_r+0x218>)
 8002d1a:	429c      	cmp	r4, r3
 8002d1c:	bf08      	it	eq
 8002d1e:	68f4      	ldreq	r4, [r6, #12]
 8002d20:	e79e      	b.n	8002c60 <_vfiprintf_r+0x20>
 8002d22:	4621      	mov	r1, r4
 8002d24:	4630      	mov	r0, r6
 8002d26:	f000 faef 	bl	8003308 <__swsetup_r>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d09e      	beq.n	8002c6c <_vfiprintf_r+0x2c>
 8002d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d32:	b01d      	add	sp, #116	; 0x74
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d38:	2b25      	cmp	r3, #37	; 0x25
 8002d3a:	d0a7      	beq.n	8002c8c <_vfiprintf_r+0x4c>
 8002d3c:	46a8      	mov	r8, r5
 8002d3e:	e7a0      	b.n	8002c82 <_vfiprintf_r+0x42>
 8002d40:	4a43      	ldr	r2, [pc, #268]	; (8002e50 <_vfiprintf_r+0x210>)
 8002d42:	1a80      	subs	r0, r0, r2
 8002d44:	fa0b f000 	lsl.w	r0, fp, r0
 8002d48:	4318      	orrs	r0, r3
 8002d4a:	9004      	str	r0, [sp, #16]
 8002d4c:	4645      	mov	r5, r8
 8002d4e:	e7bb      	b.n	8002cc8 <_vfiprintf_r+0x88>
 8002d50:	9a03      	ldr	r2, [sp, #12]
 8002d52:	1d11      	adds	r1, r2, #4
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	9103      	str	r1, [sp, #12]
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	db01      	blt.n	8002d60 <_vfiprintf_r+0x120>
 8002d5c:	9207      	str	r2, [sp, #28]
 8002d5e:	e004      	b.n	8002d6a <_vfiprintf_r+0x12a>
 8002d60:	4252      	negs	r2, r2
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	9207      	str	r2, [sp, #28]
 8002d68:	9304      	str	r3, [sp, #16]
 8002d6a:	f898 3000 	ldrb.w	r3, [r8]
 8002d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d70:	d110      	bne.n	8002d94 <_vfiprintf_r+0x154>
 8002d72:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002d76:	2b2a      	cmp	r3, #42	; 0x2a
 8002d78:	f108 0101 	add.w	r1, r8, #1
 8002d7c:	d137      	bne.n	8002dee <_vfiprintf_r+0x1ae>
 8002d7e:	9b03      	ldr	r3, [sp, #12]
 8002d80:	1d1a      	adds	r2, r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	9203      	str	r2, [sp, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfb8      	it	lt
 8002d8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d8e:	f108 0802 	add.w	r8, r8, #2
 8002d92:	9305      	str	r3, [sp, #20]
 8002d94:	4d31      	ldr	r5, [pc, #196]	; (8002e5c <_vfiprintf_r+0x21c>)
 8002d96:	f898 1000 	ldrb.w	r1, [r8]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f7fd fa17 	bl	80001d0 <memchr>
 8002da2:	b140      	cbz	r0, 8002db6 <_vfiprintf_r+0x176>
 8002da4:	2340      	movs	r3, #64	; 0x40
 8002da6:	1b40      	subs	r0, r0, r5
 8002da8:	fa03 f000 	lsl.w	r0, r3, r0
 8002dac:	9b04      	ldr	r3, [sp, #16]
 8002dae:	4303      	orrs	r3, r0
 8002db0:	9304      	str	r3, [sp, #16]
 8002db2:	f108 0801 	add.w	r8, r8, #1
 8002db6:	f898 1000 	ldrb.w	r1, [r8]
 8002dba:	4829      	ldr	r0, [pc, #164]	; (8002e60 <_vfiprintf_r+0x220>)
 8002dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dc0:	2206      	movs	r2, #6
 8002dc2:	f108 0701 	add.w	r7, r8, #1
 8002dc6:	f7fd fa03 	bl	80001d0 <memchr>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d034      	beq.n	8002e38 <_vfiprintf_r+0x1f8>
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <_vfiprintf_r+0x224>)
 8002dd0:	bb03      	cbnz	r3, 8002e14 <_vfiprintf_r+0x1d4>
 8002dd2:	9b03      	ldr	r3, [sp, #12]
 8002dd4:	3307      	adds	r3, #7
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	3308      	adds	r3, #8
 8002ddc:	9303      	str	r3, [sp, #12]
 8002dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002de0:	444b      	add	r3, r9
 8002de2:	9309      	str	r3, [sp, #36]	; 0x24
 8002de4:	e74c      	b.n	8002c80 <_vfiprintf_r+0x40>
 8002de6:	fb00 3202 	mla	r2, r0, r2, r3
 8002dea:	2101      	movs	r1, #1
 8002dec:	e786      	b.n	8002cfc <_vfiprintf_r+0xbc>
 8002dee:	2300      	movs	r3, #0
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	4618      	mov	r0, r3
 8002df4:	250a      	movs	r5, #10
 8002df6:	4688      	mov	r8, r1
 8002df8:	3101      	adds	r1, #1
 8002dfa:	f898 2000 	ldrb.w	r2, [r8]
 8002dfe:	3a30      	subs	r2, #48	; 0x30
 8002e00:	2a09      	cmp	r2, #9
 8002e02:	d903      	bls.n	8002e0c <_vfiprintf_r+0x1cc>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0c5      	beq.n	8002d94 <_vfiprintf_r+0x154>
 8002e08:	9005      	str	r0, [sp, #20]
 8002e0a:	e7c3      	b.n	8002d94 <_vfiprintf_r+0x154>
 8002e0c:	fb05 2000 	mla	r0, r5, r0, r2
 8002e10:	2301      	movs	r3, #1
 8002e12:	e7f0      	b.n	8002df6 <_vfiprintf_r+0x1b6>
 8002e14:	ab03      	add	r3, sp, #12
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <_vfiprintf_r+0x228>)
 8002e1c:	a904      	add	r1, sp, #16
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f3af 8000 	nop.w
 8002e24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e28:	4681      	mov	r9, r0
 8002e2a:	d1d8      	bne.n	8002dde <_vfiprintf_r+0x19e>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	f53f af7d 	bmi.w	8002d2e <_vfiprintf_r+0xee>
 8002e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e36:	e77c      	b.n	8002d32 <_vfiprintf_r+0xf2>
 8002e38:	ab03      	add	r3, sp, #12
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <_vfiprintf_r+0x228>)
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 f888 	bl	8002f58 <_printf_i>
 8002e48:	e7ec      	b.n	8002e24 <_vfiprintf_r+0x1e4>
 8002e4a:	bf00      	nop
 8002e4c:	08003888 	.word	0x08003888
 8002e50:	080038cc 	.word	0x080038cc
 8002e54:	080038a8 	.word	0x080038a8
 8002e58:	08003868 	.word	0x08003868
 8002e5c:	080038d2 	.word	0x080038d2
 8002e60:	080038d6 	.word	0x080038d6
 8002e64:	00000000 	.word	0x00000000
 8002e68:	08002c1d 	.word	0x08002c1d

08002e6c <_printf_common>:
 8002e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e70:	4691      	mov	r9, r2
 8002e72:	461f      	mov	r7, r3
 8002e74:	688a      	ldr	r2, [r1, #8]
 8002e76:	690b      	ldr	r3, [r1, #16]
 8002e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bfb8      	it	lt
 8002e80:	4613      	movlt	r3, r2
 8002e82:	f8c9 3000 	str.w	r3, [r9]
 8002e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e8a:	4606      	mov	r6, r0
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	b112      	cbz	r2, 8002e96 <_printf_common+0x2a>
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c9 3000 	str.w	r3, [r9]
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	0699      	lsls	r1, r3, #26
 8002e9a:	bf42      	ittt	mi
 8002e9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ea0:	3302      	addmi	r3, #2
 8002ea2:	f8c9 3000 	strmi.w	r3, [r9]
 8002ea6:	6825      	ldr	r5, [r4, #0]
 8002ea8:	f015 0506 	ands.w	r5, r5, #6
 8002eac:	d107      	bne.n	8002ebe <_printf_common+0x52>
 8002eae:	f104 0a19 	add.w	sl, r4, #25
 8002eb2:	68e3      	ldr	r3, [r4, #12]
 8002eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	429d      	cmp	r5, r3
 8002ebc:	db29      	blt.n	8002f12 <_printf_common+0xa6>
 8002ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ec2:	6822      	ldr	r2, [r4, #0]
 8002ec4:	3300      	adds	r3, #0
 8002ec6:	bf18      	it	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	0692      	lsls	r2, r2, #26
 8002ecc:	d42e      	bmi.n	8002f2c <_printf_common+0xc0>
 8002ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed2:	4639      	mov	r1, r7
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	47c0      	blx	r8
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d021      	beq.n	8002f20 <_printf_common+0xb4>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	68e5      	ldr	r5, [r4, #12]
 8002ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ee4:	f003 0306 	and.w	r3, r3, #6
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	bf08      	it	eq
 8002eec:	1aad      	subeq	r5, r5, r2
 8002eee:	68a3      	ldr	r3, [r4, #8]
 8002ef0:	6922      	ldr	r2, [r4, #16]
 8002ef2:	bf0c      	ite	eq
 8002ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef8:	2500      	movne	r5, #0
 8002efa:	4293      	cmp	r3, r2
 8002efc:	bfc4      	itt	gt
 8002efe:	1a9b      	subgt	r3, r3, r2
 8002f00:	18ed      	addgt	r5, r5, r3
 8002f02:	f04f 0900 	mov.w	r9, #0
 8002f06:	341a      	adds	r4, #26
 8002f08:	454d      	cmp	r5, r9
 8002f0a:	d11b      	bne.n	8002f44 <_printf_common+0xd8>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f12:	2301      	movs	r3, #1
 8002f14:	4652      	mov	r2, sl
 8002f16:	4639      	mov	r1, r7
 8002f18:	4630      	mov	r0, r6
 8002f1a:	47c0      	blx	r8
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d103      	bne.n	8002f28 <_printf_common+0xbc>
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	3501      	adds	r5, #1
 8002f2a:	e7c2      	b.n	8002eb2 <_printf_common+0x46>
 8002f2c:	18e1      	adds	r1, r4, r3
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	2030      	movs	r0, #48	; 0x30
 8002f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f36:	4422      	add	r2, r4
 8002f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f40:	3302      	adds	r3, #2
 8002f42:	e7c4      	b.n	8002ece <_printf_common+0x62>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4622      	mov	r2, r4
 8002f48:	4639      	mov	r1, r7
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	47c0      	blx	r8
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0e6      	beq.n	8002f20 <_printf_common+0xb4>
 8002f52:	f109 0901 	add.w	r9, r9, #1
 8002f56:	e7d7      	b.n	8002f08 <_printf_common+0x9c>

08002f58 <_printf_i>:
 8002f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f5c:	4617      	mov	r7, r2
 8002f5e:	7e0a      	ldrb	r2, [r1, #24]
 8002f60:	b085      	sub	sp, #20
 8002f62:	2a6e      	cmp	r2, #110	; 0x6e
 8002f64:	4698      	mov	r8, r3
 8002f66:	4606      	mov	r6, r0
 8002f68:	460c      	mov	r4, r1
 8002f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f6c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002f70:	f000 80bc 	beq.w	80030ec <_printf_i+0x194>
 8002f74:	d81a      	bhi.n	8002fac <_printf_i+0x54>
 8002f76:	2a63      	cmp	r2, #99	; 0x63
 8002f78:	d02e      	beq.n	8002fd8 <_printf_i+0x80>
 8002f7a:	d80a      	bhi.n	8002f92 <_printf_i+0x3a>
 8002f7c:	2a00      	cmp	r2, #0
 8002f7e:	f000 80c8 	beq.w	8003112 <_printf_i+0x1ba>
 8002f82:	2a58      	cmp	r2, #88	; 0x58
 8002f84:	f000 808a 	beq.w	800309c <_printf_i+0x144>
 8002f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f90:	e02a      	b.n	8002fe8 <_printf_i+0x90>
 8002f92:	2a64      	cmp	r2, #100	; 0x64
 8002f94:	d001      	beq.n	8002f9a <_printf_i+0x42>
 8002f96:	2a69      	cmp	r2, #105	; 0x69
 8002f98:	d1f6      	bne.n	8002f88 <_printf_i+0x30>
 8002f9a:	6821      	ldr	r1, [r4, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002fa2:	d023      	beq.n	8002fec <_printf_i+0x94>
 8002fa4:	1d11      	adds	r1, r2, #4
 8002fa6:	6019      	str	r1, [r3, #0]
 8002fa8:	6813      	ldr	r3, [r2, #0]
 8002faa:	e027      	b.n	8002ffc <_printf_i+0xa4>
 8002fac:	2a73      	cmp	r2, #115	; 0x73
 8002fae:	f000 80b4 	beq.w	800311a <_printf_i+0x1c2>
 8002fb2:	d808      	bhi.n	8002fc6 <_printf_i+0x6e>
 8002fb4:	2a6f      	cmp	r2, #111	; 0x6f
 8002fb6:	d02a      	beq.n	800300e <_printf_i+0xb6>
 8002fb8:	2a70      	cmp	r2, #112	; 0x70
 8002fba:	d1e5      	bne.n	8002f88 <_printf_i+0x30>
 8002fbc:	680a      	ldr	r2, [r1, #0]
 8002fbe:	f042 0220 	orr.w	r2, r2, #32
 8002fc2:	600a      	str	r2, [r1, #0]
 8002fc4:	e003      	b.n	8002fce <_printf_i+0x76>
 8002fc6:	2a75      	cmp	r2, #117	; 0x75
 8002fc8:	d021      	beq.n	800300e <_printf_i+0xb6>
 8002fca:	2a78      	cmp	r2, #120	; 0x78
 8002fcc:	d1dc      	bne.n	8002f88 <_printf_i+0x30>
 8002fce:	2278      	movs	r2, #120	; 0x78
 8002fd0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002fd4:	496e      	ldr	r1, [pc, #440]	; (8003190 <_printf_i+0x238>)
 8002fd6:	e064      	b.n	80030a2 <_printf_i+0x14a>
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002fde:	1d11      	adds	r1, r2, #4
 8002fe0:	6019      	str	r1, [r3, #0]
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0a3      	b.n	8003134 <_printf_i+0x1dc>
 8002fec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ff0:	f102 0104 	add.w	r1, r2, #4
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	d0d7      	beq.n	8002fa8 <_printf_i+0x50>
 8002ff8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	da03      	bge.n	8003008 <_printf_i+0xb0>
 8003000:	222d      	movs	r2, #45	; 0x2d
 8003002:	425b      	negs	r3, r3
 8003004:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003008:	4962      	ldr	r1, [pc, #392]	; (8003194 <_printf_i+0x23c>)
 800300a:	220a      	movs	r2, #10
 800300c:	e017      	b.n	800303e <_printf_i+0xe6>
 800300e:	6820      	ldr	r0, [r4, #0]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003016:	d003      	beq.n	8003020 <_printf_i+0xc8>
 8003018:	1d08      	adds	r0, r1, #4
 800301a:	6018      	str	r0, [r3, #0]
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	e006      	b.n	800302e <_printf_i+0xd6>
 8003020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003024:	f101 0004 	add.w	r0, r1, #4
 8003028:	6018      	str	r0, [r3, #0]
 800302a:	d0f7      	beq.n	800301c <_printf_i+0xc4>
 800302c:	880b      	ldrh	r3, [r1, #0]
 800302e:	4959      	ldr	r1, [pc, #356]	; (8003194 <_printf_i+0x23c>)
 8003030:	2a6f      	cmp	r2, #111	; 0x6f
 8003032:	bf14      	ite	ne
 8003034:	220a      	movne	r2, #10
 8003036:	2208      	moveq	r2, #8
 8003038:	2000      	movs	r0, #0
 800303a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800303e:	6865      	ldr	r5, [r4, #4]
 8003040:	60a5      	str	r5, [r4, #8]
 8003042:	2d00      	cmp	r5, #0
 8003044:	f2c0 809c 	blt.w	8003180 <_printf_i+0x228>
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	f020 0004 	bic.w	r0, r0, #4
 800304e:	6020      	str	r0, [r4, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d13f      	bne.n	80030d4 <_printf_i+0x17c>
 8003054:	2d00      	cmp	r5, #0
 8003056:	f040 8095 	bne.w	8003184 <_printf_i+0x22c>
 800305a:	4675      	mov	r5, lr
 800305c:	2a08      	cmp	r2, #8
 800305e:	d10b      	bne.n	8003078 <_printf_i+0x120>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	07da      	lsls	r2, r3, #31
 8003064:	d508      	bpl.n	8003078 <_printf_i+0x120>
 8003066:	6923      	ldr	r3, [r4, #16]
 8003068:	6862      	ldr	r2, [r4, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	bfde      	ittt	le
 800306e:	2330      	movle	r3, #48	; 0x30
 8003070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003078:	ebae 0305 	sub.w	r3, lr, r5
 800307c:	6123      	str	r3, [r4, #16]
 800307e:	f8cd 8000 	str.w	r8, [sp]
 8003082:	463b      	mov	r3, r7
 8003084:	aa03      	add	r2, sp, #12
 8003086:	4621      	mov	r1, r4
 8003088:	4630      	mov	r0, r6
 800308a:	f7ff feef 	bl	8002e6c <_printf_common>
 800308e:	3001      	adds	r0, #1
 8003090:	d155      	bne.n	800313e <_printf_i+0x1e6>
 8003092:	f04f 30ff 	mov.w	r0, #4294967295
 8003096:	b005      	add	sp, #20
 8003098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800309c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80030a0:	493c      	ldr	r1, [pc, #240]	; (8003194 <_printf_i+0x23c>)
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030aa:	f100 0504 	add.w	r5, r0, #4
 80030ae:	601d      	str	r5, [r3, #0]
 80030b0:	d001      	beq.n	80030b6 <_printf_i+0x15e>
 80030b2:	6803      	ldr	r3, [r0, #0]
 80030b4:	e002      	b.n	80030bc <_printf_i+0x164>
 80030b6:	0655      	lsls	r5, r2, #25
 80030b8:	d5fb      	bpl.n	80030b2 <_printf_i+0x15a>
 80030ba:	8803      	ldrh	r3, [r0, #0]
 80030bc:	07d0      	lsls	r0, r2, #31
 80030be:	bf44      	itt	mi
 80030c0:	f042 0220 	orrmi.w	r2, r2, #32
 80030c4:	6022      	strmi	r2, [r4, #0]
 80030c6:	b91b      	cbnz	r3, 80030d0 <_printf_i+0x178>
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	f022 0220 	bic.w	r2, r2, #32
 80030ce:	6022      	str	r2, [r4, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	e7b1      	b.n	8003038 <_printf_i+0xe0>
 80030d4:	4675      	mov	r5, lr
 80030d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80030da:	fb02 3310 	mls	r3, r2, r0, r3
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030e4:	4603      	mov	r3, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d1f5      	bne.n	80030d6 <_printf_i+0x17e>
 80030ea:	e7b7      	b.n	800305c <_printf_i+0x104>
 80030ec:	6808      	ldr	r0, [r1, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6949      	ldr	r1, [r1, #20]
 80030f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030f6:	d004      	beq.n	8003102 <_printf_i+0x1aa>
 80030f8:	1d10      	adds	r0, r2, #4
 80030fa:	6018      	str	r0, [r3, #0]
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	6019      	str	r1, [r3, #0]
 8003100:	e007      	b.n	8003112 <_printf_i+0x1ba>
 8003102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003106:	f102 0004 	add.w	r0, r2, #4
 800310a:	6018      	str	r0, [r3, #0]
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	d0f6      	beq.n	80030fe <_printf_i+0x1a6>
 8003110:	8019      	strh	r1, [r3, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	6123      	str	r3, [r4, #16]
 8003116:	4675      	mov	r5, lr
 8003118:	e7b1      	b.n	800307e <_printf_i+0x126>
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	1d11      	adds	r1, r2, #4
 800311e:	6019      	str	r1, [r3, #0]
 8003120:	6815      	ldr	r5, [r2, #0]
 8003122:	6862      	ldr	r2, [r4, #4]
 8003124:	2100      	movs	r1, #0
 8003126:	4628      	mov	r0, r5
 8003128:	f7fd f852 	bl	80001d0 <memchr>
 800312c:	b108      	cbz	r0, 8003132 <_printf_i+0x1da>
 800312e:	1b40      	subs	r0, r0, r5
 8003130:	6060      	str	r0, [r4, #4]
 8003132:	6863      	ldr	r3, [r4, #4]
 8003134:	6123      	str	r3, [r4, #16]
 8003136:	2300      	movs	r3, #0
 8003138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800313c:	e79f      	b.n	800307e <_printf_i+0x126>
 800313e:	6923      	ldr	r3, [r4, #16]
 8003140:	462a      	mov	r2, r5
 8003142:	4639      	mov	r1, r7
 8003144:	4630      	mov	r0, r6
 8003146:	47c0      	blx	r8
 8003148:	3001      	adds	r0, #1
 800314a:	d0a2      	beq.n	8003092 <_printf_i+0x13a>
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	079b      	lsls	r3, r3, #30
 8003150:	d507      	bpl.n	8003162 <_printf_i+0x20a>
 8003152:	2500      	movs	r5, #0
 8003154:	f104 0919 	add.w	r9, r4, #25
 8003158:	68e3      	ldr	r3, [r4, #12]
 800315a:	9a03      	ldr	r2, [sp, #12]
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	429d      	cmp	r5, r3
 8003160:	db05      	blt.n	800316e <_printf_i+0x216>
 8003162:	68e0      	ldr	r0, [r4, #12]
 8003164:	9b03      	ldr	r3, [sp, #12]
 8003166:	4298      	cmp	r0, r3
 8003168:	bfb8      	it	lt
 800316a:	4618      	movlt	r0, r3
 800316c:	e793      	b.n	8003096 <_printf_i+0x13e>
 800316e:	2301      	movs	r3, #1
 8003170:	464a      	mov	r2, r9
 8003172:	4639      	mov	r1, r7
 8003174:	4630      	mov	r0, r6
 8003176:	47c0      	blx	r8
 8003178:	3001      	adds	r0, #1
 800317a:	d08a      	beq.n	8003092 <_printf_i+0x13a>
 800317c:	3501      	adds	r5, #1
 800317e:	e7eb      	b.n	8003158 <_printf_i+0x200>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1a7      	bne.n	80030d4 <_printf_i+0x17c>
 8003184:	780b      	ldrb	r3, [r1, #0]
 8003186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800318a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800318e:	e765      	b.n	800305c <_printf_i+0x104>
 8003190:	080038ee 	.word	0x080038ee
 8003194:	080038dd 	.word	0x080038dd

08003198 <_sbrk_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	4c06      	ldr	r4, [pc, #24]	; (80031b4 <_sbrk_r+0x1c>)
 800319c:	2300      	movs	r3, #0
 800319e:	4605      	mov	r5, r0
 80031a0:	4608      	mov	r0, r1
 80031a2:	6023      	str	r3, [r4, #0]
 80031a4:	f000 fb02 	bl	80037ac <_sbrk>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_sbrk_r+0x1a>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_sbrk_r+0x1a>
 80031b0:	602b      	str	r3, [r5, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	20003f38 	.word	0x20003f38

080031b8 <__sread>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	460c      	mov	r4, r1
 80031bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c0:	f000 fa98 	bl	80036f4 <_read_r>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	bfab      	itete	ge
 80031c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031ca:	89a3      	ldrhlt	r3, [r4, #12]
 80031cc:	181b      	addge	r3, r3, r0
 80031ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031d2:	bfac      	ite	ge
 80031d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80031d6:	81a3      	strhlt	r3, [r4, #12]
 80031d8:	bd10      	pop	{r4, pc}

080031da <__swrite>:
 80031da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031de:	461f      	mov	r7, r3
 80031e0:	898b      	ldrh	r3, [r1, #12]
 80031e2:	05db      	lsls	r3, r3, #23
 80031e4:	4605      	mov	r5, r0
 80031e6:	460c      	mov	r4, r1
 80031e8:	4616      	mov	r6, r2
 80031ea:	d505      	bpl.n	80031f8 <__swrite+0x1e>
 80031ec:	2302      	movs	r3, #2
 80031ee:	2200      	movs	r2, #0
 80031f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f4:	f000 f9b8 	bl	8003568 <_lseek_r>
 80031f8:	89a3      	ldrh	r3, [r4, #12]
 80031fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003202:	81a3      	strh	r3, [r4, #12]
 8003204:	4632      	mov	r2, r6
 8003206:	463b      	mov	r3, r7
 8003208:	4628      	mov	r0, r5
 800320a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800320e:	f000 b869 	b.w	80032e4 <_write_r>

08003212 <__sseek>:
 8003212:	b510      	push	{r4, lr}
 8003214:	460c      	mov	r4, r1
 8003216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800321a:	f000 f9a5 	bl	8003568 <_lseek_r>
 800321e:	1c43      	adds	r3, r0, #1
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	bf15      	itete	ne
 8003224:	6560      	strne	r0, [r4, #84]	; 0x54
 8003226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800322a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800322e:	81a3      	strheq	r3, [r4, #12]
 8003230:	bf18      	it	ne
 8003232:	81a3      	strhne	r3, [r4, #12]
 8003234:	bd10      	pop	{r4, pc}

08003236 <__sclose>:
 8003236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323a:	f000 b8d3 	b.w	80033e4 <_close_r>
	...

08003240 <__swbuf_r>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	460e      	mov	r6, r1
 8003244:	4614      	mov	r4, r2
 8003246:	4605      	mov	r5, r0
 8003248:	b118      	cbz	r0, 8003252 <__swbuf_r+0x12>
 800324a:	6983      	ldr	r3, [r0, #24]
 800324c:	b90b      	cbnz	r3, 8003252 <__swbuf_r+0x12>
 800324e:	f7ff fbdd 	bl	8002a0c <__sinit>
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <__swbuf_r+0x98>)
 8003254:	429c      	cmp	r4, r3
 8003256:	d12a      	bne.n	80032ae <__swbuf_r+0x6e>
 8003258:	686c      	ldr	r4, [r5, #4]
 800325a:	69a3      	ldr	r3, [r4, #24]
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	071a      	lsls	r2, r3, #28
 8003262:	d52e      	bpl.n	80032c2 <__swbuf_r+0x82>
 8003264:	6923      	ldr	r3, [r4, #16]
 8003266:	b363      	cbz	r3, 80032c2 <__swbuf_r+0x82>
 8003268:	6923      	ldr	r3, [r4, #16]
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	1ac0      	subs	r0, r0, r3
 800326e:	6963      	ldr	r3, [r4, #20]
 8003270:	b2f6      	uxtb	r6, r6
 8003272:	4298      	cmp	r0, r3
 8003274:	4637      	mov	r7, r6
 8003276:	db04      	blt.n	8003282 <__swbuf_r+0x42>
 8003278:	4621      	mov	r1, r4
 800327a:	4628      	mov	r0, r5
 800327c:	f000 f94a 	bl	8003514 <_fflush_r>
 8003280:	bb28      	cbnz	r0, 80032ce <__swbuf_r+0x8e>
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	3b01      	subs	r3, #1
 8003286:	60a3      	str	r3, [r4, #8]
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	701e      	strb	r6, [r3, #0]
 8003290:	6963      	ldr	r3, [r4, #20]
 8003292:	3001      	adds	r0, #1
 8003294:	4298      	cmp	r0, r3
 8003296:	d004      	beq.n	80032a2 <__swbuf_r+0x62>
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	07db      	lsls	r3, r3, #31
 800329c:	d519      	bpl.n	80032d2 <__swbuf_r+0x92>
 800329e:	2e0a      	cmp	r6, #10
 80032a0:	d117      	bne.n	80032d2 <__swbuf_r+0x92>
 80032a2:	4621      	mov	r1, r4
 80032a4:	4628      	mov	r0, r5
 80032a6:	f000 f935 	bl	8003514 <_fflush_r>
 80032aa:	b190      	cbz	r0, 80032d2 <__swbuf_r+0x92>
 80032ac:	e00f      	b.n	80032ce <__swbuf_r+0x8e>
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <__swbuf_r+0x9c>)
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d101      	bne.n	80032b8 <__swbuf_r+0x78>
 80032b4:	68ac      	ldr	r4, [r5, #8]
 80032b6:	e7d0      	b.n	800325a <__swbuf_r+0x1a>
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <__swbuf_r+0xa0>)
 80032ba:	429c      	cmp	r4, r3
 80032bc:	bf08      	it	eq
 80032be:	68ec      	ldreq	r4, [r5, #12]
 80032c0:	e7cb      	b.n	800325a <__swbuf_r+0x1a>
 80032c2:	4621      	mov	r1, r4
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f81f 	bl	8003308 <__swsetup_r>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d0cc      	beq.n	8003268 <__swbuf_r+0x28>
 80032ce:	f04f 37ff 	mov.w	r7, #4294967295
 80032d2:	4638      	mov	r0, r7
 80032d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	08003888 	.word	0x08003888
 80032dc:	080038a8 	.word	0x080038a8
 80032e0:	08003868 	.word	0x08003868

080032e4 <_write_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4c07      	ldr	r4, [pc, #28]	; (8003304 <_write_r+0x20>)
 80032e8:	4605      	mov	r5, r0
 80032ea:	4608      	mov	r0, r1
 80032ec:	4611      	mov	r1, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	6022      	str	r2, [r4, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 fa68 	bl	80037c8 <_write>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_write_r+0x1e>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_write_r+0x1e>
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	20003f38 	.word	0x20003f38

08003308 <__swsetup_r>:
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <__swsetup_r+0xcc>)
 800330a:	b570      	push	{r4, r5, r6, lr}
 800330c:	681d      	ldr	r5, [r3, #0]
 800330e:	4606      	mov	r6, r0
 8003310:	460c      	mov	r4, r1
 8003312:	b125      	cbz	r5, 800331e <__swsetup_r+0x16>
 8003314:	69ab      	ldr	r3, [r5, #24]
 8003316:	b913      	cbnz	r3, 800331e <__swsetup_r+0x16>
 8003318:	4628      	mov	r0, r5
 800331a:	f7ff fb77 	bl	8002a0c <__sinit>
 800331e:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <__swsetup_r+0xd0>)
 8003320:	429c      	cmp	r4, r3
 8003322:	d10f      	bne.n	8003344 <__swsetup_r+0x3c>
 8003324:	686c      	ldr	r4, [r5, #4]
 8003326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800332a:	b29a      	uxth	r2, r3
 800332c:	0715      	lsls	r5, r2, #28
 800332e:	d42c      	bmi.n	800338a <__swsetup_r+0x82>
 8003330:	06d0      	lsls	r0, r2, #27
 8003332:	d411      	bmi.n	8003358 <__swsetup_r+0x50>
 8003334:	2209      	movs	r2, #9
 8003336:	6032      	str	r2, [r6, #0]
 8003338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	f04f 30ff 	mov.w	r0, #4294967295
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <__swsetup_r+0xd4>)
 8003346:	429c      	cmp	r4, r3
 8003348:	d101      	bne.n	800334e <__swsetup_r+0x46>
 800334a:	68ac      	ldr	r4, [r5, #8]
 800334c:	e7eb      	b.n	8003326 <__swsetup_r+0x1e>
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <__swsetup_r+0xd8>)
 8003350:	429c      	cmp	r4, r3
 8003352:	bf08      	it	eq
 8003354:	68ec      	ldreq	r4, [r5, #12]
 8003356:	e7e6      	b.n	8003326 <__swsetup_r+0x1e>
 8003358:	0751      	lsls	r1, r2, #29
 800335a:	d512      	bpl.n	8003382 <__swsetup_r+0x7a>
 800335c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800335e:	b141      	cbz	r1, 8003372 <__swsetup_r+0x6a>
 8003360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003364:	4299      	cmp	r1, r3
 8003366:	d002      	beq.n	800336e <__swsetup_r+0x66>
 8003368:	4630      	mov	r0, r6
 800336a:	f000 f975 	bl	8003658 <_free_r>
 800336e:	2300      	movs	r3, #0
 8003370:	6363      	str	r3, [r4, #52]	; 0x34
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003378:	81a3      	strh	r3, [r4, #12]
 800337a:	2300      	movs	r3, #0
 800337c:	6063      	str	r3, [r4, #4]
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	b94b      	cbnz	r3, 80033a2 <__swsetup_r+0x9a>
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d003      	beq.n	80033a2 <__swsetup_r+0x9a>
 800339a:	4621      	mov	r1, r4
 800339c:	4630      	mov	r0, r6
 800339e:	f000 f919 	bl	80035d4 <__smakebuf_r>
 80033a2:	89a2      	ldrh	r2, [r4, #12]
 80033a4:	f012 0301 	ands.w	r3, r2, #1
 80033a8:	d00c      	beq.n	80033c4 <__swsetup_r+0xbc>
 80033aa:	2300      	movs	r3, #0
 80033ac:	60a3      	str	r3, [r4, #8]
 80033ae:	6963      	ldr	r3, [r4, #20]
 80033b0:	425b      	negs	r3, r3
 80033b2:	61a3      	str	r3, [r4, #24]
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	b953      	cbnz	r3, 80033ce <__swsetup_r+0xc6>
 80033b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033c0:	d1ba      	bne.n	8003338 <__swsetup_r+0x30>
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	0792      	lsls	r2, r2, #30
 80033c6:	bf58      	it	pl
 80033c8:	6963      	ldrpl	r3, [r4, #20]
 80033ca:	60a3      	str	r3, [r4, #8]
 80033cc:	e7f2      	b.n	80033b4 <__swsetup_r+0xac>
 80033ce:	2000      	movs	r0, #0
 80033d0:	e7f7      	b.n	80033c2 <__swsetup_r+0xba>
 80033d2:	bf00      	nop
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	08003888 	.word	0x08003888
 80033dc:	080038a8 	.word	0x080038a8
 80033e0:	08003868 	.word	0x08003868

080033e4 <_close_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4c06      	ldr	r4, [pc, #24]	; (8003400 <_close_r+0x1c>)
 80033e8:	2300      	movs	r3, #0
 80033ea:	4605      	mov	r5, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	6023      	str	r3, [r4, #0]
 80033f0:	f000 f9b4 	bl	800375c <_close>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_close_r+0x1a>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_close_r+0x1a>
 80033fc:	602b      	str	r3, [r5, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	20003f38 	.word	0x20003f38

08003404 <__sflush_r>:
 8003404:	898a      	ldrh	r2, [r1, #12]
 8003406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340a:	4605      	mov	r5, r0
 800340c:	0710      	lsls	r0, r2, #28
 800340e:	460c      	mov	r4, r1
 8003410:	d45a      	bmi.n	80034c8 <__sflush_r+0xc4>
 8003412:	684b      	ldr	r3, [r1, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	dc05      	bgt.n	8003424 <__sflush_r+0x20>
 8003418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	dc02      	bgt.n	8003424 <__sflush_r+0x20>
 800341e:	2000      	movs	r0, #0
 8003420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003426:	2e00      	cmp	r6, #0
 8003428:	d0f9      	beq.n	800341e <__sflush_r+0x1a>
 800342a:	2300      	movs	r3, #0
 800342c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003430:	682f      	ldr	r7, [r5, #0]
 8003432:	602b      	str	r3, [r5, #0]
 8003434:	d033      	beq.n	800349e <__sflush_r+0x9a>
 8003436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	075a      	lsls	r2, r3, #29
 800343c:	d505      	bpl.n	800344a <__sflush_r+0x46>
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	1ac0      	subs	r0, r0, r3
 8003442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003444:	b10b      	cbz	r3, 800344a <__sflush_r+0x46>
 8003446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003448:	1ac0      	subs	r0, r0, r3
 800344a:	2300      	movs	r3, #0
 800344c:	4602      	mov	r2, r0
 800344e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003450:	6a21      	ldr	r1, [r4, #32]
 8003452:	4628      	mov	r0, r5
 8003454:	47b0      	blx	r6
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	d106      	bne.n	800346a <__sflush_r+0x66>
 800345c:	6829      	ldr	r1, [r5, #0]
 800345e:	291d      	cmp	r1, #29
 8003460:	d84b      	bhi.n	80034fa <__sflush_r+0xf6>
 8003462:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <__sflush_r+0x10c>)
 8003464:	40ca      	lsrs	r2, r1
 8003466:	07d6      	lsls	r6, r2, #31
 8003468:	d547      	bpl.n	80034fa <__sflush_r+0xf6>
 800346a:	2200      	movs	r2, #0
 800346c:	6062      	str	r2, [r4, #4]
 800346e:	04d9      	lsls	r1, r3, #19
 8003470:	6922      	ldr	r2, [r4, #16]
 8003472:	6022      	str	r2, [r4, #0]
 8003474:	d504      	bpl.n	8003480 <__sflush_r+0x7c>
 8003476:	1c42      	adds	r2, r0, #1
 8003478:	d101      	bne.n	800347e <__sflush_r+0x7a>
 800347a:	682b      	ldr	r3, [r5, #0]
 800347c:	b903      	cbnz	r3, 8003480 <__sflush_r+0x7c>
 800347e:	6560      	str	r0, [r4, #84]	; 0x54
 8003480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003482:	602f      	str	r7, [r5, #0]
 8003484:	2900      	cmp	r1, #0
 8003486:	d0ca      	beq.n	800341e <__sflush_r+0x1a>
 8003488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800348c:	4299      	cmp	r1, r3
 800348e:	d002      	beq.n	8003496 <__sflush_r+0x92>
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f8e1 	bl	8003658 <_free_r>
 8003496:	2000      	movs	r0, #0
 8003498:	6360      	str	r0, [r4, #52]	; 0x34
 800349a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800349e:	6a21      	ldr	r1, [r4, #32]
 80034a0:	2301      	movs	r3, #1
 80034a2:	4628      	mov	r0, r5
 80034a4:	47b0      	blx	r6
 80034a6:	1c41      	adds	r1, r0, #1
 80034a8:	d1c6      	bne.n	8003438 <__sflush_r+0x34>
 80034aa:	682b      	ldr	r3, [r5, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0c3      	beq.n	8003438 <__sflush_r+0x34>
 80034b0:	2b1d      	cmp	r3, #29
 80034b2:	d001      	beq.n	80034b8 <__sflush_r+0xb4>
 80034b4:	2b16      	cmp	r3, #22
 80034b6:	d101      	bne.n	80034bc <__sflush_r+0xb8>
 80034b8:	602f      	str	r7, [r5, #0]
 80034ba:	e7b0      	b.n	800341e <__sflush_r+0x1a>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c8:	690f      	ldr	r7, [r1, #16]
 80034ca:	2f00      	cmp	r7, #0
 80034cc:	d0a7      	beq.n	800341e <__sflush_r+0x1a>
 80034ce:	0793      	lsls	r3, r2, #30
 80034d0:	680e      	ldr	r6, [r1, #0]
 80034d2:	bf08      	it	eq
 80034d4:	694b      	ldreq	r3, [r1, #20]
 80034d6:	600f      	str	r7, [r1, #0]
 80034d8:	bf18      	it	ne
 80034da:	2300      	movne	r3, #0
 80034dc:	eba6 0807 	sub.w	r8, r6, r7
 80034e0:	608b      	str	r3, [r1, #8]
 80034e2:	f1b8 0f00 	cmp.w	r8, #0
 80034e6:	dd9a      	ble.n	800341e <__sflush_r+0x1a>
 80034e8:	4643      	mov	r3, r8
 80034ea:	463a      	mov	r2, r7
 80034ec:	6a21      	ldr	r1, [r4, #32]
 80034ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b0      	blx	r6
 80034f4:	2800      	cmp	r0, #0
 80034f6:	dc07      	bgt.n	8003508 <__sflush_r+0x104>
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034fe:	81a3      	strh	r3, [r4, #12]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003508:	4407      	add	r7, r0
 800350a:	eba8 0800 	sub.w	r8, r8, r0
 800350e:	e7e8      	b.n	80034e2 <__sflush_r+0xde>
 8003510:	20400001 	.word	0x20400001

08003514 <_fflush_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	4605      	mov	r5, r0
 800351a:	460c      	mov	r4, r1
 800351c:	b1db      	cbz	r3, 8003556 <_fflush_r+0x42>
 800351e:	b118      	cbz	r0, 8003528 <_fflush_r+0x14>
 8003520:	6983      	ldr	r3, [r0, #24]
 8003522:	b90b      	cbnz	r3, 8003528 <_fflush_r+0x14>
 8003524:	f7ff fa72 	bl	8002a0c <__sinit>
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <_fflush_r+0x48>)
 800352a:	429c      	cmp	r4, r3
 800352c:	d109      	bne.n	8003542 <_fflush_r+0x2e>
 800352e:	686c      	ldr	r4, [r5, #4]
 8003530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003534:	b17b      	cbz	r3, 8003556 <_fflush_r+0x42>
 8003536:	4621      	mov	r1, r4
 8003538:	4628      	mov	r0, r5
 800353a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800353e:	f7ff bf61 	b.w	8003404 <__sflush_r>
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <_fflush_r+0x4c>)
 8003544:	429c      	cmp	r4, r3
 8003546:	d101      	bne.n	800354c <_fflush_r+0x38>
 8003548:	68ac      	ldr	r4, [r5, #8]
 800354a:	e7f1      	b.n	8003530 <_fflush_r+0x1c>
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <_fflush_r+0x50>)
 800354e:	429c      	cmp	r4, r3
 8003550:	bf08      	it	eq
 8003552:	68ec      	ldreq	r4, [r5, #12]
 8003554:	e7ec      	b.n	8003530 <_fflush_r+0x1c>
 8003556:	2000      	movs	r0, #0
 8003558:	bd38      	pop	{r3, r4, r5, pc}
 800355a:	bf00      	nop
 800355c:	08003888 	.word	0x08003888
 8003560:	080038a8 	.word	0x080038a8
 8003564:	08003868 	.word	0x08003868

08003568 <_lseek_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4c07      	ldr	r4, [pc, #28]	; (8003588 <_lseek_r+0x20>)
 800356c:	4605      	mov	r5, r0
 800356e:	4608      	mov	r0, r1
 8003570:	4611      	mov	r1, r2
 8003572:	2200      	movs	r2, #0
 8003574:	6022      	str	r2, [r4, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f908 	bl	800378c <_lseek>
 800357c:	1c43      	adds	r3, r0, #1
 800357e:	d102      	bne.n	8003586 <_lseek_r+0x1e>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	b103      	cbz	r3, 8003586 <_lseek_r+0x1e>
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	bd38      	pop	{r3, r4, r5, pc}
 8003588:	20003f38 	.word	0x20003f38

0800358c <__swhatbuf_r>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	460e      	mov	r6, r1
 8003590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003594:	2900      	cmp	r1, #0
 8003596:	b090      	sub	sp, #64	; 0x40
 8003598:	4614      	mov	r4, r2
 800359a:	461d      	mov	r5, r3
 800359c:	da07      	bge.n	80035ae <__swhatbuf_r+0x22>
 800359e:	2300      	movs	r3, #0
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	89b3      	ldrh	r3, [r6, #12]
 80035a4:	061a      	lsls	r2, r3, #24
 80035a6:	d410      	bmi.n	80035ca <__swhatbuf_r+0x3e>
 80035a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ac:	e00e      	b.n	80035cc <__swhatbuf_r+0x40>
 80035ae:	aa01      	add	r2, sp, #4
 80035b0:	f000 f8b2 	bl	8003718 <_fstat_r>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	dbf2      	blt.n	800359e <__swhatbuf_r+0x12>
 80035b8:	9a02      	ldr	r2, [sp, #8]
 80035ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035c2:	425a      	negs	r2, r3
 80035c4:	415a      	adcs	r2, r3
 80035c6:	602a      	str	r2, [r5, #0]
 80035c8:	e7ee      	b.n	80035a8 <__swhatbuf_r+0x1c>
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	2000      	movs	r0, #0
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	b010      	add	sp, #64	; 0x40
 80035d2:	bd70      	pop	{r4, r5, r6, pc}

080035d4 <__smakebuf_r>:
 80035d4:	898b      	ldrh	r3, [r1, #12]
 80035d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035d8:	079d      	lsls	r5, r3, #30
 80035da:	4606      	mov	r6, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	d507      	bpl.n	80035f0 <__smakebuf_r+0x1c>
 80035e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	6123      	str	r3, [r4, #16]
 80035e8:	2301      	movs	r3, #1
 80035ea:	6163      	str	r3, [r4, #20]
 80035ec:	b002      	add	sp, #8
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	ab01      	add	r3, sp, #4
 80035f2:	466a      	mov	r2, sp
 80035f4:	f7ff ffca 	bl	800358c <__swhatbuf_r>
 80035f8:	9900      	ldr	r1, [sp, #0]
 80035fa:	4605      	mov	r5, r0
 80035fc:	4630      	mov	r0, r6
 80035fe:	f7ff fa97 	bl	8002b30 <_malloc_r>
 8003602:	b948      	cbnz	r0, 8003618 <__smakebuf_r+0x44>
 8003604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003608:	059a      	lsls	r2, r3, #22
 800360a:	d4ef      	bmi.n	80035ec <__smakebuf_r+0x18>
 800360c:	f023 0303 	bic.w	r3, r3, #3
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	e7e3      	b.n	80035e0 <__smakebuf_r+0xc>
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <__smakebuf_r+0x7c>)
 800361a:	62b3      	str	r3, [r6, #40]	; 0x28
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	6020      	str	r0, [r4, #0]
 8003620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	9b00      	ldr	r3, [sp, #0]
 8003628:	6163      	str	r3, [r4, #20]
 800362a:	9b01      	ldr	r3, [sp, #4]
 800362c:	6120      	str	r0, [r4, #16]
 800362e:	b15b      	cbz	r3, 8003648 <__smakebuf_r+0x74>
 8003630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003634:	4630      	mov	r0, r6
 8003636:	f000 f881 	bl	800373c <_isatty_r>
 800363a:	b128      	cbz	r0, 8003648 <__smakebuf_r+0x74>
 800363c:	89a3      	ldrh	r3, [r4, #12]
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	81a3      	strh	r3, [r4, #12]
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	431d      	orrs	r5, r3
 800364c:	81a5      	strh	r5, [r4, #12]
 800364e:	e7cd      	b.n	80035ec <__smakebuf_r+0x18>
 8003650:	0800298d 	.word	0x0800298d

08003654 <__malloc_lock>:
 8003654:	4770      	bx	lr

08003656 <__malloc_unlock>:
 8003656:	4770      	bx	lr

08003658 <_free_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	2900      	cmp	r1, #0
 800365e:	d045      	beq.n	80036ec <_free_r+0x94>
 8003660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003664:	1f0c      	subs	r4, r1, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	bfb8      	it	lt
 800366a:	18e4      	addlt	r4, r4, r3
 800366c:	f7ff fff2 	bl	8003654 <__malloc_lock>
 8003670:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <_free_r+0x98>)
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	4610      	mov	r0, r2
 8003676:	b933      	cbnz	r3, 8003686 <_free_r+0x2e>
 8003678:	6063      	str	r3, [r4, #4]
 800367a:	6014      	str	r4, [r2, #0]
 800367c:	4628      	mov	r0, r5
 800367e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003682:	f7ff bfe8 	b.w	8003656 <__malloc_unlock>
 8003686:	42a3      	cmp	r3, r4
 8003688:	d90c      	bls.n	80036a4 <_free_r+0x4c>
 800368a:	6821      	ldr	r1, [r4, #0]
 800368c:	1862      	adds	r2, r4, r1
 800368e:	4293      	cmp	r3, r2
 8003690:	bf04      	itt	eq
 8003692:	681a      	ldreq	r2, [r3, #0]
 8003694:	685b      	ldreq	r3, [r3, #4]
 8003696:	6063      	str	r3, [r4, #4]
 8003698:	bf04      	itt	eq
 800369a:	1852      	addeq	r2, r2, r1
 800369c:	6022      	streq	r2, [r4, #0]
 800369e:	6004      	str	r4, [r0, #0]
 80036a0:	e7ec      	b.n	800367c <_free_r+0x24>
 80036a2:	4613      	mov	r3, r2
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	b10a      	cbz	r2, 80036ac <_free_r+0x54>
 80036a8:	42a2      	cmp	r2, r4
 80036aa:	d9fa      	bls.n	80036a2 <_free_r+0x4a>
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	1858      	adds	r0, r3, r1
 80036b0:	42a0      	cmp	r0, r4
 80036b2:	d10b      	bne.n	80036cc <_free_r+0x74>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	4401      	add	r1, r0
 80036b8:	1858      	adds	r0, r3, r1
 80036ba:	4282      	cmp	r2, r0
 80036bc:	6019      	str	r1, [r3, #0]
 80036be:	d1dd      	bne.n	800367c <_free_r+0x24>
 80036c0:	6810      	ldr	r0, [r2, #0]
 80036c2:	6852      	ldr	r2, [r2, #4]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	4401      	add	r1, r0
 80036c8:	6019      	str	r1, [r3, #0]
 80036ca:	e7d7      	b.n	800367c <_free_r+0x24>
 80036cc:	d902      	bls.n	80036d4 <_free_r+0x7c>
 80036ce:	230c      	movs	r3, #12
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	e7d3      	b.n	800367c <_free_r+0x24>
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	1821      	adds	r1, r4, r0
 80036d8:	428a      	cmp	r2, r1
 80036da:	bf04      	itt	eq
 80036dc:	6811      	ldreq	r1, [r2, #0]
 80036de:	6852      	ldreq	r2, [r2, #4]
 80036e0:	6062      	str	r2, [r4, #4]
 80036e2:	bf04      	itt	eq
 80036e4:	1809      	addeq	r1, r1, r0
 80036e6:	6021      	streq	r1, [r4, #0]
 80036e8:	605c      	str	r4, [r3, #4]
 80036ea:	e7c7      	b.n	800367c <_free_r+0x24>
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
 80036ee:	bf00      	nop
 80036f0:	20003dd8 	.word	0x20003dd8

080036f4 <_read_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4c07      	ldr	r4, [pc, #28]	; (8003714 <_read_r+0x20>)
 80036f8:	4605      	mov	r5, r0
 80036fa:	4608      	mov	r0, r1
 80036fc:	4611      	mov	r1, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	6022      	str	r2, [r4, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f000 f84a 	bl	800379c <_read>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_read_r+0x1e>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	b103      	cbz	r3, 8003712 <_read_r+0x1e>
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	20003f38 	.word	0x20003f38

08003718 <_fstat_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4c07      	ldr	r4, [pc, #28]	; (8003738 <_fstat_r+0x20>)
 800371c:	2300      	movs	r3, #0
 800371e:	4605      	mov	r5, r0
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	f000 f821 	bl	800376c <_fstat>
 800372a:	1c43      	adds	r3, r0, #1
 800372c:	d102      	bne.n	8003734 <_fstat_r+0x1c>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	b103      	cbz	r3, 8003734 <_fstat_r+0x1c>
 8003732:	602b      	str	r3, [r5, #0]
 8003734:	bd38      	pop	{r3, r4, r5, pc}
 8003736:	bf00      	nop
 8003738:	20003f38 	.word	0x20003f38

0800373c <_isatty_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4c06      	ldr	r4, [pc, #24]	; (8003758 <_isatty_r+0x1c>)
 8003740:	2300      	movs	r3, #0
 8003742:	4605      	mov	r5, r0
 8003744:	4608      	mov	r0, r1
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	f000 f818 	bl	800377c <_isatty>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_isatty_r+0x1a>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	b103      	cbz	r3, 8003756 <_isatty_r+0x1a>
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	20003f38 	.word	0x20003f38

0800375c <_close>:
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <_close+0xc>)
 800375e:	2258      	movs	r2, #88	; 0x58
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	4770      	bx	lr
 8003768:	20003f38 	.word	0x20003f38

0800376c <_fstat>:
 800376c:	4b02      	ldr	r3, [pc, #8]	; (8003778 <_fstat+0xc>)
 800376e:	2258      	movs	r2, #88	; 0x58
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	4770      	bx	lr
 8003778:	20003f38 	.word	0x20003f38

0800377c <_isatty>:
 800377c:	4b02      	ldr	r3, [pc, #8]	; (8003788 <_isatty+0xc>)
 800377e:	2258      	movs	r2, #88	; 0x58
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	2000      	movs	r0, #0
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20003f38 	.word	0x20003f38

0800378c <_lseek>:
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <_lseek+0xc>)
 800378e:	2258      	movs	r2, #88	; 0x58
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f04f 30ff 	mov.w	r0, #4294967295
 8003796:	4770      	bx	lr
 8003798:	20003f38 	.word	0x20003f38

0800379c <_read>:
 800379c:	4b02      	ldr	r3, [pc, #8]	; (80037a8 <_read+0xc>)
 800379e:	2258      	movs	r2, #88	; 0x58
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	4770      	bx	lr
 80037a8:	20003f38 	.word	0x20003f38

080037ac <_sbrk>:
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <_sbrk+0x14>)
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	4602      	mov	r2, r0
 80037b2:	b909      	cbnz	r1, 80037b8 <_sbrk+0xc>
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <_sbrk+0x18>)
 80037b6:	6019      	str	r1, [r3, #0]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	4402      	add	r2, r0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	4770      	bx	lr
 80037c0:	20003de0 	.word	0x20003de0
 80037c4:	20003f3c 	.word	0x20003f3c

080037c8 <_write>:
 80037c8:	4b02      	ldr	r3, [pc, #8]	; (80037d4 <_write+0xc>)
 80037ca:	2258      	movs	r2, #88	; 0x58
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f04f 30ff 	mov.w	r0, #4294967295
 80037d2:	4770      	bx	lr
 80037d4:	20003f38 	.word	0x20003f38

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
