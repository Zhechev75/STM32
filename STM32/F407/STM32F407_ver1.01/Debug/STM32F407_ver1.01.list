
STM32F407_ver1.01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080029a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003eb4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003ec0  20003ec0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d553  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003b5e  00000000  00000000  0003d58f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009312  00000000  00000000  000410ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  0004a400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  0004b218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007ab5  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000057f5  00000000  00000000  00053e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00059632  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002844  00000000  00000000  000596b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002900 	.word	0x08002900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002900 	.word	0x08002900

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vMainTask2>:
	xTaskCreate(vMainTask2, (const char *)"TASK1", 128, NULL, 1, NULL); //configMINIMAL_STACK_SIZE
	//xTaskCreate();
}

void vMainTask2(void *pvParameters)
{
 80004e0:	b508      	push	{r3, lr}
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004e2:	4c05      	ldr	r4, [pc, #20]	; (80004f8 <vMainTask2+0x18>)
 80004e4:	4620      	mov	r0, r4
 80004e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ea:	f000 fdb0 	bl	800104e <HAL_GPIO_TogglePin>
		osDelay(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f001 fbf9 	bl	8001ce6 <osDelay>
 80004f4:	e7f6      	b.n	80004e4 <vMainTask2+0x4>
 80004f6:	bf00      	nop
 80004f8:	40020c00 	.word	0x40020c00

080004fc <vMainUART>:
{
 80004fc:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15);
 80004fe:	4c05      	ldr	r4, [pc, #20]	; (8000514 <vMainUART+0x18>)
 8000500:	4620      	mov	r0, r4
 8000502:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000506:	f000 fda2 	bl	800104e <HAL_GPIO_TogglePin>
		osDelay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f001 fbea 	bl	8001ce6 <osDelay>
 8000512:	e7f5      	b.n	8000500 <vMainUART+0x4>
 8000514:	40020c00 	.word	0x40020c00

08000518 <vMainTaskMake2>:
{
 8000518:	b507      	push	{r0, r1, r2, lr}
	xTaskCreate(vMainTask2, (const char *)"TASK1", 128, NULL, 1, NULL); //configMINIMAL_STACK_SIZE
 800051a:	2300      	movs	r3, #0
 800051c:	2201      	movs	r2, #1
 800051e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <vMainTaskMake2+0x1c>)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <vMainTaskMake2+0x20>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	f001 fed6 	bl	80022d8 <xTaskCreate>
}
 800052c:	b003      	add	sp, #12
 800052e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000532:	bf00      	nop
 8000534:	08002954 	.word	0x08002954
 8000538:	080004e1 	.word	0x080004e1

0800053c <vMainTask1>:
	xTaskCreate(vMainTask1, (const char *)"TASK1", 128, NULL, 1, NULL); //configMINIMAL_STACK_SIZE
	//xTaskCreate();
}

void vMainTask1(void *pvParameters)
{
 800053c:	b508      	push	{r3, lr}
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800053e:	4c05      	ldr	r4, [pc, #20]	; (8000554 <vMainTask1+0x18>)
 8000540:	4620      	mov	r0, r4
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	f000 fd82 	bl	800104e <HAL_GPIO_TogglePin>
		osDelay(200);
 800054a:	20c8      	movs	r0, #200	; 0xc8
 800054c:	f001 fbcb 	bl	8001ce6 <osDelay>
 8000550:	e7f6      	b.n	8000540 <vMainTask1+0x4>
 8000552:	bf00      	nop
 8000554:	40020c00 	.word	0x40020c00

08000558 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 // HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	  osDelay(500);
 800055a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055e:	f001 fbc2 	bl	8001ce6 <osDelay>
 8000562:	e7fa      	b.n	800055a <StartDefaultTask+0x2>

08000564 <vMainUART2>:
  /* USER CODE END 5 */ 
}

/* vMainUART2 function */
void vMainUART2(void const * argument)
{
 8000564:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vMainUART2 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	  osDelay(2000);
 8000566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800056a:	f001 fbbc 	bl	8001ce6 <osDelay>
 800056e:	e7fa      	b.n	8000566 <vMainUART2+0x2>

08000570 <SystemClock_Config>:
{
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2100      	movs	r1, #0
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <SystemClock_Config+0xa0>)
 8000578:	9101      	str	r1, [sp, #4]
 800057a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800057c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000580:	641a      	str	r2, [r3, #64]	; 0x40
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <SystemClock_Config+0xa4>)
 800058e:	9102      	str	r1, [sp, #8]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b2:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005be:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005c0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005c2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c4:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f000 fd47 	bl	8001058 <HAL_RCC_OscConfig>
 80005ca:	4601      	mov	r1, r0
 80005cc:	b100      	cbz	r0, 80005d0 <SystemClock_Config+0x60>
 80005ce:	e7fe      	b.n	80005ce <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005d0:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	240f      	movs	r4, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005de:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f000 feea 	bl	80013b8 <HAL_RCC_ClockConfig>
 80005e4:	4605      	mov	r5, r0
 80005e6:	b100      	cbz	r0, 80005ea <SystemClock_Config+0x7a>
 80005e8:	e7fe      	b.n	80005e8 <SystemClock_Config+0x78>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80005ea:	f000 ff7f 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f6:	f000 fc11 	bl	8000e1c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005fa:	4630      	mov	r0, r6
 80005fc:	f000 fc24 	bl	8000e48 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000600:	462a      	mov	r2, r5
 8000602:	4621      	mov	r1, r4
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 fbc8 	bl	8000d9c <HAL_NVIC_SetPriority>
}
 800060c:	b014      	add	sp, #80	; 0x50
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <startInit>:
{
 8000618:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim7);
 800061a:	4c04      	ldr	r4, [pc, #16]	; (800062c <startInit+0x14>)
 800061c:	4620      	mov	r0, r4
 800061e:	f000 ffa9 	bl	8001574 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 8000622:	4620      	mov	r0, r4
}
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim7);
 8000628:	f000 bfb1 	b.w	800158e <HAL_TIM_Base_Start_IT>
 800062c:	20003e44 	.word	0x20003e44

08000630 <vMainTaskMake>:
{
 8000630:	b507      	push	{r0, r1, r2, lr}
	xTaskCreate(vMainTask1, (const char *)"TASK1", 128, NULL, 1, NULL); //configMINIMAL_STACK_SIZE
 8000632:	2300      	movs	r3, #0
 8000634:	2201      	movs	r2, #1
 8000636:	e88d 000c 	stmia.w	sp, {r2, r3}
 800063a:	4904      	ldr	r1, [pc, #16]	; (800064c <vMainTaskMake+0x1c>)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <vMainTaskMake+0x20>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	f001 fe4a 	bl	80022d8 <xTaskCreate>
}
 8000644:	b003      	add	sp, #12
 8000646:	f85d fb04 	ldr.w	pc, [sp], #4
 800064a:	bf00      	nop
 800064c:	08002954 	.word	0x08002954
 8000650:	0800053d 	.word	0x0800053d

08000654 <main>:
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000658:	2400      	movs	r4, #0
  HAL_Init();
 800065a:	f000 fa27 	bl	8000aac <HAL_Init>
  SystemClock_Config();
 800065e:	f7ff ff87 	bl	8000570 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	4b61      	ldr	r3, [pc, #388]	; (80007e8 <main+0x194>)
 8000664:	9400      	str	r4, [sp, #0]
 8000666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000668:	4860      	ldr	r0, [pc, #384]	; (80007ec <main+0x198>)
  htim6.Instance = TIM6;
 800066a:	4d61      	ldr	r5, [pc, #388]	; (80007f0 <main+0x19c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
 8000672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000674:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	9401      	str	r4, [sp, #4]
 800067e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000680:	f042 0201 	orr.w	r2, r2, #1
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
 8000686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000688:	f002 0201 	and.w	r2, r2, #1
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	9402      	str	r4, [sp, #8]
 8000692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000694:	f042 0208 	orr.w	r2, r2, #8
 8000698:	631a      	str	r2, [r3, #48]	; 0x30
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006a0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006aa:	f000 fccb 	bl	8001044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006b2:	a90d      	add	r1, sp, #52	; 0x34
 80006b4:	484d      	ldr	r0, [pc, #308]	; (80007ec <main+0x198>)
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006b6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006be:	f000 fbe1 	bl	8000e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c6:	4849      	ldr	r0, [pc, #292]	; (80007ec <main+0x198>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006c8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ca:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d2:	f000 fbd7 	bl	8000e84 <HAL_GPIO_Init>
  htim6.Init.Prescaler = 12000;
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <main+0x1a0>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	60ac      	str	r4, [r5, #8]
  htim6.Init.Prescaler = 12000;
 80006da:	f642 68e0 	movw	r8, #12000	; 0x2ee0
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006de:	4628      	mov	r0, r5
  htim6.Init.Prescaler = 12000;
 80006e0:	e885 0108 	stmia.w	r5, {r3, r8}
  htim6.Init.Period = 1;
 80006e4:	60ee      	str	r6, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006e6:	f001 f867 	bl	80017b8 <HAL_TIM_Base_Init>
 80006ea:	b100      	cbz	r0, 80006ee <main+0x9a>
 80006ec:	e7fe      	b.n	80006ec <main+0x98>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006ee:	2720      	movs	r7, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006f2:	a90d      	add	r1, sp, #52	; 0x34
 80006f4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006f6:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006f8:	f001 f878 	bl	80017ec <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	b100      	cbz	r0, 8000700 <main+0xac>
 80006fe:	e7fe      	b.n	80006fe <main+0xaa>
  htim7.Instance = TIM7;
 8000700:	4c3d      	ldr	r4, [pc, #244]	; (80007f8 <main+0x1a4>)
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <main+0x1a8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	60a0      	str	r0, [r4, #8]
  htim7.Init.Prescaler = 12000;
 8000706:	e884 0108 	stmia.w	r4, {r3, r8}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800070a:	4620      	mov	r0, r4
  htim7.Init.Period = 500;
 800070c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000710:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000712:	f001 f851 	bl	80017b8 <HAL_TIM_Base_Init>
 8000716:	b100      	cbz	r0, 800071a <main+0xc6>
 8000718:	e7fe      	b.n	8000718 <main+0xc4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800071c:	a90d      	add	r1, sp, #52	; 0x34
 800071e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000720:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000722:	f001 f863 	bl	80017ec <HAL_TIMEx_MasterConfigSynchronization>
 8000726:	b100      	cbz	r0, 800072a <main+0xd6>
 8000728:	e7fe      	b.n	8000728 <main+0xd4>
  hadc1.Instance = ADC1;
 800072a:	4c35      	ldr	r4, [pc, #212]	; (8000800 <main+0x1ac>)
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <main+0x1b0>)
 800072e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000730:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000734:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000736:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000738:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <main+0x1b4>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073e:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000740:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000742:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000744:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8000746:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000748:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	f000 f9db 	bl	8000b04 <HAL_ADC_Init>
 800074e:	b100      	cbz	r0, 8000752 <main+0xfe>
 8000750:	e7fe      	b.n	8000750 <main+0xfc>
  sConfig.Channel = ADC_CHANNEL_0;
 8000752:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000754:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	a90d      	add	r1, sp, #52	; 0x34
 8000758:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800075a:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	f000 fa76 	bl	8000c4c <HAL_ADC_ConfigChannel>
 8000760:	b100      	cbz	r0, 8000764 <main+0x110>
 8000762:	e7fe      	b.n	8000762 <main+0x10e>
  huart1.Instance = USART1;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <main+0x1b8>)
  huart1.Init.BaudRate = 115200;
 8000766:	492a      	ldr	r1, [pc, #168]	; (8000810 <main+0x1bc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000768:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 800076a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076e:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000772:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000774:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000776:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000778:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800077a:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077c:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077e:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000780:	f001 f980 	bl	8001a84 <HAL_UART_Init>
 8000784:	4607      	mov	r7, r0
 8000786:	b100      	cbz	r0, 800078a <main+0x136>
 8000788:	e7fe      	b.n	8000788 <main+0x134>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800078a:	4c22      	ldr	r4, [pc, #136]	; (8000814 <main+0x1c0>)
  startInit();
 800078c:	f7ff ff44 	bl	8000618 <startInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000792:	ae03      	add	r6, sp, #12
 8000794:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000796:	4625      	mov	r5, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000798:	4639      	mov	r1, r7
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800079a:	f855 3b04 	ldr.w	r3, [r5], #4
 800079e:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007a0:	a803      	add	r0, sp, #12
 80007a2:	f001 fa88 	bl	8001cb6 <osThreadCreate>
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <main+0x1c4>)
 80007a8:	6018      	str	r0, [r3, #0]
  osThreadDef(Uart, vMainUART, osPriorityIdle, 0, 128);
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	ae08      	add	r6, sp, #32
 80007ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007b0:	682b      	ldr	r3, [r5, #0]
 80007b2:	6033      	str	r3, [r6, #0]
  UartHandle = osThreadCreate(osThread(Uart), NULL);
 80007b4:	4639      	mov	r1, r7
 80007b6:	a808      	add	r0, sp, #32
 80007b8:	f001 fa7d 	bl	8001cb6 <osThreadCreate>
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <main+0x1c8>)
  osThreadDef(uart2, vMainUART2, osPriorityIdle, 0, 128);
 80007be:	3418      	adds	r4, #24
  UartHandle = osThreadCreate(osThread(Uart), NULL);
 80007c0:	6018      	str	r0, [r3, #0]
  osThreadDef(uart2, vMainUART2, osPriorityIdle, 0, 128);
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	ad0d      	add	r5, sp, #52	; 0x34
 80007c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	602b      	str	r3, [r5, #0]
  uart2Handle = osThreadCreate(osThread(uart2), NULL);
 80007cc:	4639      	mov	r1, r7
 80007ce:	a80d      	add	r0, sp, #52	; 0x34
 80007d0:	f001 fa71 	bl	8001cb6 <osThreadCreate>
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <main+0x1cc>)
 80007d6:	6018      	str	r0, [r3, #0]
  vMainTaskMake();
 80007d8:	f7ff ff2a 	bl	8000630 <vMainTaskMake>
  vMainTaskMake2();
 80007dc:	f7ff fe9c 	bl	8000518 <vMainTaskMake2>
  osKernelStart();
 80007e0:	f001 fa64 	bl	8001cac <osKernelStart>
 80007e4:	e7fe      	b.n	80007e4 <main+0x190>
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	20003e08 	.word	0x20003e08
 80007f4:	40001000 	.word	0x40001000
 80007f8:	20003e44 	.word	0x20003e44
 80007fc:	40001400 	.word	0x40001400
 8000800:	20003d80 	.word	0x20003d80
 8000804:	40012000 	.word	0x40012000
 8000808:	0f000001 	.word	0x0f000001
 800080c:	20003dc8 	.word	0x20003dc8
 8000810:	40011000 	.word	0x40011000
 8000814:	08002918 	.word	0x08002918
 8000818:	20003d78 	.word	0x20003d78
 800081c:	20003d7c 	.word	0x20003d7c
 8000820:	20003d74 	.word	0x20003d74

08000824 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000824:	6802      	ldr	r2, [r0, #0]
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000828:	429a      	cmp	r2, r3
 800082a:	d101      	bne.n	8000830 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800082c:	f000 b958 	b.w	8000ae0 <HAL_IncTick>
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083a:	2003      	movs	r0, #3
 800083c:	f000 fa9c 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	4611      	mov	r1, r2
 8000844:	f06f 000b 	mvn.w	r0, #11
 8000848:	f000 faa8 	bl	8000d9c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	4611      	mov	r1, r2
 8000850:	f06f 000a 	mvn.w	r0, #10
 8000854:	f000 faa2 	bl	8000d9c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	4611      	mov	r1, r2
 800085c:	f06f 0009 	mvn.w	r0, #9
 8000860:	f000 fa9c 	bl	8000d9c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	4611      	mov	r1, r2
 8000868:	f06f 0004 	mvn.w	r0, #4
 800086c:	f000 fa96 	bl	8000d9c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	4611      	mov	r1, r2
 8000874:	f06f 0003 	mvn.w	r0, #3
 8000878:	f000 fa90 	bl	8000d9c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	210f      	movs	r1, #15
 8000880:	f06f 0001 	mvn.w	r0, #1
 8000884:	f000 fa8a 	bl	8000d9c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	210f      	movs	r1, #15
 800088c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000894:	f000 ba82 	b.w	8000d9c <HAL_NVIC_SetPriority>

08000898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800089a:	6802      	ldr	r2, [r0, #0]
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_ADC_MspInit+0x3c>)
 800089e:	429a      	cmp	r2, r3
 80008a0:	d115      	bne.n	80008ce <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008a2:	2100      	movs	r1, #0
 80008a4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80008a8:	9100      	str	r1, [sp, #0]
 80008aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008b2:	645a      	str	r2, [r3, #68]	; 0x44
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c0:	2301      	movs	r3, #1
 80008c2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c6:	2303      	movs	r3, #3
 80008c8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f000 fadb 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ce:	b007      	add	sp, #28
 80008d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008d4:	40012000 	.word	0x40012000
 80008d8:	40020000 	.word	0x40020000

080008dc <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 80008de:	6803      	ldr	r3, [r0, #0]
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_TIM_Base_MspInit+0x60>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d115      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <HAL_TIM_Base_MspInit+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80008ee:	f041 0110 	orr.w	r1, r1, #16
 80008f2:	6419      	str	r1, [r3, #64]	; 0x40
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000900:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000902:	f000 fa4b 	bl	8000d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000906:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000908:	f000 fa7c 	bl	8000e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800090c:	b003      	add	sp, #12
 800090e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <HAL_TIM_Base_MspInit+0x68>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d1f9      	bne.n	800090c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_TIM_Base_MspInit+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000920:	f041 0120 	orr.w	r1, r1, #32
 8000924:	6419      	str	r1, [r3, #64]	; 0x40
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800092e:	2037      	movs	r0, #55	; 0x37
 8000930:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000932:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000934:	f000 fa32 	bl	8000d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000938:	2037      	movs	r0, #55	; 0x37
 800093a:	e7e5      	b.n	8000908 <HAL_TIM_Base_MspInit+0x2c>
 800093c:	40001000 	.word	0x40001000
 8000940:	40023800 	.word	0x40023800
 8000944:	40001400 	.word	0x40001400

08000948 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800094a:	6802      	ldr	r2, [r0, #0]
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0x58>)
 800094e:	429a      	cmp	r2, r3
{
 8000950:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8000952:	d123      	bne.n	800099c <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000954:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000958:	2400      	movs	r4, #0
 800095a:	9400      	str	r4, [sp, #0]
 800095c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000960:	f041 0110 	orr.w	r1, r1, #16
 8000964:	6459      	str	r1, [r3, #68]	; 0x44
 8000966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000970:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000974:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097a:	2301      	movs	r3, #1
 800097c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000984:	2307      	movs	r3, #7
 8000986:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f000 fa7c 	bl	8000e84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800098c:	2025      	movs	r0, #37	; 0x25
 800098e:	4622      	mov	r2, r4
 8000990:	2105      	movs	r1, #5
 8000992:	f000 fa03 	bl	8000d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000996:	2025      	movs	r0, #37	; 0x25
 8000998:	f000 fa34 	bl	8000e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800099c:	b006      	add	sp, #24
 800099e:	bd10      	pop	{r4, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80009aa:	4601      	mov	r1, r0
{
 80009ac:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80009ae:	2200      	movs	r2, #0
 80009b0:	2019      	movs	r0, #25
 80009b2:	f000 f9f3 	bl	8000d9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80009b6:	2019      	movs	r0, #25
 80009b8:	f000 fa24 	bl	8000e04 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009bc:	2500      	movs	r5, #0
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x68>)
 80009c0:	9502      	str	r5, [sp, #8]
 80009c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c4:	4c13      	ldr	r4, [pc, #76]	; (8000a14 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	645a      	str	r2, [r3, #68]	; 0x44
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d4:	a901      	add	r1, sp, #4
 80009d6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009d8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009da:	f000 fdad 	bl	8001538 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009de:	f000 fd9b 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <HAL_InitTick+0x70>)
 80009e4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009e6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80009ea:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_InitTick+0x74>)
 80009ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80009f2:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80009f4:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009f6:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80009f8:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009fc:	f000 fedc 	bl	80017b8 <HAL_TIM_Base_Init>
 8000a00:	b920      	cbnz	r0, 8000a0c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a02:	4620      	mov	r0, r4
 8000a04:	f000 fdc3 	bl	800158e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000a08:	b009      	add	sp, #36	; 0x24
 8000a0a:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	e7fb      	b.n	8000a08 <HAL_InitTick+0x60>
 8000a10:	40023800 	.word	0x40023800
 8000a14:	20003e80 	.word	0x20003e80
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	000f4240 	.word	0x000f4240

08000a20 <NMI_Handler>:
 8000a20:	4770      	bx	lr

08000a22 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler>

08000a24 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler>

08000a26 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler>

08000a28 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler>

08000a2a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000a2c:	f001 b963 	b.w	8001cf6 <osSystickHandler>

08000a30 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a30:	4801      	ldr	r0, [pc, #4]	; (8000a38 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000a32:	f000 bdbb 	b.w	80015ac <HAL_TIM_IRQHandler>
 8000a36:	bf00      	nop
 8000a38:	20003e80 	.word	0x20003e80

08000a3c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a3c:	4801      	ldr	r0, [pc, #4]	; (8000a44 <USART1_IRQHandler+0x8>)
 8000a3e:	f001 b88d 	b.w	8001b5c <HAL_UART_IRQHandler>
 8000a42:	bf00      	nop
 8000a44:	20003dc8 	.word	0x20003dc8

08000a48 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <TIM6_DAC_IRQHandler+0x8>)
 8000a4a:	f000 bdaf 	b.w	80015ac <HAL_TIM_IRQHandler>
 8000a4e:	bf00      	nop
 8000a50:	20003e08 	.word	0x20003e08

08000a54 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a54:	4801      	ldr	r0, [pc, #4]	; (8000a5c <TIM7_IRQHandler+0x8>)
 8000a56:	f000 bda9 	b.w	80015ac <HAL_TIM_IRQHandler>
 8000a5a:	bf00      	nop
 8000a5c:	20003e44 	.word	0x20003e44

08000a60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	490f      	ldr	r1, [pc, #60]	; (8000aa0 <SystemInit+0x40>)
 8000a62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <SystemInit+0x44>)
 8000a70:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a72:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000a74:	f042 0201 	orr.w	r2, r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a7a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a86:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x48>)
 8000a8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a92:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a94:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a9a:	608b      	str	r3, [r1, #8]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	24003010 	.word	0x24003010

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_Init+0x30>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ab6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000abe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ac6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f955 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ff6a 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff feb0 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ad8:	2000      	movs	r0, #0
 8000ada:	bd08      	pop	{r3, pc}
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <HAL_IncTick+0x10>)
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_IncTick+0x14>)
 8000ae4:	6811      	ldr	r1, [r2, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	440b      	add	r3, r1
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20003ebc 	.word	0x20003ebc
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000af8:	4b01      	ldr	r3, [pc, #4]	; (8000b00 <HAL_GetTick+0x8>)
 8000afa:	6818      	ldr	r0, [r3, #0]
}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20003ebc 	.word	0x20003ebc

08000b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b04:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b06:	4604      	mov	r4, r0
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	f000 8099 	beq.w	8000c40 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b10:	b923      	cbnz	r3, 8000b1c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b12:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b18:	f7ff febe 	bl	8000898 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b1e:	06db      	lsls	r3, r3, #27
 8000b20:	f100 808c 	bmi.w	8000c3c <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b2a:	f023 0302 	bic.w	r3, r3, #2
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b34:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <HAL_ADC_Init+0x140>)
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000b3c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	6861      	ldr	r1, [r4, #4]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b46:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b48:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b5a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b5c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b5e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b62:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b6a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b6c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b7a:	4933      	ldr	r1, [pc, #204]	; (8000c48 <HAL_ADC_Init+0x144>)
 8000b7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	d050      	beq.n	8000c24 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b82:	6899      	ldr	r1, [r3, #8]
 8000b84:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000b88:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b8a:	6899      	ldr	r1, [r3, #8]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b90:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b9e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ba0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000ba2:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ba4:	f022 0202 	bic.w	r2, r2, #2
 8000ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000bb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bb2:	6a22      	ldr	r2, [r4, #32]
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d03d      	beq.n	8000c34 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bb8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bc0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000bc8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	3901      	subs	r1, #1
 8000bce:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000bd6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000bd8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be0:	3901      	subs	r1, #1
 8000be2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000be8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000bea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000bec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000bf8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000bfa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000bfc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c04:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000c06:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c08:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000c0c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000c0e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000c22:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c32:	e7b4      	b.n	8000b9e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c3a:	e7ca      	b.n	8000bd2 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	e7ed      	b.n	8000c1c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000c40:	2001      	movs	r0, #1
}
 8000c42:	bd10      	pop	{r4, pc}
 8000c44:	40012300 	.word	0x40012300
 8000c48:	0f000001 	.word	0x0f000001

08000c4c <HAL_ADC_ConfigChannel>:
{
 8000c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000c52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	f000 8083 	beq.w	8000d62 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c5c:	680d      	ldr	r5, [r1, #0]
 8000c5e:	6804      	ldr	r4, [r0, #0]
 8000c60:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000c62:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c64:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000c66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000c6a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c6c:	d92a      	bls.n	8000cc4 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c6e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000c72:	68e7      	ldr	r7, [r4, #12]
 8000c74:	3b1e      	subs	r3, #30
 8000c76:	f04f 0e07 	mov.w	lr, #7
 8000c7a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c7e:	ea27 070e 	bic.w	r7, r7, lr
 8000c82:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c84:	68e7      	ldr	r7, [r4, #12]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	433b      	orrs	r3, r7
 8000c8c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000c8e:	684a      	ldr	r2, [r1, #4]
 8000c90:	2a06      	cmp	r2, #6
 8000c92:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000c96:	d825      	bhi.n	8000ce4 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c98:	4413      	add	r3, r2
 8000c9a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000c9c:	1f59      	subs	r1, r3, #5
 8000c9e:	231f      	movs	r3, #31
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	ea27 0303 	bic.w	r3, r7, r3
 8000ca6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ca8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000caa:	fa06 f101 	lsl.w	r1, r6, r1
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_ADC_ConfigChannel+0x11c>)
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	d034      	beq.n	8000d22 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000cbe:	4618      	mov	r0, r3
}
 8000cc0:	b003      	add	sp, #12
 8000cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cc4:	6927      	ldr	r7, [r4, #16]
 8000cc6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000cca:	f04f 0e07 	mov.w	lr, #7
 8000cce:	fa0e fe03 	lsl.w	lr, lr, r3
 8000cd2:	ea27 070e 	bic.w	r7, r7, lr
 8000cd6:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd8:	6927      	ldr	r7, [r4, #16]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	433b      	orrs	r3, r7
 8000ce0:	6123      	str	r3, [r4, #16]
 8000ce2:	e7d4      	b.n	8000c8e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000ce4:	2a0c      	cmp	r2, #12
 8000ce6:	d80e      	bhi.n	8000d06 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ce8:	4413      	add	r3, r2
 8000cea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000cec:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000cf0:	231f      	movs	r3, #31
 8000cf2:	4093      	lsls	r3, r2
 8000cf4:	ea21 0303 	bic.w	r3, r1, r3
 8000cf8:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cfc:	fa06 f202 	lsl.w	r2, r6, r2
 8000d00:	431a      	orrs	r2, r3
 8000d02:	6322      	str	r2, [r4, #48]	; 0x30
 8000d04:	e7d5      	b.n	8000cb2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d06:	4413      	add	r3, r2
 8000d08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d0a:	3b41      	subs	r3, #65	; 0x41
 8000d0c:	221f      	movs	r2, #31
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	ea21 0202 	bic.w	r2, r1, r2
 8000d14:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d18:	fa06 f103 	lsl.w	r1, r6, r3
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000d20:	e7c7      	b.n	8000cb2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d22:	2d12      	cmp	r5, #18
 8000d24:	d104      	bne.n	8000d30 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_ADC_ConfigChannel+0x120>)
 8000d28:	6853      	ldr	r3, [r2, #4]
 8000d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d30:	f1a5 0310 	sub.w	r3, r5, #16
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d8bf      	bhi.n	8000cb8 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_ADC_ConfigChannel+0x120>)
 8000d3a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d3c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d42:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d44:	d1b8      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_ADC_ConfigChannel+0x124>)
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_ADC_ConfigChannel+0x128>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d50:	230a      	movs	r3, #10
 8000d52:	4353      	muls	r3, r2
        counter--;
 8000d54:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0ad      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000d5c:	9b01      	ldr	r3, [sp, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	e7f8      	b.n	8000d54 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000d62:	2002      	movs	r0, #2
 8000d64:	e7ac      	b.n	8000cc0 <HAL_ADC_ConfigChannel+0x74>
 8000d66:	bf00      	nop
 8000d68:	40012000 	.word	0x40012000
 8000d6c:	40012300 	.word	0x40012300
 8000d70:	20000000 	.word	0x20000000
 8000d74:	000f4240 	.word	0x000f4240

08000d78 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d7a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d80:	041b      	lsls	r3, r3, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d88:	0200      	lsls	r0, r0, #8
 8000d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d92:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d94:	60d3      	str	r3, [r2, #12]
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b530      	push	{r4, r5, lr}
 8000da0:	68dc      	ldr	r4, [r3, #12]
 8000da2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	bf28      	it	cs
 8000db0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 0501 	mov.w	r5, #1
 8000db8:	fa05 f303 	lsl.w	r3, r5, r3
 8000dbc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc0:	bf8c      	ite	hi
 8000dc2:	3c03      	subhi	r4, #3
 8000dc4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc6:	4019      	ands	r1, r3
 8000dc8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dca:	fa05 f404 	lsl.w	r4, r5, r4
 8000dce:	3c01      	subs	r4, #1
 8000dd0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000dd2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	ea42 0201 	orr.w	r2, r2, r1
 8000dd8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	bfaf      	iteee	ge
 8000dde:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	f000 000f 	andlt.w	r0, r0, #15
 8000de6:	4b06      	ldrlt	r3, [pc, #24]	; (8000e00 <HAL_NVIC_SetPriority+0x64>)
 8000de8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	bfa5      	ittet	ge
 8000dec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000df0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000df8:	bd30      	pop	{r4, r5, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	e000ed14 	.word	0xe000ed14

08000e04 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e04:	0942      	lsrs	r2, r0, #5
 8000e06:	2301      	movs	r3, #1
 8000e08:	f000 001f 	and.w	r0, r0, #31
 8000e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <HAL_NVIC_EnableIRQ+0x14>)
 8000e12:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e22:	d20a      	bcs.n	8000e3a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	21f0      	movs	r1, #240	; 0xf0
 8000e2c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e4a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e4c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e4e:	bf0c      	ite	eq
 8000e50:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e54:	f022 0204 	bicne.w	r2, r2, #4
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e60:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d003      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e72:	2305      	movs	r3, #5
 8000e74:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000e80:	2000      	movs	r0, #0
}
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e88:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800103c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e90:	4a68      	ldr	r2, [pc, #416]	; (8001034 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001040 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e98:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e9a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000ea0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ea8:	45b6      	cmp	lr, r6
 8000eaa:	f040 80ae 	bne.w	800100a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	684c      	ldr	r4, [r1, #4]
 8000eb0:	f024 0710 	bic.w	r7, r4, #16
 8000eb4:	2f02      	cmp	r7, #2
 8000eb6:	d116      	bne.n	8000ee6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ebc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ecc:	f04f 0c0f 	mov.w	ip, #15
 8000ed0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ed4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	690d      	ldr	r5, [r1, #16]
 8000eda:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ede:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ee6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000eec:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef0:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ef4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efe:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f02:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f0a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0e:	d811      	bhi.n	8000f34 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000f10:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f12:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	68cf      	ldr	r7, [r1, #12]
 8000f18:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f1c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f20:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f22:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f28:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f2c:	409f      	lsls	r7, r3
 8000f2e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f32:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f34:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	688f      	ldr	r7, [r1, #8]
 8000f3a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f3e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f40:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f42:	00e5      	lsls	r5, r4, #3
 8000f44:	d561      	bpl.n	800100a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	f04f 0b00 	mov.w	fp, #0
 8000f4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f4e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	4d39      	ldr	r5, [pc, #228]	; (8001038 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f58:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f5c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f60:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f64:	9703      	str	r7, [sp, #12]
 8000f66:	9f03      	ldr	r7, [sp, #12]
 8000f68:	f023 0703 	bic.w	r7, r3, #3
 8000f6c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f70:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f78:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f7c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f80:	f04f 0e0f 	mov.w	lr, #15
 8000f84:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f88:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f8a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	d043      	beq.n	8001018 <HAL_GPIO_Init+0x194>
 8000f90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f94:	42a8      	cmp	r0, r5
 8000f96:	d041      	beq.n	800101c <HAL_GPIO_Init+0x198>
 8000f98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9c:	42a8      	cmp	r0, r5
 8000f9e:	d03f      	beq.n	8001020 <HAL_GPIO_Init+0x19c>
 8000fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa4:	42a8      	cmp	r0, r5
 8000fa6:	d03d      	beq.n	8001024 <HAL_GPIO_Init+0x1a0>
 8000fa8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fac:	42a8      	cmp	r0, r5
 8000fae:	d03b      	beq.n	8001028 <HAL_GPIO_Init+0x1a4>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d03b      	beq.n	800102c <HAL_GPIO_Init+0x1a8>
 8000fb4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000fb8:	42a8      	cmp	r0, r5
 8000fba:	d039      	beq.n	8001030 <HAL_GPIO_Init+0x1ac>
 8000fbc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fc0:	42a8      	cmp	r0, r5
 8000fc2:	bf14      	ite	ne
 8000fc4:	2508      	movne	r5, #8
 8000fc6:	2507      	moveq	r5, #7
 8000fc8:	fa05 f50c 	lsl.w	r5, r5, ip
 8000fcc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000fd2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000fda:	bf0c      	ite	eq
 8000fdc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fde:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000fe0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000fe2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	bf0c      	ite	eq
 8000fea:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fec:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000fee:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	bf0c      	ite	eq
 8000ff8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ffa:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000ffc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000ffe:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001000:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001002:	bf54      	ite	pl
 8001004:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001006:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001008:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	3301      	adds	r3, #1
 800100c:	2b10      	cmp	r3, #16
 800100e:	f47f af44 	bne.w	8000e9a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001012:	b005      	add	sp, #20
 8001014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001018:	465d      	mov	r5, fp
 800101a:	e7d5      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 800101c:	2501      	movs	r5, #1
 800101e:	e7d3      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 8001020:	2502      	movs	r5, #2
 8001022:	e7d1      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 8001024:	2503      	movs	r5, #3
 8001026:	e7cf      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 8001028:	2504      	movs	r5, #4
 800102a:	e7cd      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 800102c:	2505      	movs	r5, #5
 800102e:	e7cb      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 8001030:	2506      	movs	r5, #6
 8001032:	e7c9      	b.n	8000fc8 <HAL_GPIO_Init+0x144>
 8001034:	40013c00 	.word	0x40013c00
 8001038:	40020000 	.word	0x40020000
 800103c:	40023800 	.word	0x40023800
 8001040:	40021400 	.word	0x40021400

08001044 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	b10a      	cbz	r2, 800104a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001046:	6181      	str	r1, [r0, #24]
 8001048:	4770      	bx	lr
 800104a:	0409      	lsls	r1, r1, #16
 800104c:	e7fb      	b.n	8001046 <HAL_GPIO_WritePin+0x2>

0800104e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800104e:	6943      	ldr	r3, [r0, #20]
 8001050:	4059      	eors	r1, r3
 8001052:	6141      	str	r1, [r0, #20]
 8001054:	4770      	bx	lr
	...

08001058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800105c:	4604      	mov	r4, r0
 800105e:	b918      	cbnz	r0, 8001068 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001060:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001062:	b002      	add	sp, #8
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001068:	6803      	ldr	r3, [r0, #0]
 800106a:	07dd      	lsls	r5, r3, #31
 800106c:	d410      	bmi.n	8001090 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	0798      	lsls	r0, r3, #30
 8001072:	d458      	bmi.n	8001126 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	071a      	lsls	r2, r3, #28
 8001078:	f100 809a 	bmi.w	80011b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	075b      	lsls	r3, r3, #29
 8001080:	f100 80b8 	bmi.w	80011f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001084:	69a2      	ldr	r2, [r4, #24]
 8001086:	2a00      	cmp	r2, #0
 8001088:	f040 8119 	bne.w	80012be <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800108c:	2000      	movs	r0, #0
 800108e:	e7e8      	b.n	8001062 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001090:	4ba6      	ldr	r3, [pc, #664]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	f002 020c 	and.w	r2, r2, #12
 8001098:	2a04      	cmp	r2, #4
 800109a:	d007      	beq.n	80010ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	2a08      	cmp	r2, #8
 80010a4:	d10a      	bne.n	80010bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	0259      	lsls	r1, r3, #9
 80010aa:	d507      	bpl.n	80010bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	4b9f      	ldr	r3, [pc, #636]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	039a      	lsls	r2, r3, #14
 80010b2:	d5dc      	bpl.n	800106e <HAL_RCC_OscConfig+0x16>
 80010b4:	6863      	ldr	r3, [r4, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1d9      	bne.n	800106e <HAL_RCC_OscConfig+0x16>
 80010ba:	e7d1      	b.n	8001060 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	4d9b      	ldr	r5, [pc, #620]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d111      	bne.n	80010ea <HAL_RCC_OscConfig+0x92>
 80010c6:	682b      	ldr	r3, [r5, #0]
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010ce:	f7ff fd13 	bl	8000af8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4d96      	ldr	r5, [pc, #600]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80010d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	039b      	lsls	r3, r3, #14
 80010da:	d4c8      	bmi.n	800106e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fd0c 	bl	8000af8 <HAL_GetTick>
 80010e0:	1b80      	subs	r0, r0, r6
 80010e2:	2864      	cmp	r0, #100	; 0x64
 80010e4:	d9f7      	bls.n	80010d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80010e6:	2003      	movs	r0, #3
 80010e8:	e7bb      	b.n	8001062 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ee:	d104      	bne.n	80010fa <HAL_RCC_OscConfig+0xa2>
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f6:	602b      	str	r3, [r5, #0]
 80010f8:	e7e5      	b.n	80010c6 <HAL_RCC_OscConfig+0x6e>
 80010fa:	682a      	ldr	r2, [r5, #0]
 80010fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001100:	602a      	str	r2, [r5, #0]
 8001102:	682a      	ldr	r2, [r5, #0]
 8001104:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001108:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1df      	bne.n	80010ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800110e:	f7ff fcf3 	bl	8000af8 <HAL_GetTick>
 8001112:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	039f      	lsls	r7, r3, #14
 8001118:	d5a9      	bpl.n	800106e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111a:	f7ff fced 	bl	8000af8 <HAL_GetTick>
 800111e:	1b80      	subs	r0, r0, r6
 8001120:	2864      	cmp	r0, #100	; 0x64
 8001122:	d9f7      	bls.n	8001114 <HAL_RCC_OscConfig+0xbc>
 8001124:	e7df      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001126:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	f012 0f0c 	tst.w	r2, #12
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001136:	2a08      	cmp	r2, #8
 8001138:	d111      	bne.n	800115e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	025e      	lsls	r6, r3, #9
 800113e:	d40e      	bmi.n	800115e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001140:	4b7a      	ldr	r3, [pc, #488]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	0795      	lsls	r5, r2, #30
 8001146:	d502      	bpl.n	800114e <HAL_RCC_OscConfig+0xf6>
 8001148:	68e2      	ldr	r2, [r4, #12]
 800114a:	2a01      	cmp	r2, #1
 800114c:	d188      	bne.n	8001060 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	6921      	ldr	r1, [r4, #16]
 8001152:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001156:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800115a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115c:	e78a      	b.n	8001074 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800115e:	68e2      	ldr	r2, [r4, #12]
 8001160:	4b73      	ldr	r3, [pc, #460]	; (8001330 <HAL_RCC_OscConfig+0x2d8>)
 8001162:	b1b2      	cbz	r2, 8001192 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001168:	f7ff fcc6 	bl	8000af8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4d6f      	ldr	r5, [pc, #444]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800116e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	0798      	lsls	r0, r3, #30
 8001174:	d507      	bpl.n	8001186 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	6922      	ldr	r2, [r4, #16]
 800117a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800117e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001182:	602b      	str	r3, [r5, #0]
 8001184:	e776      	b.n	8001074 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fcb7 	bl	8000af8 <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	2802      	cmp	r0, #2
 800118e:	d9ef      	bls.n	8001170 <HAL_RCC_OscConfig+0x118>
 8001190:	e7a9      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001192:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001194:	f7ff fcb0 	bl	8000af8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001198:	4d64      	ldr	r5, [pc, #400]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800119a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	0799      	lsls	r1, r3, #30
 80011a0:	f57f af68 	bpl.w	8001074 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fca8 	bl	8000af8 <HAL_GetTick>
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d9f6      	bls.n	800119c <HAL_RCC_OscConfig+0x144>
 80011ae:	e79a      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b0:	6962      	ldr	r2, [r4, #20]
 80011b2:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x2dc>)
 80011b4:	b17a      	cbz	r2, 80011d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011ba:	f7ff fc9d 	bl	8000af8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	4d5b      	ldr	r5, [pc, #364]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011c4:	079f      	lsls	r7, r3, #30
 80011c6:	f53f af59 	bmi.w	800107c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc95 	bl	8000af8 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2802      	cmp	r0, #2
 80011d2:	d9f6      	bls.n	80011c2 <HAL_RCC_OscConfig+0x16a>
 80011d4:	e787      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80011d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011d8:	f7ff fc8e 	bl	8000af8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4d53      	ldr	r5, [pc, #332]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011e2:	0798      	lsls	r0, r3, #30
 80011e4:	f57f af4a 	bpl.w	800107c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc86 	bl	8000af8 <HAL_GetTick>
 80011ec:	1b80      	subs	r0, r0, r6
 80011ee:	2802      	cmp	r0, #2
 80011f0:	d9f6      	bls.n	80011e0 <HAL_RCC_OscConfig+0x188>
 80011f2:	e778      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 80011f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011fc:	d128      	bne.n	8001250 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	9201      	str	r2, [sp, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001212:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	4d48      	ldr	r5, [pc, #288]	; (8001338 <HAL_RCC_OscConfig+0x2e0>)
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	05d9      	lsls	r1, r3, #23
 800121a:	d51b      	bpl.n	8001254 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	68a3      	ldr	r3, [r4, #8]
 800121e:	4d43      	ldr	r5, [pc, #268]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 8001220:	2b01      	cmp	r3, #1
 8001222:	d127      	bne.n	8001274 <HAL_RCC_OscConfig+0x21c>
 8001224:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800122c:	f7ff fc64 	bl	8000af8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001230:	4d3e      	ldr	r5, [pc, #248]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001232:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001234:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800123a:	079b      	lsls	r3, r3, #30
 800123c:	d539      	bpl.n	80012b2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800123e:	2e00      	cmp	r6, #0
 8001240:	f43f af20 	beq.w	8001084 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 8001246:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	e719      	b.n	8001084 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001250:	2600      	movs	r6, #0
 8001252:	e7df      	b.n	8001214 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800125c:	f7ff fc4c 	bl	8000af8 <HAL_GetTick>
 8001260:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	05da      	lsls	r2, r3, #23
 8001266:	d4d9      	bmi.n	800121c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001268:	f7ff fc46 	bl	8000af8 <HAL_GetTick>
 800126c:	1bc0      	subs	r0, r0, r7
 800126e:	2802      	cmp	r0, #2
 8001270:	d9f7      	bls.n	8001262 <HAL_RCC_OscConfig+0x20a>
 8001272:	e738      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	2b05      	cmp	r3, #5
 8001276:	d104      	bne.n	8001282 <HAL_RCC_OscConfig+0x22a>
 8001278:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	672b      	str	r3, [r5, #112]	; 0x70
 8001280:	e7d0      	b.n	8001224 <HAL_RCC_OscConfig+0x1cc>
 8001282:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	672a      	str	r2, [r5, #112]	; 0x70
 800128a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800128c:	f022 0204 	bic.w	r2, r2, #4
 8001290:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ca      	bne.n	800122c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001296:	f7ff fc2f 	bl	8000af8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800129e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012a2:	0798      	lsls	r0, r3, #30
 80012a4:	d5cb      	bpl.n	800123e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fc27 	bl	8000af8 <HAL_GetTick>
 80012aa:	1bc0      	subs	r0, r0, r7
 80012ac:	4540      	cmp	r0, r8
 80012ae:	d9f7      	bls.n	80012a0 <HAL_RCC_OscConfig+0x248>
 80012b0:	e719      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fc21 	bl	8000af8 <HAL_GetTick>
 80012b6:	1bc0      	subs	r0, r0, r7
 80012b8:	4540      	cmp	r0, r8
 80012ba:	d9bd      	bls.n	8001238 <HAL_RCC_OscConfig+0x1e0>
 80012bc:	e713      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012be:	4d1b      	ldr	r5, [pc, #108]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
 80012c0:	68ab      	ldr	r3, [r5, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	f43f aeca 	beq.w	8001060 <HAL_RCC_OscConfig+0x8>
 80012cc:	4e1b      	ldr	r6, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x2e4>)
 80012ce:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012d2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d4:	d134      	bne.n	8001340 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80012d6:	f7ff fc0f 	bl	8000af8 <HAL_GetTick>
 80012da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	0199      	lsls	r1, r3, #6
 80012e0:	d41e      	bmi.n	8001320 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012e2:	6a22      	ldr	r2, [r4, #32]
 80012e4:	69e3      	ldr	r3, [r4, #28]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f6:	4c0d      	ldr	r4, [pc, #52]	; (800132c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012f8:	0852      	lsrs	r2, r2, #1
 80012fa:	3a01      	subs	r2, #1
 80012fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001300:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001302:	2301      	movs	r3, #1
 8001304:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001306:	f7ff fbf7 	bl	8000af8 <HAL_GetTick>
 800130a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	019a      	lsls	r2, r3, #6
 8001310:	f53f aebc 	bmi.w	800108c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fbf0 	bl	8000af8 <HAL_GetTick>
 8001318:	1b40      	subs	r0, r0, r5
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x2b4>
 800131e:	e6e2      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fbea 	bl	8000af8 <HAL_GetTick>
 8001324:	1bc0      	subs	r0, r0, r7
 8001326:	2802      	cmp	r0, #2
 8001328:	d9d8      	bls.n	80012dc <HAL_RCC_OscConfig+0x284>
 800132a:	e6dc      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
 8001338:	40007000 	.word	0x40007000
 800133c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001340:	f7ff fbda 	bl	8000af8 <HAL_GetTick>
 8001344:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	f57f ae9f 	bpl.w	800108c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fbd3 	bl	8000af8 <HAL_GetTick>
 8001352:	1b00      	subs	r0, r0, r4
 8001354:	2802      	cmp	r0, #2
 8001356:	d9f6      	bls.n	8001346 <HAL_RCC_OscConfig+0x2ee>
 8001358:	e6c5      	b.n	80010e6 <HAL_RCC_OscConfig+0x8e>
 800135a:	bf00      	nop

0800135c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800135c:	4913      	ldr	r1, [pc, #76]	; (80013ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800135e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001360:	688b      	ldr	r3, [r1, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d003      	beq.n	8001372 <HAL_RCC_GetSysClockFreq+0x16>
 800136a:	2b08      	cmp	r3, #8
 800136c:	d003      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800136e:	4810      	ldr	r0, [pc, #64]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001370:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001374:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001376:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001378:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800137c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001380:	bf14      	ite	ne
 8001382:	480c      	ldrne	r0, [pc, #48]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001384:	480a      	ldreq	r0, [pc, #40]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001386:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800138a:	bf18      	it	ne
 800138c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001392:	fba1 0100 	umull	r0, r1, r1, r0
 8001396:	f7fe ff1b 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <HAL_RCC_GetSysClockFreq+0x50>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013a2:	3301      	adds	r3, #1
 80013a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013aa:	bd08      	pop	{r3, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	00f42400 	.word	0x00f42400
 80013b4:	007a1200 	.word	0x007a1200

080013b8 <HAL_RCC_ClockConfig>:
{
 80013b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013be:	4604      	mov	r4, r0
 80013c0:	b910      	cbnz	r0, 80013c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013c2:	2001      	movs	r0, #1
 80013c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <HAL_RCC_ClockConfig+0x124>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f002 020f 	and.w	r2, r2, #15
 80013d0:	428a      	cmp	r2, r1
 80013d2:	d328      	bcc.n	8001426 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	6821      	ldr	r1, [r4, #0]
 80013d6:	078f      	lsls	r7, r1, #30
 80013d8:	d42d      	bmi.n	8001436 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013da:	07c8      	lsls	r0, r1, #31
 80013dc:	d440      	bmi.n	8001460 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_ClockConfig+0x124>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f002 020f 	and.w	r2, r2, #15
 80013e6:	4295      	cmp	r5, r2
 80013e8:	d366      	bcc.n	80014b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ea:	6822      	ldr	r2, [r4, #0]
 80013ec:	0751      	lsls	r1, r2, #29
 80013ee:	d46c      	bmi.n	80014ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	0713      	lsls	r3, r2, #28
 80013f2:	d507      	bpl.n	8001404 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f4:	4a3a      	ldr	r2, [pc, #232]	; (80014e0 <HAL_RCC_ClockConfig+0x128>)
 80013f6:	6921      	ldr	r1, [r4, #16]
 80013f8:	6893      	ldr	r3, [r2, #8]
 80013fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001402:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001404:	f7ff ffaa 	bl	800135c <HAL_RCC_GetSysClockFreq>
 8001408:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <HAL_RCC_ClockConfig+0x128>)
 800140a:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <HAL_RCC_ClockConfig+0x12c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	40d8      	lsrs	r0, r3
 8001416:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_RCC_ClockConfig+0x130>)
 8001418:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fac4 	bl	80009a8 <HAL_InitTick>
  return HAL_OK;
 8001420:	2000      	movs	r0, #0
 8001422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	4299      	cmp	r1, r3
 8001432:	d1c6      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xa>
 8001434:	e7ce      	b.n	80013d4 <HAL_RCC_ClockConfig+0x1c>
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	bf1e      	ittt	ne
 800143e:	689a      	ldrne	r2, [r3, #8]
 8001440:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001444:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001446:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001448:	bf42      	ittt	mi
 800144a:	689a      	ldrmi	r2, [r3, #8]
 800144c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001450:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	68a0      	ldr	r0, [r4, #8]
 8001456:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800145a:	4302      	orrs	r2, r0
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	e7bc      	b.n	80013da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001460:	6862      	ldr	r2, [r4, #4]
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_RCC_ClockConfig+0x128>)
 8001464:	2a01      	cmp	r2, #1
 8001466:	d11d      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	d0a8      	beq.n	80013c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001470:	4e1b      	ldr	r6, [pc, #108]	; (80014e0 <HAL_RCC_ClockConfig+0x128>)
 8001472:	68b3      	ldr	r3, [r6, #8]
 8001474:	f023 0303 	bic.w	r3, r3, #3
 8001478:	4313      	orrs	r3, r2
 800147a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800147c:	f7ff fb3c 	bl	8000af8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001484:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	68b3      	ldr	r3, [r6, #8]
 8001488:	6862      	ldr	r2, [r4, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001492:	d0a4      	beq.n	80013de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fb30 	bl	8000af8 <HAL_GetTick>
 8001498:	1bc0      	subs	r0, r0, r7
 800149a:	4540      	cmp	r0, r8
 800149c:	d9f3      	bls.n	8001486 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800149e:	2003      	movs	r0, #3
}
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a4:	1e91      	subs	r1, r2, #2
 80014a6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	d802      	bhi.n	80014b2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014b0:	e7dd      	b.n	800146e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	f013 0f02 	tst.w	r3, #2
 80014b6:	e7da      	b.n	800146e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b8:	b2ea      	uxtb	r2, r5
 80014ba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	429d      	cmp	r5, r3
 80014c4:	f47f af7d 	bne.w	80013c2 <HAL_RCC_ClockConfig+0xa>
 80014c8:	e78f      	b.n	80013ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <HAL_RCC_ClockConfig+0x128>)
 80014cc:	68e0      	ldr	r0, [r4, #12]
 80014ce:	688b      	ldr	r3, [r1, #8]
 80014d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014d4:	4303      	orrs	r3, r0
 80014d6:	608b      	str	r3, [r1, #8]
 80014d8:	e78a      	b.n	80013f0 <HAL_RCC_ClockConfig+0x38>
 80014da:	bf00      	nop
 80014dc:	40023c00 	.word	0x40023c00
 80014e0:	40023800 	.word	0x40023800
 80014e4:	08002971 	.word	0x08002971
 80014e8:	20000000 	.word	0x20000000

080014ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014ec:	4b01      	ldr	r3, [pc, #4]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_RCC_GetPCLK1Freq+0x14>)
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001506:	6810      	ldr	r0, [r2, #0]
}
 8001508:	40d8      	lsrs	r0, r3
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800
 8001510:	08002981 	.word	0x08002981
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_RCC_GetPCLK2Freq+0x14>)
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <HAL_RCC_GetPCLK2Freq+0x18>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001526:	6810      	ldr	r0, [r2, #0]
}
 8001528:	40d8      	lsrs	r0, r3
 800152a:	4770      	bx	lr
 800152c:	40023800 	.word	0x40023800
 8001530:	08002981 	.word	0x08002981
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001538:	230f      	movs	r3, #15
 800153a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_GetClockConfig+0x34>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800154c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001554:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800155e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_RCC_GetClockConfig+0x38>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001574:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001576:	2302      	movs	r3, #2
 8001578:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001584:	2301      	movs	r3, #1
 8001586:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
}
 800158a:	2000      	movs	r0, #0
 800158c:	4770      	bx	lr

0800158e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800158e:	6803      	ldr	r3, [r0, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80015a0:	2000      	movs	r0, #0
 80015a2:	4770      	bx	lr

080015a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80015a4:	4770      	bx	lr

080015a6 <HAL_TIM_IC_CaptureCallback>:
 80015a6:	4770      	bx	lr

080015a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015a8:	4770      	bx	lr

080015aa <HAL_TIM_TriggerCallback>:
 80015aa:	4770      	bx	lr

080015ac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ac:	6803      	ldr	r3, [r0, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	0791      	lsls	r1, r2, #30
{
 80015b2:	b510      	push	{r4, lr}
 80015b4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b6:	d50e      	bpl.n	80015d6 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	0792      	lsls	r2, r2, #30
 80015bc:	d50b      	bpl.n	80015d6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015be:	f06f 0202 	mvn.w	r2, #2
 80015c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015c4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015c6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015c8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ca:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015cc:	d077      	beq.n	80016be <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80015ce:	f7ff ffea 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d2:	2300      	movs	r3, #0
 80015d4:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	691a      	ldr	r2, [r3, #16]
 80015da:	0750      	lsls	r0, r2, #29
 80015dc:	d510      	bpl.n	8001600 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	0751      	lsls	r1, r2, #29
 80015e2:	d50d      	bpl.n	8001600 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015e4:	f06f 0204 	mvn.w	r2, #4
 80015e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ea:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ec:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ee:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f2:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015f4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f6:	d068      	beq.n	80016ca <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80015f8:	f7ff ffd5 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fc:	2300      	movs	r3, #0
 80015fe:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	0712      	lsls	r2, r2, #28
 8001606:	d50f      	bpl.n	8001628 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	0710      	lsls	r0, r2, #28
 800160c:	d50c      	bpl.n	8001628 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800160e:	f06f 0208 	mvn.w	r2, #8
 8001612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001614:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001616:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001618:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800161a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800161c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800161e:	d05a      	beq.n	80016d6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001620:	f7ff ffc1 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001624:	2300      	movs	r3, #0
 8001626:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	06d2      	lsls	r2, r2, #27
 800162e:	d510      	bpl.n	8001652 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	06d0      	lsls	r0, r2, #27
 8001634:	d50d      	bpl.n	8001652 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001636:	f06f 0210 	mvn.w	r2, #16
 800163a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800163c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800163e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001640:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001644:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001646:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001648:	d04b      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800164a:	f7ff ffac 	bl	80015a6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	2300      	movs	r3, #0
 8001650:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	07d1      	lsls	r1, r2, #31
 8001658:	d508      	bpl.n	800166c <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	07d2      	lsls	r2, r2, #31
 800165e:	d505      	bpl.n	800166c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001660:	f06f 0201 	mvn.w	r2, #1
 8001664:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff f8dc 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	0610      	lsls	r0, r2, #24
 8001672:	d508      	bpl.n	8001686 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	0611      	lsls	r1, r2, #24
 8001678:	d505      	bpl.n	8001686 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800167a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800167e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001680:	4620      	mov	r0, r4
 8001682:	f000 f8d6 	bl	8001832 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	0652      	lsls	r2, r2, #25
 800168c:	d508      	bpl.n	80016a0 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	0650      	lsls	r0, r2, #25
 8001692:	d505      	bpl.n	80016a0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001698:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff ff85 	bl	80015aa <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	0691      	lsls	r1, r2, #26
 80016a6:	d522      	bpl.n	80016ee <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	0692      	lsls	r2, r2, #26
 80016ac:	d51f      	bpl.n	80016ee <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016b4:	611a      	str	r2, [r3, #16]
    }
  }
}
 80016b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80016ba:	f000 b8b9 	b.w	8001830 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016be:	f7ff ff71 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff ff70 	bl	80015a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80016c8:	e783      	b.n	80015d2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ca:	f7ff ff6b 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff ff6a 	bl	80015a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80016d4:	e792      	b.n	80015fc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d6:	f7ff ff65 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ff64 	bl	80015a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80016e0:	e7a0      	b.n	8001624 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e2:	f7ff ff5f 	bl	80015a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ff5e 	bl	80015a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80016ec:	e7af      	b.n	800164e <HAL_TIM_IRQHandler+0xa2>
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016f0:	4a2e      	ldr	r2, [pc, #184]	; (80017ac <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80016f2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016f4:	4290      	cmp	r0, r2
 80016f6:	d012      	beq.n	800171e <TIM_Base_SetConfig+0x2e>
 80016f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016fc:	d00f      	beq.n	800171e <TIM_Base_SetConfig+0x2e>
 80016fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001702:	4290      	cmp	r0, r2
 8001704:	d00b      	beq.n	800171e <TIM_Base_SetConfig+0x2e>
 8001706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170a:	4290      	cmp	r0, r2
 800170c:	d007      	beq.n	800171e <TIM_Base_SetConfig+0x2e>
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	4290      	cmp	r0, r2
 8001714:	d003      	beq.n	800171e <TIM_Base_SetConfig+0x2e>
 8001716:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800171a:	4290      	cmp	r0, r2
 800171c:	d11d      	bne.n	800175a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800171e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001724:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001726:	4a21      	ldr	r2, [pc, #132]	; (80017ac <TIM_Base_SetConfig+0xbc>)
 8001728:	4290      	cmp	r0, r2
 800172a:	d104      	bne.n	8001736 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800172c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800172e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001732:	4313      	orrs	r3, r2
 8001734:	e028      	b.n	8001788 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001736:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800173a:	d0f7      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 800173c:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <TIM_Base_SetConfig+0xc0>)
 800173e:	4290      	cmp	r0, r2
 8001740:	d0f4      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001746:	4290      	cmp	r0, r2
 8001748:	d0f0      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 800174a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174e:	4290      	cmp	r0, r2
 8001750:	d0ec      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001752:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001756:	4290      	cmp	r0, r2
 8001758:	d0e8      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <TIM_Base_SetConfig+0xc4>)
 800175c:	4290      	cmp	r0, r2
 800175e:	d0e5      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001764:	4290      	cmp	r0, r2
 8001766:	d0e1      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176c:	4290      	cmp	r0, r2
 800176e:	d0dd      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001770:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001774:	4290      	cmp	r0, r2
 8001776:	d0d9      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001778:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800177c:	4290      	cmp	r0, r2
 800177e:	d0d5      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
 8001780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001784:	4290      	cmp	r0, r2
 8001786:	d0d1      	beq.n	800172c <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8001788:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800178a:	688b      	ldr	r3, [r1, #8]
 800178c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800178e:	680b      	ldr	r3, [r1, #0]
 8001790:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <TIM_Base_SetConfig+0xbc>)
 8001794:	4298      	cmp	r0, r3
 8001796:	d006      	beq.n	80017a6 <TIM_Base_SetConfig+0xb6>
 8001798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800179c:	4298      	cmp	r0, r3
 800179e:	d002      	beq.n	80017a6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017a0:	2301      	movs	r3, #1
 80017a2:	6143      	str	r3, [r0, #20]
}
 80017a4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80017a6:	690b      	ldr	r3, [r1, #16]
 80017a8:	6303      	str	r3, [r0, #48]	; 0x30
 80017aa:	e7f9      	b.n	80017a0 <TIM_Base_SetConfig+0xb0>
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40000400 	.word	0x40000400
 80017b4:	40014000 	.word	0x40014000

080017b8 <HAL_TIM_Base_Init>:
{ 
 80017b8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017ba:	4604      	mov	r4, r0
 80017bc:	b1a0      	cbz	r0, 80017e8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017c6:	b91b      	cbnz	r3, 80017d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80017cc:	f7ff f886 	bl	80008dc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017d6:	6820      	ldr	r0, [r4, #0]
 80017d8:	1d21      	adds	r1, r4, #4
 80017da:	f7ff ff89 	bl	80016f0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017de:	2301      	movs	r3, #1
 80017e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017e4:	2000      	movs	r0, #0
 80017e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
}
 80017ea:	bd10      	pop	{r4, pc}

080017ec <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80017ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017f0:	2b01      	cmp	r3, #1
{
 80017f2:	b510      	push	{r4, lr}
 80017f4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80017f8:	d018      	beq.n	800182c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80017fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017fe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001800:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001802:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001804:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001806:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800180a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4322      	orrs	r2, r4
 8001810:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001818:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001820:	2301      	movs	r3, #1
 8001822:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001826:	2300      	movs	r3, #0
 8001828:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800182c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800182e:	bd10      	pop	{r4, pc}

08001830 <HAL_TIMEx_CommutationCallback>:
 8001830:	4770      	bx	lr

08001832 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001832:	4770      	bx	lr

08001834 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001834:	6803      	ldr	r3, [r0, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800183c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001846:	2320      	movs	r3, #32
 8001848:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800184c:	4770      	bx	lr
	...

08001850 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001854:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001856:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001858:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800185a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800185c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001860:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001862:	6133      	str	r3, [r6, #16]
{
 8001864:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001866:	6883      	ldr	r3, [r0, #8]
 8001868:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800186a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800186c:	4303      	orrs	r3, r0
 800186e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001870:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001874:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001876:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800187a:	430b      	orrs	r3, r1
 800187c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800187e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001880:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001882:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001888:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800188a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800188e:	6173      	str	r3, [r6, #20]
 8001890:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001892:	d17c      	bne.n	800198e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001894:	429e      	cmp	r6, r3
 8001896:	d003      	beq.n	80018a0 <UART_SetConfig+0x50>
 8001898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800189c:	429e      	cmp	r6, r3
 800189e:	d144      	bne.n	800192a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018a0:	f7ff fe3a 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80018a4:	2519      	movs	r5, #25
 80018a6:	fb05 f300 	mul.w	r3, r5, r0
 80018aa:	6860      	ldr	r0, [r4, #4]
 80018ac:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018b0:	0040      	lsls	r0, r0, #1
 80018b2:	fbb3 f3f0 	udiv	r3, r3, r0
 80018b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80018ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80018be:	f7ff fe2b 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80018c2:	6863      	ldr	r3, [r4, #4]
 80018c4:	4368      	muls	r0, r5
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fbb0 f7f3 	udiv	r7, r0, r3
 80018cc:	f7ff fe24 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80018d0:	6863      	ldr	r3, [r4, #4]
 80018d2:	4368      	muls	r0, r5
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018da:	fbb3 f3f9 	udiv	r3, r3, r9
 80018de:	fb09 7313 	mls	r3, r9, r3, r7
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	3332      	adds	r3, #50	; 0x32
 80018e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80018f0:	f7ff fe12 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80018f4:	6862      	ldr	r2, [r4, #4]
 80018f6:	4368      	muls	r0, r5
 80018f8:	0052      	lsls	r2, r2, #1
 80018fa:	fbb0 faf2 	udiv	sl, r0, r2
 80018fe:	f7ff fe0b 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	4368      	muls	r0, r5
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fbb0 f3f3 	udiv	r3, r0, r3
 800190c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001910:	fb09 a313 	mls	r3, r9, r3, sl
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	3332      	adds	r3, #50	; 0x32
 8001918:	fbb3 f3f9 	udiv	r3, r3, r9
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001922:	443b      	add	r3, r7
 8001924:	60b3      	str	r3, [r6, #8]
 8001926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800192a:	f7ff fde5 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800192e:	2519      	movs	r5, #25
 8001930:	fb05 f300 	mul.w	r3, r5, r0
 8001934:	6860      	ldr	r0, [r4, #4]
 8001936:	f04f 0964 	mov.w	r9, #100	; 0x64
 800193a:	0040      	lsls	r0, r0, #1
 800193c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001940:	fbb3 f3f9 	udiv	r3, r3, r9
 8001944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001948:	f7ff fdd6 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	4368      	muls	r0, r5
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fbb0 f7f3 	udiv	r7, r0, r3
 8001956:	f7ff fdcf 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800195a:	6863      	ldr	r3, [r4, #4]
 800195c:	4368      	muls	r0, r5
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fbb0 f3f3 	udiv	r3, r0, r3
 8001964:	fbb3 f3f9 	udiv	r3, r3, r9
 8001968:	fb09 7313 	mls	r3, r9, r3, r7
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	3332      	adds	r3, #50	; 0x32
 8001970:	fbb3 f3f9 	udiv	r3, r3, r9
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800197a:	f7ff fdbd 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800197e:	6862      	ldr	r2, [r4, #4]
 8001980:	4368      	muls	r0, r5
 8001982:	0052      	lsls	r2, r2, #1
 8001984:	fbb0 faf2 	udiv	sl, r0, r2
 8001988:	f7ff fdb6 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 800198c:	e7b9      	b.n	8001902 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800198e:	429e      	cmp	r6, r3
 8001990:	d002      	beq.n	8001998 <UART_SetConfig+0x148>
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <UART_SetConfig+0x230>)
 8001994:	429e      	cmp	r6, r3
 8001996:	d140      	bne.n	8001a1a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001998:	f7ff fdbe 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 800199c:	6867      	ldr	r7, [r4, #4]
 800199e:	2519      	movs	r5, #25
 80019a0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019a4:	fb05 f300 	mul.w	r3, r5, r0
 80019a8:	00bf      	lsls	r7, r7, #2
 80019aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80019ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80019b2:	011f      	lsls	r7, r3, #4
 80019b4:	f7ff fdb0 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80019b8:	6863      	ldr	r3, [r4, #4]
 80019ba:	4368      	muls	r0, r5
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	fbb0 f8f3 	udiv	r8, r0, r3
 80019c2:	f7ff fda9 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	4368      	muls	r0, r5
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80019d4:	fb09 8313 	mls	r3, r9, r3, r8
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	3332      	adds	r3, #50	; 0x32
 80019dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80019e0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80019e4:	f7ff fd98 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80019e8:	6862      	ldr	r2, [r4, #4]
 80019ea:	4368      	muls	r0, r5
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	fbb0 faf2 	udiv	sl, r0, r2
 80019f2:	f7ff fd91 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	4368      	muls	r0, r5
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a00:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a04:	fb09 a313 	mls	r3, r9, r3, sl
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	3332      	adds	r3, #50	; 0x32
 8001a0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	ea43 0308 	orr.w	r3, r3, r8
 8001a18:	e783      	b.n	8001922 <UART_SetConfig+0xd2>
 8001a1a:	f7ff fd6d 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001a1e:	6867      	ldr	r7, [r4, #4]
 8001a20:	2519      	movs	r5, #25
 8001a22:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a26:	fb05 f300 	mul.w	r3, r5, r0
 8001a2a:	00bf      	lsls	r7, r7, #2
 8001a2c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a30:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a34:	011f      	lsls	r7, r3, #4
 8001a36:	f7ff fd5f 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	4368      	muls	r0, r5
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fbb0 f8f3 	udiv	r8, r0, r3
 8001a44:	f7ff fd58 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	4368      	muls	r0, r5
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a56:	fb09 8313 	mls	r3, r9, r3, r8
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	3332      	adds	r3, #50	; 0x32
 8001a5e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a62:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a66:	f7ff fd47 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001a6a:	6862      	ldr	r2, [r4, #4]
 8001a6c:	4368      	muls	r0, r5
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	fbb0 faf2 	udiv	sl, r0, r2
 8001a74:	f7ff fd40 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001a78:	e7bd      	b.n	80019f6 <UART_SetConfig+0x1a6>
 8001a7a:	bf00      	nop
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40011400 	.word	0x40011400

08001a84 <HAL_UART_Init>:
{
 8001a84:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a86:	4604      	mov	r4, r0
 8001a88:	b340      	cbz	r0, 8001adc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a92:	b91b      	cbnz	r3, 8001a9c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a94:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a98:	f7fe ff56 	bl	8000948 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a9c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a9e:	2324      	movs	r3, #36	; 0x24
 8001aa0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001aa4:	68d3      	ldr	r3, [r2, #12]
 8001aa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aaa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff fecf 	bl	8001850 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ac2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aca:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001acc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001ace:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001ad2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001ad6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001ada:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
}
 8001ade:	bd10      	pop	{r4, pc}

08001ae0 <HAL_UART_TxCpltCallback>:
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_UART_RxCpltCallback>:
 8001ae2:	4770      	bx	lr

08001ae4 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001ae4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ae8:	2b22      	cmp	r3, #34	; 0x22
{
 8001aea:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001aec:	d132      	bne.n	8001b54 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aee:	6883      	ldr	r3, [r0, #8]
 8001af0:	6901      	ldr	r1, [r0, #16]
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001afa:	d11f      	bne.n	8001b3c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001afc:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001afe:	b9c9      	cbnz	r1, 8001b34 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b04:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001b08:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001b0a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001b0c:	3c01      	subs	r4, #1
 8001b0e:	b2a4      	uxth	r4, r4
 8001b10:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001b12:	b96c      	cbnz	r4, 8001b30 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b14:	6803      	ldr	r3, [r0, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b1c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001b26:	2320      	movs	r3, #32
 8001b28:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001b2c:	f7ff ffd9 	bl	8001ae2 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001b30:	2000      	movs	r0, #0
}
 8001b32:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f823 2b01 	strh.w	r2, [r3], #1
 8001b3a:	e7e5      	b.n	8001b08 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b3c:	b921      	cbnz	r1, 8001b48 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	6852      	ldr	r2, [r2, #4]
 8001b42:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e7e0      	b.n	8001b0a <UART_Receive_IT+0x26>
 8001b48:	6852      	ldr	r2, [r2, #4]
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	6281      	str	r1, [r0, #40]	; 0x28
 8001b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b52:	e7f7      	b.n	8001b44 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001b54:	2002      	movs	r0, #2
 8001b56:	bd10      	pop	{r4, pc}

08001b58 <HAL_UART_ErrorCallback>:
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b5c:	6803      	ldr	r3, [r0, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b60:	68d9      	ldr	r1, [r3, #12]
{
 8001b62:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001b64:	0716      	lsls	r6, r2, #28
{
 8001b66:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b68:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001b6a:	d107      	bne.n	8001b7c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b6c:	0696      	lsls	r6, r2, #26
 8001b6e:	d55a      	bpl.n	8001c26 <HAL_UART_IRQHandler+0xca>
 8001b70:	068d      	lsls	r5, r1, #26
 8001b72:	d558      	bpl.n	8001c26 <HAL_UART_IRQHandler+0xca>
}
 8001b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001b78:	f7ff bfb4 	b.w	8001ae4 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b7c:	f015 0501 	ands.w	r5, r5, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_UART_IRQHandler+0x2c>
 8001b82:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001b86:	d04e      	beq.n	8001c26 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b88:	07d3      	lsls	r3, r2, #31
 8001b8a:	d505      	bpl.n	8001b98 <HAL_UART_IRQHandler+0x3c>
 8001b8c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b8e:	bf42      	ittt	mi
 8001b90:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001b92:	f043 0301 	orrmi.w	r3, r3, #1
 8001b96:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b98:	0750      	lsls	r0, r2, #29
 8001b9a:	d504      	bpl.n	8001ba6 <HAL_UART_IRQHandler+0x4a>
 8001b9c:	b11d      	cbz	r5, 8001ba6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ba6:	0793      	lsls	r3, r2, #30
 8001ba8:	d504      	bpl.n	8001bb4 <HAL_UART_IRQHandler+0x58>
 8001baa:	b11d      	cbz	r5, 8001bb4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bb4:	0716      	lsls	r6, r2, #28
 8001bb6:	d504      	bpl.n	8001bc2 <HAL_UART_IRQHandler+0x66>
 8001bb8:	b11d      	cbz	r5, 8001bc2 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d066      	beq.n	8001c96 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bc8:	0695      	lsls	r5, r2, #26
 8001bca:	d504      	bpl.n	8001bd6 <HAL_UART_IRQHandler+0x7a>
 8001bcc:	0688      	lsls	r0, r1, #26
 8001bce:	d502      	bpl.n	8001bd6 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff ff87 	bl	8001ae4 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001bdc:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001bde:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001be0:	d402      	bmi.n	8001be8 <HAL_UART_IRQHandler+0x8c>
 8001be2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001be6:	d01a      	beq.n	8001c1e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001be8:	f7ff fe24 	bl	8001834 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	0652      	lsls	r2, r2, #25
 8001bf2:	d510      	bpl.n	8001c16 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf4:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001bf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfc:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001bfe:	b150      	cbz	r0, 8001c16 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_UART_IRQHandler+0x13c>)
 8001c02:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c04:	f7ff f92c 	bl	8000e60 <HAL_DMA_Abort_IT>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d044      	beq.n	8001c96 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c12:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c14:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ff9e 	bl	8001b58 <HAL_UART_ErrorCallback>
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001c1e:	f7ff ff9b 	bl	8001b58 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c22:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001c24:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c26:	0616      	lsls	r6, r2, #24
 8001c28:	d527      	bpl.n	8001c7a <HAL_UART_IRQHandler+0x11e>
 8001c2a:	060d      	lsls	r5, r1, #24
 8001c2c:	d525      	bpl.n	8001c7a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c2e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001c32:	2a21      	cmp	r2, #33	; 0x21
 8001c34:	d12f      	bne.n	8001c96 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c36:	68a2      	ldr	r2, [r4, #8]
 8001c38:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c3c:	6a22      	ldr	r2, [r4, #32]
 8001c3e:	d117      	bne.n	8001c70 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c40:	8811      	ldrh	r1, [r2, #0]
 8001c42:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c46:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001c48:	6921      	ldr	r1, [r4, #16]
 8001c4a:	b979      	cbnz	r1, 8001c6c <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001c4c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001c4e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001c50:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001c52:	3a01      	subs	r2, #1
 8001c54:	b292      	uxth	r2, r2
 8001c56:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001c58:	b9ea      	cbnz	r2, 8001c96 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c60:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001c6c:	3201      	adds	r2, #1
 8001c6e:	e7ee      	b.n	8001c4e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c70:	1c51      	adds	r1, r2, #1
 8001c72:	6221      	str	r1, [r4, #32]
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	e7ea      	b.n	8001c50 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c7a:	0650      	lsls	r0, r2, #25
 8001c7c:	d50b      	bpl.n	8001c96 <HAL_UART_IRQHandler+0x13a>
 8001c7e:	064a      	lsls	r2, r1, #25
 8001c80:	d509      	bpl.n	8001c96 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c88:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff ff25 	bl	8001ae0 <HAL_UART_TxCpltCallback>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	08001c9d 	.word	0x08001c9d

08001c9c <UART_DMAAbortOnError>:
{
 8001c9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001ca4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001ca6:	f7ff ff57 	bl	8001b58 <HAL_UART_ErrorCallback>
 8001caa:	bd08      	pop	{r3, pc}

08001cac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001cac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001cae:	f000 fbe3 	bl	8002478 <vTaskStartScheduler>
  
  return osOK;
}
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	bd08      	pop	{r3, pc}

08001cb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001cb6:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cb8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001cbc:	8a02      	ldrh	r2, [r0, #16]
{
 8001cbe:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cc0:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001cc4:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001cc6:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001cc8:	bf14      	ite	ne
 8001cca:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ccc:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cce:	a803      	add	r0, sp, #12
 8001cd0:	9001      	str	r0, [sp, #4]
 8001cd2:	9400      	str	r4, [sp, #0]
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	f000 faff 	bl	80022d8 <xTaskCreate>
 8001cda:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001cdc:	bf0c      	ite	eq
 8001cde:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001ce0:	2000      	movne	r0, #0
}
 8001ce2:	b005      	add	sp, #20
 8001ce4:	bd30      	pop	{r4, r5, pc}

08001ce6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ce6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	bf08      	it	eq
 8001cec:	2001      	moveq	r0, #1
 8001cee:	f000 fd11 	bl	8002714 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	bd08      	pop	{r3, pc}

08001cf6 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001cf6:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001cf8:	f000 fda4 	bl	8002844 <xTaskGetSchedulerState>
 8001cfc:	2801      	cmp	r0, #1
 8001cfe:	d003      	beq.n	8001d08 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001d04:	f000 b906 	b.w	8001f14 <xPortSysTickHandler>
 8001d08:	bd08      	pop	{r3, pc}

08001d0a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d0a:	f100 0308 	add.w	r3, r0, #8
 8001d0e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d14:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d16:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d18:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d1a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d1c:	6003      	str	r3, [r0, #0]
 8001d1e:	4770      	bx	lr

08001d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	6103      	str	r3, [r0, #16]
 8001d24:	4770      	bx	lr

08001d26 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d26:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d32:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d34:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d36:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d38:	3301      	adds	r3, #1
 8001d3a:	6003      	str	r3, [r0, #0]
 8001d3c:	4770      	bx	lr

08001d3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d3e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d40:	1c53      	adds	r3, r2, #1
{
 8001d42:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001d44:	d10a      	bne.n	8001d5c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d46:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d4c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d4e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d50:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d52:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d54:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d56:	3301      	adds	r3, #1
 8001d58:	6003      	str	r3, [r0, #0]
 8001d5a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d5c:	f100 0308 	add.w	r3, r0, #8
 8001d60:	685c      	ldr	r4, [r3, #4]
 8001d62:	6825      	ldr	r5, [r4, #0]
 8001d64:	42aa      	cmp	r2, r5
 8001d66:	d3ef      	bcc.n	8001d48 <vListInsert+0xa>
 8001d68:	4623      	mov	r3, r4
 8001d6a:	e7f9      	b.n	8001d60 <vListInsert+0x22>

08001d6c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d6c:	6841      	ldr	r1, [r0, #4]
 8001d6e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d70:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d72:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d74:	6882      	ldr	r2, [r0, #8]
 8001d76:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d7c:	bf08      	it	eq
 8001d7e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d80:	2200      	movs	r2, #0
 8001d82:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	3801      	subs	r0, #1
 8001d88:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001d8a:	4770      	bx	lr

08001d8c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <prvTaskExitError+0x2c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	d008      	beq.n	8001da6 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	e7fe      	b.n	8001da4 <prvTaskExitError+0x18>
 8001da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	e7fe      	b.n	8001db6 <prvTaskExitError+0x2a>
 8001db8:	20000008 	.word	0x20000008

08001dbc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001dbc:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <prvPortStartFirstTask+0x1c>)
 8001dbe:	6800      	ldr	r0, [r0, #0]
 8001dc0:	6800      	ldr	r0, [r0, #0]
 8001dc2:	f380 8808 	msr	MSP, r0
 8001dc6:	b662      	cpsie	i
 8001dc8:	b661      	cpsie	f
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	df00      	svc	0
 8001dd4:	bf00      	nop
 8001dd6:	0000      	.short	0x0000
 8001dd8:	e000ed08 	.word	0xe000ed08

08001ddc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001ddc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001dec <vPortEnableVFP+0x10>
 8001de0:	6801      	ldr	r1, [r0, #0]
 8001de2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001de6:	6001      	str	r1, [r0, #0]
 8001de8:	4770      	bx	lr
 8001dea:	0000      	.short	0x0000
 8001dec:	e000ed88 	.word	0xe000ed88

08001df0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <pxPortInitialiseStack+0x28>)
 8001dfa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001dfe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001e02:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e06:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001e0a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001e0e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001e12:	3844      	subs	r0, #68	; 0x44
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	08001d8d 	.word	0x08001d8d
 8001e1c:	00000000 	.word	0x00000000

08001e20 <SVC_Handler>:
	__asm volatile (
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <pxCurrentTCBConst2>)
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	6808      	ldr	r0, [r1, #0]
 8001e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2a:	f380 8809 	msr	PSP, r0
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f04f 0000 	mov.w	r0, #0
 8001e36:	f380 8811 	msr	BASEPRI, r0
 8001e3a:	4770      	bx	lr
 8001e3c:	f3af 8000 	nop.w

08001e40 <pxCurrentTCBConst2>:
 8001e40:	20003c48 	.word	0x20003c48

08001e44 <vPortEnterCritical>:
 8001e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <vPortEnterCritical+0x3c>)
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001e5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001e5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e5e:	d10d      	bne.n	8001e7c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <vPortEnterCritical+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e68:	d008      	beq.n	8001e7c <vPortEnterCritical+0x38>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	e7fe      	b.n	8001e7a <vPortEnterCritical+0x36>
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008
 8001e84:	e000ed04 	.word	0xe000ed04

08001e88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001e88:	4a08      	ldr	r2, [pc, #32]	; (8001eac <vPortExitCritical+0x24>)
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	b943      	cbnz	r3, 8001ea0 <vPortExitCritical+0x18>
 8001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
 8001e9e:	e7fe      	b.n	8001e9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001ea4:	b90b      	cbnz	r3, 8001eaa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ea6:	f383 8811 	msr	BASEPRI, r3
 8001eaa:	4770      	bx	lr
 8001eac:	20000008 	.word	0x20000008

08001eb0 <PendSV_Handler>:
	__asm volatile
 8001eb0:	f3ef 8009 	mrs	r0, PSP
 8001eb4:	f3bf 8f6f 	isb	sy
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <pxCurrentTCBConst>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f01e 0f10 	tst.w	lr, #16
 8001ec0:	bf08      	it	eq
 8001ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eca:	6010      	str	r0, [r2, #0]
 8001ecc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ed4:	f380 8811 	msr	BASEPRI, r0
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f000 fc76 	bl	80027d0 <vTaskSwitchContext>
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f380 8811 	msr	BASEPRI, r0
 8001eec:	bc08      	pop	{r3}
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	6808      	ldr	r0, [r1, #0]
 8001ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef6:	f01e 0f10 	tst.w	lr, #16
 8001efa:	bf08      	it	eq
 8001efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f00:	f380 8809 	msr	PSP, r0
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w

08001f10 <pxCurrentTCBConst>:
 8001f10:	20003c48 	.word	0x20003c48

08001f14 <xPortSysTickHandler>:
{
 8001f14:	b508      	push	{r3, lr}
	__asm volatile
 8001f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001f26:	f000 faeb 	bl	8002500 <xTaskIncrementTick>
 8001f2a:	b118      	cbz	r0, 8001f34 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <xPortSysTickHandler+0x28>)
 8001f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f32:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001f34:	2300      	movs	r3, #0
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	bd08      	pop	{r3, pc}
 8001f3c:	e000ed04 	.word	0xe000ed04

08001f40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <vPortSetupTimerInterrupt+0x1c>)
 8001f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <vPortSetupTimerInterrupt+0x20>)
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <vPortSetupTimerInterrupt+0x24>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	e000e014 	.word	0xe000e014
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <xPortStartScheduler+0xc8>)
 8001f6a:	4a32      	ldr	r2, [pc, #200]	; (8002034 <xPortStartScheduler+0xcc>)
{
 8001f6c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f6e:	6819      	ldr	r1, [r3, #0]
 8001f70:	4291      	cmp	r1, r2
 8001f72:	d108      	bne.n	8001f86 <xPortStartScheduler+0x1e>
	__asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	e7fe      	b.n	8001f84 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <xPortStartScheduler+0xd0>)
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d108      	bne.n	8001fa0 <xPortStartScheduler+0x38>
 8001f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	e7fe      	b.n	8001f9e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <xPortStartScheduler+0xd4>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fa8:	22ff      	movs	r2, #255	; 0xff
 8001faa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fac:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fae:	4a24      	ldr	r2, [pc, #144]	; (8002040 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001fba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fbe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <xPortStartScheduler+0xdc>)
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001fcc:	0600      	lsls	r0, r0, #24
 8001fce:	f102 34ff 	add.w	r4, r2, #4294967295
 8001fd2:	d423      	bmi.n	800201c <xPortStartScheduler+0xb4>
 8001fd4:	b101      	cbz	r1, 8001fd8 <xPortStartScheduler+0x70>
 8001fd6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001fdc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001fe0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001fe2:	9b01      	ldr	r3, [sp, #4]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <xPortStartScheduler+0xd4>)
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <xPortStartScheduler+0xe0>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ff2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001ffa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001ffc:	f7ff ffa0 	bl	8001f40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <xPortStartScheduler+0xe4>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002006:	f7ff fee9 	bl	8001ddc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <xPortStartScheduler+0xe8>)
 800200c:	6813      	ldr	r3, [r2, #0]
 800200e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002012:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002014:	f7ff fed2 	bl	8001dbc <prvPortStartFirstTask>
	prvTaskExitError();
 8002018:	f7ff feb8 	bl	8001d8c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800201c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002020:	0052      	lsls	r2, r2, #1
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f88d 2003 	strb.w	r2, [sp, #3]
 8002028:	2101      	movs	r1, #1
 800202a:	4622      	mov	r2, r4
 800202c:	e7cc      	b.n	8001fc8 <xPortStartScheduler+0x60>
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00
 8002034:	410fc271 	.word	0x410fc271
 8002038:	410fc270 	.word	0x410fc270
 800203c:	e000e400 	.word	0xe000e400
 8002040:	20000028 	.word	0x20000028
 8002044:	2000002c 	.word	0x2000002c
 8002048:	e000ed20 	.word	0xe000ed20
 800204c:	20000008 	.word	0x20000008
 8002050:	e000ef34 	.word	0xe000ef34

08002054 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002054:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <prvInsertBlockIntoFreeList+0x40>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4282      	cmp	r2, r0
 800205c:	d318      	bcc.n	8002090 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800205e:	685c      	ldr	r4, [r3, #4]
 8002060:	1919      	adds	r1, r3, r4
 8002062:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002064:	bf01      	itttt	eq
 8002066:	6841      	ldreq	r1, [r0, #4]
 8002068:	4618      	moveq	r0, r3
 800206a:	1909      	addeq	r1, r1, r4
 800206c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800206e:	6844      	ldr	r4, [r0, #4]
 8002070:	1901      	adds	r1, r0, r4
 8002072:	428a      	cmp	r2, r1
 8002074:	d107      	bne.n	8002086 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <prvInsertBlockIntoFreeList+0x44>)
 8002078:	6809      	ldr	r1, [r1, #0]
 800207a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800207c:	bf1f      	itttt	ne
 800207e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002080:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002082:	1909      	addne	r1, r1, r4
 8002084:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002086:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002088:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800208a:	bf18      	it	ne
 800208c:	6018      	strne	r0, [r3, #0]
 800208e:	bd10      	pop	{r4, pc}
 8002090:	4613      	mov	r3, r2
 8002092:	e7e1      	b.n	8002058 <prvInsertBlockIntoFreeList+0x4>
 8002094:	20003c40 	.word	0x20003c40
 8002098:	20000030 	.word	0x20000030

0800209c <pvPortMalloc>:
{
 800209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80020a2:	f000 fa25 	bl	80024f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80020a6:	493e      	ldr	r1, [pc, #248]	; (80021a0 <pvPortMalloc+0x104>)
 80020a8:	4d3e      	ldr	r5, [pc, #248]	; (80021a4 <pvPortMalloc+0x108>)
 80020aa:	680b      	ldr	r3, [r1, #0]
 80020ac:	bb0b      	cbnz	r3, 80020f2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80020ae:	4a3e      	ldr	r2, [pc, #248]	; (80021a8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020b0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020b2:	bf1f      	itttt	ne
 80020b4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020b6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020ba:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80020be:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020c0:	bf14      	ite	ne
 80020c2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020c4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80020c8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80020ca:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020cc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020d0:	4e36      	ldr	r6, [pc, #216]	; (80021ac <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80020d2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80020d4:	2000      	movs	r0, #0
 80020d6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020d8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80020da:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80020dc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020de:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020e0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020e2:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020e4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020e6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <pvPortMalloc+0x118>)
 80020ea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80020ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020f0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020f2:	682f      	ldr	r7, [r5, #0]
 80020f4:	4227      	tst	r7, r4
 80020f6:	d116      	bne.n	8002126 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d041      	beq.n	8002180 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80020fc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002100:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002102:	bf1c      	itt	ne
 8002104:	f023 0307 	bicne.w	r3, r3, #7
 8002108:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800210a:	b163      	cbz	r3, 8002126 <pvPortMalloc+0x8a>
 800210c:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <pvPortMalloc+0x118>)
 800210e:	6816      	ldr	r6, [r2, #0]
 8002110:	42b3      	cmp	r3, r6
 8002112:	4690      	mov	r8, r2
 8002114:	d807      	bhi.n	8002126 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002116:	4a25      	ldr	r2, [pc, #148]	; (80021ac <pvPortMalloc+0x110>)
 8002118:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800211a:	6868      	ldr	r0, [r5, #4]
 800211c:	4283      	cmp	r3, r0
 800211e:	d804      	bhi.n	800212a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002120:	6809      	ldr	r1, [r1, #0]
 8002122:	428d      	cmp	r5, r1
 8002124:	d107      	bne.n	8002136 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002126:	2400      	movs	r4, #0
 8002128:	e02a      	b.n	8002180 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800212a:	682c      	ldr	r4, [r5, #0]
 800212c:	2c00      	cmp	r4, #0
 800212e:	d0f7      	beq.n	8002120 <pvPortMalloc+0x84>
 8002130:	462a      	mov	r2, r5
 8002132:	4625      	mov	r5, r4
 8002134:	e7f1      	b.n	800211a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002136:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002138:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800213a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800213c:	1ac2      	subs	r2, r0, r3
 800213e:	2a10      	cmp	r2, #16
 8002140:	d90f      	bls.n	8002162 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002142:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002144:	0741      	lsls	r1, r0, #29
 8002146:	d008      	beq.n	800215a <pvPortMalloc+0xbe>
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	e7fe      	b.n	8002158 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800215a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800215c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800215e:	f7ff ff79 	bl	8002054 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002162:	4913      	ldr	r1, [pc, #76]	; (80021b0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002164:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002166:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002168:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800216a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800216c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800216e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002172:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002176:	bf38      	it	cc
 8002178:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800217a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800217c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800217e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002180:	f000 fa50 	bl	8002624 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002184:	0763      	lsls	r3, r4, #29
 8002186:	d008      	beq.n	800219a <pvPortMalloc+0xfe>
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	e7fe      	b.n	8002198 <pvPortMalloc+0xfc>
}
 800219a:	4620      	mov	r0, r4
 800219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a0:	20000030 	.word	0x20000030
 80021a4:	20003c34 	.word	0x20003c34
 80021a8:	20000034 	.word	0x20000034
 80021ac:	20003c40 	.word	0x20003c40
 80021b0:	20003c3c 	.word	0x20003c3c
 80021b4:	20003c38 	.word	0x20003c38

080021b8 <vPortFree>:
{
 80021b8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80021ba:	4604      	mov	r4, r0
 80021bc:	b370      	cbz	r0, 800221c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <vPortFree+0x68>)
 80021c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	4213      	tst	r3, r2
 80021c8:	d108      	bne.n	80021dc <vPortFree+0x24>
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	e7fe      	b.n	80021da <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80021dc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80021e0:	b141      	cbz	r1, 80021f4 <vPortFree+0x3c>
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	e7fe      	b.n	80021f2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80021f4:	ea23 0302 	bic.w	r3, r3, r2
 80021f8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80021fc:	f000 f978 	bl	80024f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002200:	4a08      	ldr	r2, [pc, #32]	; (8002224 <vPortFree+0x6c>)
 8002202:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002206:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002208:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800220c:	440b      	add	r3, r1
 800220e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002210:	f7ff ff20 	bl	8002054 <prvInsertBlockIntoFreeList>
}
 8002214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002218:	f000 ba04 	b.w	8002624 <xTaskResumeAll>
 800221c:	bd10      	pop	{r4, pc}
 800221e:	bf00      	nop
 8002220:	20003c34 	.word	0x20003c34
 8002224:	20003c38 	.word	0x20003c38

08002228 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <prvResetNextTaskUnblockTime+0x1c>)
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <prvResetNextTaskUnblockTime+0x20>)
 8002230:	b919      	cbnz	r1, 800223a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002232:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800223e:	68d2      	ldr	r2, [r2, #12]
 8002240:	6852      	ldr	r2, [r2, #4]
 8002242:	e7f8      	b.n	8002236 <prvResetNextTaskUnblockTime+0xe>
 8002244:	20003c4c 	.word	0x20003c4c
 8002248:	20003d24 	.word	0x20003d24

0800224c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002250:	4e1b      	ldr	r6, [pc, #108]	; (80022c0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002252:	681d      	ldr	r5, [r3, #0]
{
 8002254:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002256:	6830      	ldr	r0, [r6, #0]
 8002258:	3004      	adds	r0, #4
{
 800225a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800225c:	f7ff fd86 	bl	8001d6c <uxListRemove>
 8002260:	4633      	mov	r3, r6
 8002262:	b940      	cbnz	r0, 8002276 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002264:	6831      	ldr	r1, [r6, #0]
 8002266:	4e17      	ldr	r6, [pc, #92]	; (80022c4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002268:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800226a:	6832      	ldr	r2, [r6, #0]
 800226c:	2001      	movs	r0, #1
 800226e:	4088      	lsls	r0, r1
 8002270:	ea22 0200 	bic.w	r2, r2, r0
 8002274:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002276:	1c62      	adds	r2, r4, #1
 8002278:	d107      	bne.n	800228a <prvAddCurrentTaskToDelayedList+0x3e>
 800227a:	b137      	cbz	r7, 800228a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	4812      	ldr	r0, [pc, #72]	; (80022c8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002280:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002286:	f7ff bd4e 	b.w	8001d26 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800228a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800228c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800228e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002290:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002292:	d907      	bls.n	80022a4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <prvAddCurrentTaskToDelayedList+0x80>)
 8002296:	6810      	ldr	r0, [r2, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
}
 800229a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800229e:	3104      	adds	r1, #4
 80022a0:	f7ff bd4d 	b.w	8001d3e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <prvAddCurrentTaskToDelayedList+0x84>)
 80022a6:	6810      	ldr	r0, [r2, #0]
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	3104      	adds	r1, #4
 80022ac:	f7ff fd47 	bl	8001d3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <prvAddCurrentTaskToDelayedList+0x88>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80022b6:	bf38      	it	cc
 80022b8:	601c      	strcc	r4, [r3, #0]
 80022ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022bc:	20003d6c 	.word	0x20003d6c
 80022c0:	20003c48 	.word	0x20003c48
 80022c4:	20003cf4 	.word	0x20003cf4
 80022c8:	20003d44 	.word	0x20003d44
 80022cc:	20003c50 	.word	0x20003c50
 80022d0:	20003c4c 	.word	0x20003c4c
 80022d4:	20003d24 	.word	0x20003d24

080022d8 <xTaskCreate>:
	{
 80022d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022dc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80022e0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022e2:	4650      	mov	r0, sl
	{
 80022e4:	460f      	mov	r7, r1
 80022e6:	4699      	mov	r9, r3
 80022e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ea:	f7ff fed7 	bl	800209c <pvPortMalloc>
			if( pxStack != NULL )
 80022ee:	4605      	mov	r5, r0
 80022f0:	2800      	cmp	r0, #0
 80022f2:	f000 8096 	beq.w	8002422 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022f6:	2054      	movs	r0, #84	; 0x54
 80022f8:	f7ff fed0 	bl	800209c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80022fc:	4604      	mov	r4, r0
 80022fe:	2800      	cmp	r0, #0
 8002300:	f000 808c 	beq.w	800241c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002304:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002308:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800230a:	4455      	add	r5, sl
 800230c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800230e:	f025 0a07 	bic.w	sl, r5, #7
 8002312:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002316:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002318:	7859      	ldrb	r1, [r3, #1]
 800231a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800231e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002322:	b109      	cbz	r1, 8002328 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002324:	42bb      	cmp	r3, r7
 8002326:	d1f7      	bne.n	8002318 <xTaskCreate+0x40>
 8002328:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800232a:	2d06      	cmp	r5, #6
 800232c:	bf28      	it	cs
 800232e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002330:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002334:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002336:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002338:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800233a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800233c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002340:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002344:	f7ff fcec 	bl	8001d20 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002348:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800234c:	f104 0018 	add.w	r0, r4, #24
 8002350:	f7ff fce6 	bl	8001d20 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002354:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002358:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800235c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800235e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002362:	464a      	mov	r2, r9
 8002364:	4641      	mov	r1, r8
 8002366:	4650      	mov	r0, sl
 8002368:	f7ff fd42 	bl	8001df0 <pxPortInitialiseStack>
 800236c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800236e:	b106      	cbz	r6, 8002372 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002370:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002372:	f7ff fd67 	bl	8001e44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002376:	4b32      	ldr	r3, [pc, #200]	; (8002440 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002378:	4e32      	ldr	r6, [pc, #200]	; (8002444 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002470 <xTaskCreate+0x198>
 8002380:	3201      	adds	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002384:	6835      	ldr	r5, [r6, #0]
 8002386:	2d00      	cmp	r5, #0
 8002388:	d14e      	bne.n	8002428 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800238a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11d      	bne.n	80023ce <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002392:	eb08 0005 	add.w	r0, r8, r5
 8002396:	3514      	adds	r5, #20
 8002398:	f7ff fcb7 	bl	8001d0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800239c:	2d8c      	cmp	r5, #140	; 0x8c
 800239e:	d1f8      	bne.n	8002392 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80023a0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002474 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80023a4:	4d28      	ldr	r5, [pc, #160]	; (8002448 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80023a6:	4648      	mov	r0, r9
 80023a8:	f7ff fcaf 	bl	8001d0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023ac:	4628      	mov	r0, r5
 80023ae:	f7ff fcac 	bl	8001d0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023b2:	4826      	ldr	r0, [pc, #152]	; (800244c <xTaskCreate+0x174>)
 80023b4:	f7ff fca9 	bl	8001d0a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80023b8:	4825      	ldr	r0, [pc, #148]	; (8002450 <xTaskCreate+0x178>)
 80023ba:	f7ff fca6 	bl	8001d0a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80023be:	4825      	ldr	r0, [pc, #148]	; (8002454 <xTaskCreate+0x17c>)
 80023c0:	f7ff fca3 	bl	8001d0a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <xTaskCreate+0x180>)
 80023c6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <xTaskCreate+0x184>)
 80023cc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80023ce:	4a24      	ldr	r2, [pc, #144]	; (8002460 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80023d0:	4924      	ldr	r1, [pc, #144]	; (8002464 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80023d2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80023d4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80023d6:	3301      	adds	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80023da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023dc:	2501      	movs	r5, #1
 80023de:	fa05 f302 	lsl.w	r3, r5, r2
 80023e2:	4303      	orrs	r3, r0
 80023e4:	2014      	movs	r0, #20
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	fb00 8002 	mla	r0, r0, r2, r8
 80023ec:	4639      	mov	r1, r7
 80023ee:	f7ff fc9a 	bl	8001d26 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80023f2:	f7ff fd49 	bl	8001e88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <xTaskCreate+0x190>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b163      	cbz	r3, 8002416 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023fc:	6833      	ldr	r3, [r6, #0]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002402:	429a      	cmp	r2, r3
 8002404:	d207      	bcs.n	8002416 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <xTaskCreate+0x194>)
 8002408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	f3bf 8f6f 	isb	sy
	}
 8002416:	4628      	mov	r0, r5
 8002418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800241c:	4628      	mov	r0, r5
 800241e:	f7ff fecb 	bl	80021b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002422:	f04f 35ff 	mov.w	r5, #4294967295
 8002426:	e7f6      	b.n	8002416 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <xTaskCreate+0x190>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ce      	bne.n	80023ce <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002430:	6833      	ldr	r3, [r6, #0]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002436:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002438:	bf98      	it	ls
 800243a:	6034      	strls	r4, [r6, #0]
 800243c:	e7c7      	b.n	80023ce <xTaskCreate+0xf6>
 800243e:	bf00      	nop
 8002440:	20003ce0 	.word	0x20003ce0
 8002444:	20003c48 	.word	0x20003c48
 8002448:	20003d0c 	.word	0x20003d0c
 800244c:	20003d2c 	.word	0x20003d2c
 8002450:	20003d58 	.word	0x20003d58
 8002454:	20003d44 	.word	0x20003d44
 8002458:	20003c4c 	.word	0x20003c4c
 800245c:	20003c50 	.word	0x20003c50
 8002460:	20003cf0 	.word	0x20003cf0
 8002464:	20003cf4 	.word	0x20003cf4
 8002468:	20003d40 	.word	0x20003d40
 800246c:	e000ed04 	.word	0xe000ed04
 8002470:	20003c54 	.word	0x20003c54
 8002474:	20003cf8 	.word	0x20003cf8

08002478 <vTaskStartScheduler>:
{
 8002478:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <vTaskStartScheduler+0x60>)
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	2400      	movs	r4, #0
 8002480:	9400      	str	r4, [sp, #0]
 8002482:	4623      	mov	r3, r4
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	4915      	ldr	r1, [pc, #84]	; (80024dc <vTaskStartScheduler+0x64>)
 8002488:	4815      	ldr	r0, [pc, #84]	; (80024e0 <vTaskStartScheduler+0x68>)
 800248a:	f7ff ff25 	bl	80022d8 <xTaskCreate>
	if( xReturn == pdPASS )
 800248e:	2801      	cmp	r0, #1
 8002490:	d114      	bne.n	80024bc <vTaskStartScheduler+0x44>
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <vTaskStartScheduler+0x6c>)
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <vTaskStartScheduler+0x70>)
 80024ac:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <vTaskStartScheduler+0x74>)
 80024b0:	601c      	str	r4, [r3, #0]
}
 80024b2:	b002      	add	sp, #8
 80024b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80024b8:	f7ff bd56 	b.w	8001f68 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024bc:	3001      	adds	r0, #1
 80024be:	d108      	bne.n	80024d2 <vTaskStartScheduler+0x5a>
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	e7fe      	b.n	80024d0 <vTaskStartScheduler+0x58>
}
 80024d2:	b002      	add	sp, #8
 80024d4:	bd10      	pop	{r4, pc}
 80024d6:	bf00      	nop
 80024d8:	20003d20 	.word	0x20003d20
 80024dc:	08002989 	.word	0x08002989
 80024e0:	0800275d 	.word	0x0800275d
 80024e4:	20003d24 	.word	0x20003d24
 80024e8:	20003d40 	.word	0x20003d40
 80024ec:	20003d6c 	.word	0x20003d6c

080024f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <vTaskSuspendAll+0xc>)
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20003cec 	.word	0x20003cec

08002500 <xTaskIncrementTick>:
{
 8002500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <xTaskIncrementTick+0xf8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d153      	bne.n	80025b4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <xTaskIncrementTick+0xfc>)
 800250e:	681c      	ldr	r4, [r3, #0]
 8002510:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002512:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002514:	b9bc      	cbnz	r4, 8002546 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002516:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <xTaskIncrementTick+0x100>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	b142      	cbz	r2, 8002530 <xTaskIncrementTick+0x30>
 800251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	e7fe      	b.n	800252e <xTaskIncrementTick+0x2e>
 8002530:	4a34      	ldr	r2, [pc, #208]	; (8002604 <xTaskIncrementTick+0x104>)
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	6810      	ldr	r0, [r2, #0]
 8002536:	6018      	str	r0, [r3, #0]
 8002538:	6011      	str	r1, [r2, #0]
 800253a:	4a33      	ldr	r2, [pc, #204]	; (8002608 <xTaskIncrementTick+0x108>)
 800253c:	6813      	ldr	r3, [r2, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	f7ff fe71 	bl	8002228 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002546:	4d31      	ldr	r5, [pc, #196]	; (800260c <xTaskIncrementTick+0x10c>)
 8002548:	4f31      	ldr	r7, [pc, #196]	; (8002610 <xTaskIncrementTick+0x110>)
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	429c      	cmp	r4, r3
 800254e:	f04f 0b00 	mov.w	fp, #0
 8002552:	d33e      	bcc.n	80025d2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002554:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002600 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002558:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002620 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800255c:	f8d8 2000 	ldr.w	r2, [r8]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	bb72      	cbnz	r2, 80025c2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	602a      	str	r2, [r5, #0]
					break;
 800256a:	e032      	b.n	80025d2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800256c:	f106 0a04 	add.w	sl, r6, #4
 8002570:	4650      	mov	r0, sl
 8002572:	f7ff fbfb 	bl	8001d6c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002576:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002578:	b119      	cbz	r1, 8002582 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800257a:	f106 0018 	add.w	r0, r6, #24
 800257e:	f7ff fbf5 	bl	8001d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002582:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002584:	f8d9 3000 	ldr.w	r3, [r9]
 8002588:	2201      	movs	r2, #1
 800258a:	fa02 f100 	lsl.w	r1, r2, r0
 800258e:	4319      	orrs	r1, r3
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <xTaskIncrementTick+0x114>)
 8002592:	f8c9 1000 	str.w	r1, [r9]
 8002596:	f04f 0e14 	mov.w	lr, #20
 800259a:	4651      	mov	r1, sl
 800259c:	fb0e 3000 	mla	r0, lr, r0, r3
 80025a0:	f7ff fbc1 	bl	8001d26 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80025a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80025aa:	4291      	cmp	r1, r2
 80025ac:	bf28      	it	cs
 80025ae:	f04f 0b01 	movcs.w	fp, #1
 80025b2:	e7d3      	b.n	800255c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <xTaskIncrementTick+0x118>)
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80025bc:	f04f 0b00 	mov.w	fp, #0
 80025c0:	e011      	b.n	80025e6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025c2:	f8d8 2000 	ldr.w	r2, [r8]
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025ca:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80025cc:	428c      	cmp	r4, r1
 80025ce:	d2cd      	bcs.n	800256c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80025d0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <xTaskIncrementTick+0x114>)
 80025d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d8:	2214      	movs	r2, #20
 80025da:	434a      	muls	r2, r1
 80025dc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80025de:	2a02      	cmp	r2, #2
 80025e0:	bf28      	it	cs
 80025e2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <xTaskIncrementTick+0x11c>)
 80025e8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80025ea:	2a00      	cmp	r2, #0
 80025ec:	bf18      	it	ne
 80025ee:	f04f 0b01 	movne.w	fp, #1
}
 80025f2:	4658      	mov	r0, fp
 80025f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f8:	20003cec 	.word	0x20003cec
 80025fc:	20003d6c 	.word	0x20003d6c
 8002600:	20003c4c 	.word	0x20003c4c
 8002604:	20003c50 	.word	0x20003c50
 8002608:	20003d28 	.word	0x20003d28
 800260c:	20003d24 	.word	0x20003d24
 8002610:	20003c48 	.word	0x20003c48
 8002614:	20003c54 	.word	0x20003c54
 8002618:	20003ce8 	.word	0x20003ce8
 800261c:	20003d70 	.word	0x20003d70
 8002620:	20003cf4 	.word	0x20003cf4

08002624 <xTaskResumeAll>:
{
 8002624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002628:	4c31      	ldr	r4, [pc, #196]	; (80026f0 <xTaskResumeAll+0xcc>)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	b943      	cbnz	r3, 8002640 <xTaskResumeAll+0x1c>
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	e7fe      	b.n	800263e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002640:	f7ff fc00 	bl	8001e44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	3b01      	subs	r3, #1
 8002648:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800264a:	6824      	ldr	r4, [r4, #0]
 800264c:	b12c      	cbz	r4, 800265a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800264e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002650:	f7ff fc1a 	bl	8001e88 <vPortExitCritical>
}
 8002654:	4620      	mov	r0, r4
 8002656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <xTaskResumeAll+0xd0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f5      	beq.n	800264e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002662:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800270c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002666:	4f24      	ldr	r7, [pc, #144]	; (80026f8 <xTaskResumeAll+0xd4>)
 8002668:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002710 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266c:	f8d9 3000 	ldr.w	r3, [r9]
 8002670:	b9e3      	cbnz	r3, 80026ac <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002672:	b10c      	cbz	r4, 8002678 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002674:	f7ff fdd8 	bl	8002228 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002678:	4d20      	ldr	r5, [pc, #128]	; (80026fc <xTaskResumeAll+0xd8>)
 800267a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800267c:	b144      	cbz	r4, 8002690 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800267e:	4e20      	ldr	r6, [pc, #128]	; (8002700 <xTaskResumeAll+0xdc>)
 8002680:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002682:	f7ff ff3d 	bl	8002500 <xTaskIncrementTick>
 8002686:	b100      	cbz	r0, 800268a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002688:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800268a:	3c01      	subs	r4, #1
 800268c:	d1f9      	bne.n	8002682 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800268e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <xTaskResumeAll+0xdc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0da      	beq.n	800264e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <xTaskResumeAll+0xe0>)
 800269a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80026a8:	2401      	movs	r4, #1
 80026aa:	e7d1      	b.n	8002650 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80026ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80026b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b4:	f104 0018 	add.w	r0, r4, #24
 80026b8:	f7ff fb58 	bl	8001d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026bc:	4630      	mov	r0, r6
 80026be:	f7ff fb55 	bl	8001d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	2501      	movs	r5, #1
 80026c8:	fa05 f302 	lsl.w	r3, r5, r2
 80026cc:	2014      	movs	r0, #20
 80026ce:	430b      	orrs	r3, r1
 80026d0:	fb00 8002 	mla	r0, r0, r2, r8
 80026d4:	4631      	mov	r1, r6
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	f7ff fb25 	bl	8001d26 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <xTaskResumeAll+0xe4>)
 80026de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80026e6:	bf24      	itt	cs
 80026e8:	4b05      	ldrcs	r3, [pc, #20]	; (8002700 <xTaskResumeAll+0xdc>)
 80026ea:	601d      	strcs	r5, [r3, #0]
 80026ec:	e7be      	b.n	800266c <xTaskResumeAll+0x48>
 80026ee:	bf00      	nop
 80026f0:	20003cec 	.word	0x20003cec
 80026f4:	20003ce0 	.word	0x20003ce0
 80026f8:	20003cf4 	.word	0x20003cf4
 80026fc:	20003ce8 	.word	0x20003ce8
 8002700:	20003d70 	.word	0x20003d70
 8002704:	e000ed04 	.word	0xe000ed04
 8002708:	20003c48 	.word	0x20003c48
 800270c:	20003d2c 	.word	0x20003d2c
 8002710:	20003c54 	.word	0x20003c54

08002714 <vTaskDelay>:
	{
 8002714:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002716:	b940      	cbnz	r0, 800272a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <vTaskDelay+0x40>)
 800271a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <vTaskDelay+0x44>)
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	b141      	cbz	r1, 8002742 <vTaskDelay+0x2e>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	e7fe      	b.n	8002740 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002742:	f7ff fed5 	bl	80024f0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002746:	f7ff fd81 	bl	800224c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800274a:	f7ff ff6b 	bl	8002624 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800274e:	2800      	cmp	r0, #0
 8002750:	d0e2      	beq.n	8002718 <vTaskDelay+0x4>
 8002752:	bd08      	pop	{r3, pc}
 8002754:	e000ed04 	.word	0xe000ed04
 8002758:	20003cec 	.word	0x20003cec

0800275c <prvIdleTask>:
{
 800275c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800275e:	4e17      	ldr	r6, [pc, #92]	; (80027bc <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002760:	4c17      	ldr	r4, [pc, #92]	; (80027c0 <prvIdleTask+0x64>)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	b963      	cbnz	r3, 8002780 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <prvIdleTask+0x68>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d9f8      	bls.n	8002760 <prvIdleTask+0x4>
				taskYIELD();
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <prvIdleTask+0x6c>)
 8002770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	e7ef      	b.n	8002760 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002780:	f7ff feb6 	bl	80024f0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002784:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002786:	f7ff ff4d 	bl	8002624 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800278a:	2d00      	cmp	r5, #0
 800278c:	d0e9      	beq.n	8002762 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800278e:	f7ff fb59 	bl	8001e44 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002792:	68f3      	ldr	r3, [r6, #12]
 8002794:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002796:	1d28      	adds	r0, r5, #4
 8002798:	f7ff fae8 	bl	8001d6c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <prvIdleTask+0x70>)
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80027aa:	f7ff fb6d 	bl	8001e88 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80027ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027b0:	f7ff fd02 	bl	80021b8 <vPortFree>
			vPortFree( pxTCB );
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff fcff 	bl	80021b8 <vPortFree>
 80027ba:	e7d2      	b.n	8002762 <prvIdleTask+0x6>
 80027bc:	20003d58 	.word	0x20003d58
 80027c0:	20003ce4 	.word	0x20003ce4
 80027c4:	20003c54 	.word	0x20003c54
 80027c8:	e000ed04 	.word	0xe000ed04
 80027cc:	20003ce0 	.word	0x20003ce0

080027d0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <vTaskSwitchContext+0x60>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <vTaskSwitchContext+0x64>)
{
 80027d6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027d8:	b112      	cbz	r2, 80027e0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80027da:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80027e0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <vTaskSwitchContext+0x68>)
 80027e4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f1c3 031f 	rsb	r3, r3, #31
 80027f0:	2214      	movs	r2, #20
 80027f2:	4912      	ldr	r1, [pc, #72]	; (800283c <vTaskSwitchContext+0x6c>)
 80027f4:	435a      	muls	r2, r3
 80027f6:	1888      	adds	r0, r1, r2
 80027f8:	588c      	ldr	r4, [r1, r2]
 80027fa:	b944      	cbnz	r4, 800280e <vTaskSwitchContext+0x3e>
	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	e7fe      	b.n	800280c <vTaskSwitchContext+0x3c>
 800280e:	6844      	ldr	r4, [r0, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	6864      	ldr	r4, [r4, #4]
 8002814:	6044      	str	r4, [r0, #4]
 8002816:	440a      	add	r2, r1
 8002818:	4294      	cmp	r4, r2
 800281a:	bf04      	itt	eq
 800281c:	6862      	ldreq	r2, [r4, #4]
 800281e:	6042      	streq	r2, [r0, #4]
 8002820:	2214      	movs	r2, #20
 8002822:	fb02 1303 	mla	r3, r2, r3, r1
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <vTaskSwitchContext+0x70>)
 800282c:	e7d6      	b.n	80027dc <vTaskSwitchContext+0xc>
 800282e:	bf00      	nop
 8002830:	20003cec 	.word	0x20003cec
 8002834:	20003d70 	.word	0x20003d70
 8002838:	20003cf4 	.word	0x20003cf4
 800283c:	20003c54 	.word	0x20003c54
 8002840:	20003c48 	.word	0x20003c48

08002844 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <xTaskGetSchedulerState+0x18>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b133      	cbz	r3, 8002858 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <xTaskGetSchedulerState+0x1c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002850:	bf0c      	ite	eq
 8002852:	2002      	moveq	r0, #2
 8002854:	2000      	movne	r0, #0
 8002856:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002858:	2001      	movs	r0, #1
	}
 800285a:	4770      	bx	lr
 800285c:	20003d40 	.word	0x20003d40
 8002860:	20003cec 	.word	0x20003cec

08002864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800289c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002868:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800286a:	e003      	b.n	8002874 <LoopCopyDataInit>

0800286c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800286e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002870:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002872:	3104      	adds	r1, #4

08002874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002874:	480b      	ldr	r0, [pc, #44]	; (80028a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002878:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800287c:	d3f6      	bcc.n	800286c <CopyDataInit>
  ldr  r2, =_sbss
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002880:	e002      	b.n	8002888 <LoopFillZerobss>

08002882 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002882:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002884:	f842 3b04 	str.w	r3, [r2], #4

08002888 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800288a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800288c:	d3f9      	bcc.n	8002882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800288e:	f7fe f8e7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002892:	f000 f811 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002896:	f7fd fedd 	bl	8000654 <main>
  bx  lr    
 800289a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800289c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028a0:	080029a0 	.word	0x080029a0
  ldr  r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028a8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80028ac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80028b0:	20003ec0 	.word	0x20003ec0

080028b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC_IRQHandler>
	...

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	4e0d      	ldr	r6, [pc, #52]	; (80028f0 <__libc_init_array+0x38>)
 80028bc:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <__libc_init_array+0x3c>)
 80028be:	1ba4      	subs	r4, r4, r6
 80028c0:	10a4      	asrs	r4, r4, #2
 80028c2:	2500      	movs	r5, #0
 80028c4:	42a5      	cmp	r5, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	4e0b      	ldr	r6, [pc, #44]	; (80028f8 <__libc_init_array+0x40>)
 80028ca:	4c0c      	ldr	r4, [pc, #48]	; (80028fc <__libc_init_array+0x44>)
 80028cc:	f000 f818 	bl	8002900 <_init>
 80028d0:	1ba4      	subs	r4, r4, r6
 80028d2:	10a4      	asrs	r4, r4, #2
 80028d4:	2500      	movs	r5, #0
 80028d6:	42a5      	cmp	r5, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e0:	4798      	blx	r3
 80028e2:	3501      	adds	r5, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ea:	4798      	blx	r3
 80028ec:	3501      	adds	r5, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	08002998 	.word	0x08002998
 80028f4:	08002998 	.word	0x08002998
 80028f8:	08002998 	.word	0x08002998
 80028fc:	0800299c 	.word	0x0800299c

08002900 <_init>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr

0800290c <_fini>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr
