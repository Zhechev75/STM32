
Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001968  08001968  00011968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001998  08001998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080019a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000074  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000080  20000080  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c879  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b3f  00000000  00000000  0002c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035dc  00000000  00000000  0002e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004e0  00000000  00000000  000319d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000780  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003d9f  00000000  00000000  00032630  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002726  00000000  00000000  000363cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038af5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000c10  00000000  00000000  00038b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001950 	.word	0x08001950

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001950 	.word	0x08001950

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
{
 80001da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	7818      	ldrb	r0, [r3, #0]
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ec:	f000 fc28 	bl	8000a40 <HAL_SYSTICK_Config>
 80001f0:	4604      	mov	r4, r0
 80001f2:	b958      	cbnz	r0, 800020c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f4:	2d0f      	cmp	r5, #15
 80001f6:	d809      	bhi.n	800020c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	4602      	mov	r2, r0
 80001fa:	4629      	mov	r1, r5
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 fbea 	bl	80009d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_InitTick+0x44>)
 8000206:	4620      	mov	r0, r4
 8000208:	601d      	str	r5, [r3, #0]
 800020a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800020c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 fbc3 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f001 fa9c 	bl	8001770 <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028

08000264 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000264:	b538      	push	{r3, r4, r5, lr}
 8000266:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000268:	f7ff fff6 	bl	8000258 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800026e:	bf1c      	itt	ne
 8000270:	4b05      	ldrne	r3, [pc, #20]	; (8000288 <HAL_Delay+0x24>)
 8000272:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000274:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000276:	bf18      	it	ne
 8000278:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800027a:	f7ff ffed 	bl	8000258 <HAL_GetTick>
 800027e:	1b40      	subs	r0, r0, r5
 8000280:	4284      	cmp	r4, r0
 8000282:	d8fa      	bhi.n	800027a <HAL_Delay+0x16>
  {
  }
}
 8000284:	bd38      	pop	{r3, r4, r5, pc}
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000

0800028c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800028c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800028e:	6803      	ldr	r3, [r0, #0]
{
 8000290:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000292:	6898      	ldr	r0, [r3, #8]
 8000294:	f000 0003 	and.w	r0, r0, #3
 8000298:	2801      	cmp	r0, #1
 800029a:	d001      	beq.n	80002a0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800029c:	2000      	movs	r0, #0
 800029e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	07d2      	lsls	r2, r2, #31
 80002a4:	d5fa      	bpl.n	800029c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80002a6:	689a      	ldr	r2, [r3, #8]
 80002a8:	f002 020d 	and.w	r2, r2, #13
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	d11b      	bne.n	80002e8 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	f042 0202 	orr.w	r2, r2, #2
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	2203      	movs	r2, #3
 80002ba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80002bc:	f7ff ffcc 	bl	8000258 <HAL_GetTick>
 80002c0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80002c2:	6823      	ldr	r3, [r4, #0]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	07db      	lsls	r3, r3, #31
 80002c8:	d5e8      	bpl.n	800029c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80002ca:	f7ff ffc5 	bl	8000258 <HAL_GetTick>
 80002ce:	1b40      	subs	r0, r0, r5
 80002d0:	2802      	cmp	r0, #2
 80002d2:	d9f6      	bls.n	80002c2 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002d6:	f043 0310 	orr.w	r3, r3, #16
 80002da:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002e4:	2001      	movs	r0, #1
 80002e6:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080002fc <HAL_ADC_Init>:
{
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000300:	2300      	movs	r3, #0
 8000302:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000304:	4604      	mov	r4, r0
 8000306:	2800      	cmp	r0, #0
 8000308:	f000 8091 	beq.w	800042e <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800030c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800030e:	06d2      	lsls	r2, r2, #27
 8000310:	d463      	bmi.n	80003da <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000312:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000314:	2b00      	cmp	r3, #0
 8000316:	d02e      	beq.n	8000376 <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000318:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800031a:	6823      	ldr	r3, [r4, #0]
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	00d1      	lsls	r1, r2, #3
 8000320:	d502      	bpl.n	8000328 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000322:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000324:	009a      	lsls	r2, r3, #2
 8000326:	d50a      	bpl.n	800033e <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8000328:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800032a:	f023 0312 	bic.w	r3, r3, #18
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800033c:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800033e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000340:	06db      	lsls	r3, r3, #27
 8000342:	d46e      	bmi.n	8000422 <HAL_ADC_Init+0x126>
 8000344:	2800      	cmp	r0, #0
 8000346:	d16c      	bne.n	8000422 <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800034c:	f015 0504 	ands.w	r5, r5, #4
 8000350:	d167      	bne.n	8000422 <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 8000352:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000354:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000358:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800035c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000360:	6462      	str	r2, [r4, #68]	; 0x44
 8000362:	4a78      	ldr	r2, [pc, #480]	; (8000544 <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000364:	d065      	beq.n	8000432 <HAL_ADC_Init+0x136>
 8000366:	4293      	cmp	r3, r2
 8000368:	d166      	bne.n	8000438 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800036a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800036e:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000370:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000374:	e066      	b.n	8000444 <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 8000376:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000378:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800037a:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800037c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000380:	f001 fa34 	bl	80017ec <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000384:	6823      	ldr	r3, [r4, #0]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	00de      	lsls	r6, r3, #3
 800038a:	d4c5      	bmi.n	8000318 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 800038c:	4620      	mov	r0, r4
 800038e:	f7ff ff7d 	bl	800028c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000392:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000394:	06d5      	lsls	r5, r2, #27
 8000396:	d4c0      	bmi.n	800031a <HAL_ADC_Init+0x1e>
 8000398:	2800      	cmp	r0, #0
 800039a:	d1be      	bne.n	800031a <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800039c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800039e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003a2:	f023 0302 	bic.w	r3, r3, #2
 80003a6:	f043 0302 	orr.w	r3, r3, #2
 80003aa:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80003ac:	6823      	ldr	r3, [r4, #0]
 80003ae:	689a      	ldr	r2, [r3, #8]
 80003b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80003b4:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003bc:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003be:	4b62      	ldr	r3, [pc, #392]	; (8000548 <HAL_ADC_Init+0x24c>)
 80003c0:	4a62      	ldr	r2, [pc, #392]	; (800054c <HAL_ADC_Init+0x250>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80003c8:	230a      	movs	r3, #10
 80003ca:	4353      	muls	r3, r2
            wait_loop_index--;
 80003cc:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80003ce:	9b00      	ldr	r3, [sp, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0a1      	beq.n	8000318 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 80003d4:	9b00      	ldr	r3, [sp, #0]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	e7f8      	b.n	80003cc <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003da:	4618      	mov	r0, r3
 80003dc:	e7af      	b.n	800033e <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003de:	4293      	cmp	r3, r2
 80003e0:	bf0c      	ite	eq
 80003e2:	9101      	streq	r1, [sp, #4]
 80003e4:	9001      	strne	r0, [sp, #4]
 80003e6:	e02c      	b.n	8000442 <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 80003e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003ea:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80003ee:	f042 0220 	orr.w	r2, r2, #32
 80003f2:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80003f6:	f042 0201 	orr.w	r2, r2, #1
 80003fa:	64a2      	str	r2, [r4, #72]	; 0x48
 80003fc:	e052      	b.n	80004a4 <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80003fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000402:	e06d      	b.n	80004e0 <HAL_ADC_Init+0x1e4>
 8000404:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000408:	e06a      	b.n	80004e0 <HAL_ADC_Init+0x1e4>
 800040a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800040e:	e067      	b.n	80004e0 <HAL_ADC_Init+0x1e4>
 8000410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000414:	e064      	b.n	80004e0 <HAL_ADC_Init+0x1e4>
 8000416:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800041a:	e061      	b.n	80004e0 <HAL_ADC_Init+0x1e4>
 800041c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000420:	e05e      	b.n	80004e0 <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 8000422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000424:	f023 0312 	bic.w	r3, r3, #18
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800042e:	2001      	movs	r0, #1
 8000430:	e085      	b.n	800053e <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000432:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000434:	4a46      	ldr	r2, [pc, #280]	; (8000550 <HAL_ADC_Init+0x254>)
 8000436:	e005      	b.n	8000444 <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000438:	4946      	ldr	r1, [pc, #280]	; (8000554 <HAL_ADC_Init+0x258>)
 800043a:	4a47      	ldr	r2, [pc, #284]	; (8000558 <HAL_ADC_Init+0x25c>)
 800043c:	428b      	cmp	r3, r1
 800043e:	d1ce      	bne.n	80003de <HAL_ADC_Init+0xe2>
 8000440:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000442:	4a46      	ldr	r2, [pc, #280]	; (800055c <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000444:	6899      	ldr	r1, [r3, #8]
 8000446:	f001 0103 	and.w	r1, r1, #3
 800044a:	2901      	cmp	r1, #1
 800044c:	d102      	bne.n	8000454 <HAL_ADC_Init+0x158>
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	07ce      	lsls	r6, r1, #31
 8000452:	d40f      	bmi.n	8000474 <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000454:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000456:	b139      	cbz	r1, 8000468 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000458:	688e      	ldr	r6, [r1, #8]
 800045a:	f006 0603 	and.w	r6, r6, #3
 800045e:	2e01      	cmp	r6, #1
 8000460:	d102      	bne.n	8000468 <HAL_ADC_Init+0x16c>
 8000462:	6809      	ldr	r1, [r1, #0]
 8000464:	07c9      	lsls	r1, r1, #31
 8000466:	d405      	bmi.n	8000474 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000468:	6891      	ldr	r1, [r2, #8]
 800046a:	6866      	ldr	r6, [r4, #4]
 800046c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8000470:	4331      	orrs	r1, r6
 8000472:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000474:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000476:	68a6      	ldr	r6, [r4, #8]
 8000478:	69e2      	ldr	r2, [r4, #28]
 800047a:	2901      	cmp	r1, #1
 800047c:	68e1      	ldr	r1, [r4, #12]
 800047e:	ea41 0106 	orr.w	r1, r1, r6
 8000482:	bf18      	it	ne
 8000484:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 8000488:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 800048c:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800048e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000490:	2d01      	cmp	r5, #1
 8000492:	d107      	bne.n	80004a4 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000494:	2a00      	cmp	r2, #0
 8000496:	d1a7      	bne.n	80003e8 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000498:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800049a:	3a01      	subs	r2, #1
 800049c:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80004a0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	d01d      	beq.n	80004e6 <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004aa:	4d2a      	ldr	r5, [pc, #168]	; (8000554 <HAL_ADC_Init+0x258>)
 80004ac:	42ab      	cmp	r3, r5
 80004ae:	d003      	beq.n	80004b8 <HAL_ADC_Init+0x1bc>
 80004b0:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d1a2      	bne.n	80003fe <HAL_ADC_Init+0x102>
 80004b8:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 80004bc:	d0a2      	beq.n	8000404 <HAL_ADC_Init+0x108>
 80004be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80004c2:	d0a2      	beq.n	800040a <HAL_ADC_Init+0x10e>
 80004c4:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 80004c8:	d0a2      	beq.n	8000410 <HAL_ADC_Init+0x114>
 80004ca:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 80004ce:	d0a2      	beq.n	8000416 <HAL_ADC_Init+0x11a>
 80004d0:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80004d4:	d0a2      	beq.n	800041c <HAL_ADC_Init+0x120>
 80004d6:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80004da:	bf08      	it	eq
 80004dc:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80004e0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80004e2:	4329      	orrs	r1, r5
 80004e4:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80004e6:	689a      	ldr	r2, [r3, #8]
 80004e8:	f012 0f0c 	tst.w	r2, #12
 80004ec:	d10b      	bne.n	8000506 <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004ee:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80004f0:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80004f6:	f022 0202 	bic.w	r2, r2, #2
 80004fa:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80004fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004fe:	0052      	lsls	r2, r2, #1
 8000500:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8000504:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000506:	68dd      	ldr	r5, [r3, #12]
 8000508:	4a15      	ldr	r2, [pc, #84]	; (8000560 <HAL_ADC_Init+0x264>)
 800050a:	402a      	ands	r2, r5
 800050c:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800050e:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000510:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000512:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000514:	bf05      	ittet	eq
 8000516:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000518:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800051a:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800051c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000520:	bf06      	itte	eq
 8000522:	f021 010f 	biceq.w	r1, r1, #15
 8000526:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000528:	f022 020f 	bicne.w	r2, r2, #15
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800052e:	2300      	movs	r3, #0
 8000530:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000534:	f023 0303 	bic.w	r3, r3, #3
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800053e:	b016      	add	sp, #88	; 0x58
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	bf00      	nop
 8000544:	50000100 	.word	0x50000100
 8000548:	20000008 	.word	0x20000008
 800054c:	000f4240 	.word	0x000f4240
 8000550:	50000300 	.word	0x50000300
 8000554:	50000400 	.word	0x50000400
 8000558:	50000500 	.word	0x50000500
 800055c:	50000700 	.word	0x50000700
 8000560:	fff0c007 	.word	0xfff0c007

08000564 <HAL_ADC_ConfigChannel>:
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800056c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000570:	2b01      	cmp	r3, #1
{
 8000572:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000574:	f000 8163 	beq.w	800083e <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000578:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800057a:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800057c:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800057e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000580:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 8000582:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000586:	f100 8155 	bmi.w	8000834 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 800058a:	6848      	ldr	r0, [r1, #4]
 800058c:	680c      	ldr	r4, [r1, #0]
 800058e:	2804      	cmp	r0, #4
 8000590:	f04f 0206 	mov.w	r2, #6
 8000594:	d831      	bhi.n	80005fa <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000596:	4342      	muls	r2, r0
 8000598:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800059a:	201f      	movs	r0, #31
 800059c:	4090      	lsls	r0, r2
 800059e:	ea27 0000 	bic.w	r0, r7, r0
 80005a2:	fa04 f202 	lsl.w	r2, r4, r2
 80005a6:	4302      	orrs	r2, r0
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	f012 0f0c 	tst.w	r2, #12
 80005b0:	d162      	bne.n	8000678 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80005b2:	2c09      	cmp	r4, #9
 80005b4:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80005b8:	688f      	ldr	r7, [r1, #8]
 80005ba:	d946      	bls.n	800064a <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80005bc:	4422      	add	r2, r4
 80005be:	6998      	ldr	r0, [r3, #24]
 80005c0:	3a1e      	subs	r2, #30
 80005c2:	f04f 0e07 	mov.w	lr, #7
 80005c6:	fa0e fe02 	lsl.w	lr, lr, r2
 80005ca:	ea20 000e 	bic.w	r0, r0, lr
 80005ce:	fa07 f202 	lsl.w	r2, r7, r2
 80005d2:	4302      	orrs	r2, r0
 80005d4:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80005dc:	694a      	ldr	r2, [r1, #20]
 80005de:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80005e2:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 80005e6:	690a      	ldr	r2, [r1, #16]
 80005e8:	3a01      	subs	r2, #1
 80005ea:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 80005ee:	2a03      	cmp	r2, #3
 80005f0:	d873      	bhi.n	80006da <HAL_ADC_ConfigChannel+0x176>
 80005f2:	e8df f002 	tbb	[pc, r2]
 80005f6:	5137      	.short	0x5137
 80005f8:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 80005fa:	2809      	cmp	r0, #9
 80005fc:	d80b      	bhi.n	8000616 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80005fe:	4342      	muls	r2, r0
 8000600:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000602:	3a1e      	subs	r2, #30
 8000604:	201f      	movs	r0, #31
 8000606:	4090      	lsls	r0, r2
 8000608:	ea27 0000 	bic.w	r0, r7, r0
 800060c:	fa04 f202 	lsl.w	r2, r4, r2
 8000610:	4302      	orrs	r2, r0
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	e7c9      	b.n	80005aa <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000616:	280e      	cmp	r0, #14
 8000618:	d80b      	bhi.n	8000632 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800061a:	4342      	muls	r2, r0
 800061c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800061e:	3a3c      	subs	r2, #60	; 0x3c
 8000620:	201f      	movs	r0, #31
 8000622:	4090      	lsls	r0, r2
 8000624:	ea27 0000 	bic.w	r0, r7, r0
 8000628:	fa04 f202 	lsl.w	r2, r4, r2
 800062c:	4302      	orrs	r2, r0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38
 8000630:	e7bb      	b.n	80005aa <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000632:	4342      	muls	r2, r0
 8000634:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000636:	3a5a      	subs	r2, #90	; 0x5a
 8000638:	201f      	movs	r0, #31
 800063a:	4090      	lsls	r0, r2
 800063c:	ea27 0000 	bic.w	r0, r7, r0
 8000640:	fa04 f202 	lsl.w	r2, r4, r2
 8000644:	4302      	orrs	r2, r0
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
 8000648:	e7af      	b.n	80005aa <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800064a:	6958      	ldr	r0, [r3, #20]
 800064c:	4422      	add	r2, r4
 800064e:	f04f 0e07 	mov.w	lr, #7
 8000652:	fa0e fe02 	lsl.w	lr, lr, r2
 8000656:	ea20 000e 	bic.w	r0, r0, lr
 800065a:	fa07 f202 	lsl.w	r2, r7, r2
 800065e:	4302      	orrs	r2, r0
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	e7b8      	b.n	80005d6 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000664:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000666:	4f83      	ldr	r7, [pc, #524]	; (8000874 <HAL_ADC_ConfigChannel+0x310>)
 8000668:	4017      	ands	r7, r2
 800066a:	ea47 020c 	orr.w	r2, r7, ip
 800066e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000672:	ea42 020e 	orr.w	r2, r2, lr
 8000676:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000678:	689a      	ldr	r2, [r3, #8]
 800067a:	f002 0203 	and.w	r2, r2, #3
 800067e:	2a01      	cmp	r2, #1
 8000680:	f040 80df 	bne.w	8000842 <HAL_ADC_ConfigChannel+0x2de>
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	07d7      	lsls	r7, r2, #31
 8000688:	f140 80db 	bpl.w	8000842 <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800068c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800068e:	2300      	movs	r3, #0
 8000690:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000694:	b017      	add	sp, #92	; 0x5c
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000698:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800069a:	4f76      	ldr	r7, [pc, #472]	; (8000874 <HAL_ADC_ConfigChannel+0x310>)
 800069c:	4017      	ands	r7, r2
 800069e:	ea47 020c 	orr.w	r2, r7, ip
 80006a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006a6:	ea42 020e 	orr.w	r2, r2, lr
 80006aa:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80006ac:	e7e4      	b.n	8000678 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80006ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80006b0:	4870      	ldr	r0, [pc, #448]	; (8000874 <HAL_ADC_ConfigChannel+0x310>)
 80006b2:	4010      	ands	r0, r2
 80006b4:	ea40 020c 	orr.w	r2, r0, ip
 80006b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006bc:	ea42 020e 	orr.w	r2, r2, lr
 80006c0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80006c2:	e7d9      	b.n	8000678 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80006c4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80006c6:	4a6b      	ldr	r2, [pc, #428]	; (8000874 <HAL_ADC_ConfigChannel+0x310>)
 80006c8:	4002      	ands	r2, r0
 80006ca:	ea42 020c 	orr.w	r2, r2, ip
 80006ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006d2:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80006d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006d8:	e7ce      	b.n	8000678 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80006da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006dc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80006e0:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80006e2:	bf02      	ittt	eq
 80006e4:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80006e6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80006ea:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80006ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80006ee:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80006f2:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80006f4:	bf02      	ittt	eq
 80006f6:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 80006f8:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80006fc:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80006fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000700:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000704:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000706:	bf02      	ittt	eq
 8000708:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800070a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800070e:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000710:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000712:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000716:	4594      	cmp	ip, r2
 8000718:	d1ae      	bne.n	8000678 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800071a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800071c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000720:	e7d9      	b.n	80006d6 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000722:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000726:	2101      	movs	r1, #1
 8000728:	40a1      	lsls	r1, r4
 800072a:	ea22 0201 	bic.w	r2, r2, r1
 800072e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000736:	d01e      	beq.n	8000776 <HAL_ADC_ConfigChannel+0x212>
 8000738:	494f      	ldr	r1, [pc, #316]	; (8000878 <HAL_ADC_ConfigChannel+0x314>)
 800073a:	4a50      	ldr	r2, [pc, #320]	; (800087c <HAL_ADC_ConfigChannel+0x318>)
 800073c:	4850      	ldr	r0, [pc, #320]	; (8000880 <HAL_ADC_ConfigChannel+0x31c>)
 800073e:	4283      	cmp	r3, r0
 8000740:	bf08      	it	eq
 8000742:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000744:	2c10      	cmp	r4, #16
 8000746:	d118      	bne.n	800077a <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000748:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800074a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800074e:	d19d      	bne.n	800068c <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000754:	494a      	ldr	r1, [pc, #296]	; (8000880 <HAL_ADC_ConfigChannel+0x31c>)
 8000756:	d11c      	bne.n	8000792 <HAL_ADC_ConfigChannel+0x22e>
 8000758:	9101      	str	r1, [sp, #4]
 800075a:	e024      	b.n	80007a6 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 800075c:	1c60      	adds	r0, r4, #1
 800075e:	6959      	ldr	r1, [r3, #20]
 8000760:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000764:	2207      	movs	r2, #7
 8000766:	4082      	lsls	r2, r0
 8000768:	ea21 0102 	bic.w	r1, r1, r2
 800076c:	fa06 f200 	lsl.w	r2, r6, r0
 8000770:	430a      	orrs	r2, r1
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	e7dd      	b.n	8000732 <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000776:	4a40      	ldr	r2, [pc, #256]	; (8000878 <HAL_ADC_ConfigChannel+0x314>)
 8000778:	e7e4      	b.n	8000744 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800077a:	2c11      	cmp	r4, #17
 800077c:	d103      	bne.n	8000786 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800077e:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000780:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000784:	e7e3      	b.n	800074e <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000786:	2c12      	cmp	r4, #18
 8000788:	d180      	bne.n	800068c <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800078a:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800078c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000790:	e7dd      	b.n	800074e <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000792:	428b      	cmp	r3, r1
 8000794:	d102      	bne.n	800079c <HAL_ADC_ConfigChannel+0x238>
 8000796:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800079a:	e7dd      	b.n	8000758 <HAL_ADC_ConfigChannel+0x1f4>
 800079c:	4939      	ldr	r1, [pc, #228]	; (8000884 <HAL_ADC_ConfigChannel+0x320>)
 800079e:	483a      	ldr	r0, [pc, #232]	; (8000888 <HAL_ADC_ConfigChannel+0x324>)
 80007a0:	428b      	cmp	r3, r1
 80007a2:	d12b      	bne.n	80007fc <HAL_ADC_ConfigChannel+0x298>
 80007a4:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80007a6:	6899      	ldr	r1, [r3, #8]
 80007a8:	f001 0103 	and.w	r1, r1, #3
 80007ac:	2901      	cmp	r1, #1
 80007ae:	d102      	bne.n	80007b6 <HAL_ADC_ConfigChannel+0x252>
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	07c8      	lsls	r0, r1, #31
 80007b4:	d438      	bmi.n	8000828 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80007b6:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80007b8:	b139      	cbz	r1, 80007ca <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80007ba:	6888      	ldr	r0, [r1, #8]
 80007bc:	f000 0003 	and.w	r0, r0, #3
 80007c0:	2801      	cmp	r0, #1
 80007c2:	d102      	bne.n	80007ca <HAL_ADC_ConfigChannel+0x266>
 80007c4:	6809      	ldr	r1, [r1, #0]
 80007c6:	07c9      	lsls	r1, r1, #31
 80007c8:	d42e      	bmi.n	8000828 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80007ca:	2c10      	cmp	r4, #16
 80007cc:	d11a      	bne.n	8000804 <HAL_ADC_ConfigChannel+0x2a0>
 80007ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d2:	f47f af5b 	bne.w	800068c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80007d6:	6893      	ldr	r3, [r2, #8]
 80007d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007dc:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007de:	4b2b      	ldr	r3, [pc, #172]	; (800088c <HAL_ADC_ConfigChannel+0x328>)
 80007e0:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <HAL_ADC_ConfigChannel+0x32c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80007e8:	230a      	movs	r3, #10
 80007ea:	4353      	muls	r3, r2
            wait_loop_index--;
 80007ec:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80007ee:	9b00      	ldr	r3, [sp, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f43f af4b 	beq.w	800068c <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80007f6:	9b00      	ldr	r3, [sp, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	e7f7      	b.n	80007ec <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80007fc:	4283      	cmp	r3, r0
 80007fe:	bf18      	it	ne
 8000800:	2100      	movne	r1, #0
 8000802:	e7a9      	b.n	8000758 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000804:	2c11      	cmp	r4, #17
 8000806:	d108      	bne.n	800081a <HAL_ADC_ConfigChannel+0x2b6>
 8000808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800080c:	f47f af3e 	bne.w	800068c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000810:	6893      	ldr	r3, [r2, #8]
 8000812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000816:	6093      	str	r3, [r2, #8]
 8000818:	e738      	b.n	800068c <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800081a:	2c12      	cmp	r4, #18
 800081c:	f47f af36 	bne.w	800068c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000820:	6893      	ldr	r3, [r2, #8]
 8000822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000826:	e7f6      	b.n	8000816 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000828:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000830:	2001      	movs	r0, #1
 8000832:	e72c      	b.n	800068e <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000834:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	646b      	str	r3, [r5, #68]	; 0x44
 800083c:	e727      	b.n	800068e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 800083e:	2002      	movs	r0, #2
 8000840:	e728      	b.n	8000694 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000842:	2e01      	cmp	r6, #1
 8000844:	f47f af6d 	bne.w	8000722 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000848:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800084c:	40a6      	lsls	r6, r4
 800084e:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000850:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000852:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000856:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000858:	d980      	bls.n	800075c <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 800085a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800085e:	6999      	ldr	r1, [r3, #24]
 8000860:	3a1b      	subs	r2, #27
 8000862:	2007      	movs	r0, #7
 8000864:	4090      	lsls	r0, r2
 8000866:	ea21 0100 	bic.w	r1, r1, r0
 800086a:	fa06 f202 	lsl.w	r2, r6, r2
 800086e:	430a      	orrs	r2, r1
 8000870:	619a      	str	r2, [r3, #24]
 8000872:	e75e      	b.n	8000732 <HAL_ADC_ConfigChannel+0x1ce>
 8000874:	83fff000 	.word	0x83fff000
 8000878:	50000300 	.word	0x50000300
 800087c:	50000700 	.word	0x50000700
 8000880:	50000100 	.word	0x50000100
 8000884:	50000400 	.word	0x50000400
 8000888:	50000500 	.word	0x50000500
 800088c:	20000008 	.word	0x20000008
 8000890:	000f4240 	.word	0x000f4240

08000894 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000896:	6802      	ldr	r2, [r0, #0]
 8000898:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 800089a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800089e:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008a0:	d101      	bne.n	80008a6 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	e009      	b.n	80008ba <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d102      	bne.n	80008b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 80008aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008ae:	e7f8      	b.n	80008a2 <HAL_ADCEx_MultiModeConfigChannel+0xe>
 80008b0:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80008b2:	4c3d      	ldr	r4, [pc, #244]	; (80009a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d130      	bne.n	800091a <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80008b8:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80008ba:	9c01      	ldr	r4, [sp, #4]
 80008bc:	2c00      	cmp	r4, #0
 80008be:	d058      	beq.n	8000972 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80008c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d056      	beq.n	8000976 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80008c8:	2301      	movs	r3, #1
 80008ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80008ce:	6893      	ldr	r3, [r2, #8]
 80008d0:	075b      	lsls	r3, r3, #29
 80008d2:	d443      	bmi.n	800095c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80008d4:	68a3      	ldr	r3, [r4, #8]
 80008d6:	075f      	lsls	r7, r3, #29
 80008d8:	d440      	bmi.n	800095c <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008da:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80008de:	d020      	beq.n	8000922 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80008e0:	4d32      	ldr	r5, [pc, #200]	; (80009ac <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80008e4:	4e2e      	ldr	r6, [pc, #184]	; (80009a0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80008e6:	42b2      	cmp	r2, r6
 80008e8:	bf08      	it	eq
 80008ea:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80008ec:	680d      	ldr	r5, [r1, #0]
 80008ee:	b1d5      	cbz	r5, 8000926 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80008f0:	684e      	ldr	r6, [r1, #4]
 80008f2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80008f6:	4637      	mov	r7, r6
 80008f8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80008fa:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80008fe:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8000902:	433e      	orrs	r6, r7
 8000904:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000906:	6896      	ldr	r6, [r2, #8]
 8000908:	f006 0603 	and.w	r6, r6, #3
 800090c:	2e01      	cmp	r6, #1
 800090e:	d134      	bne.n	800097a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	07d6      	lsls	r6, r2, #31
 8000914:	d531      	bpl.n	800097a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e025      	b.n	8000966 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800091a:	42a2      	cmp	r2, r4
 800091c:	bf18      	it	ne
 800091e:	2300      	movne	r3, #0
 8000920:	e7bf      	b.n	80008a2 <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000924:	e7e2      	b.n	80008ec <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000926:	6899      	ldr	r1, [r3, #8]
 8000928:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800092c:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800092e:	6891      	ldr	r1, [r2, #8]
 8000930:	f001 0103 	and.w	r1, r1, #3
 8000934:	2901      	cmp	r1, #1
 8000936:	d102      	bne.n	800093e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	07d1      	lsls	r1, r2, #31
 800093c:	d4eb      	bmi.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800093e:	68a2      	ldr	r2, [r4, #8]
 8000940:	f002 0203 	and.w	r2, r2, #3
 8000944:	2a01      	cmp	r2, #1
 8000946:	d102      	bne.n	800094e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	07d2      	lsls	r2, r2, #31
 800094c:	d4e3      	bmi.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000954:	f022 020f 	bic.w	r2, r2, #15
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	e7dc      	b.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800095c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000966:	2200      	movs	r2, #0
 8000968:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 800096c:	4618      	mov	r0, r3
 800096e:	b017      	add	sp, #92	; 0x5c
 8000970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e7fa      	b.n	800096c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8000976:	2302      	movs	r3, #2
 8000978:	e7f8      	b.n	800096c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800097a:	68a2      	ldr	r2, [r4, #8]
 800097c:	f002 0203 	and.w	r2, r2, #3
 8000980:	2a01      	cmp	r2, #1
 8000982:	d102      	bne.n	800098a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000984:	6822      	ldr	r2, [r4, #0]
 8000986:	07d4      	lsls	r4, r2, #31
 8000988:	d4c5      	bmi.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	6889      	ldr	r1, [r1, #8]
 800098e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000992:	430d      	orrs	r5, r1
 8000994:	f022 020f 	bic.w	r2, r2, #15
 8000998:	4315      	orrs	r5, r2
 800099a:	609d      	str	r5, [r3, #8]
 800099c:	e7bb      	b.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 800099e:	bf00      	nop
 80009a0:	50000100 	.word	0x50000100
 80009a4:	50000400 	.word	0x50000400
 80009a8:	50000500 	.word	0x50000500
 80009ac:	50000300 	.word	0x50000300
 80009b0:	50000700 	.word	0x50000700

080009b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009bc:	041b      	lsls	r3, r3, #16
 80009be:	0c1b      	lsrs	r3, r3, #16
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009c4:	0200      	lsls	r0, r0, #8
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80009ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009d0:	60d3      	str	r3, [r2, #12]
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009da:	b530      	push	{r4, r5, lr}
 80009dc:	68dc      	ldr	r4, [r3, #12]
 80009de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	bf28      	it	cs
 80009ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 0501 	mov.w	r5, #1
 80009f4:	fa05 f303 	lsl.w	r3, r5, r3
 80009f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fc:	bf8c      	ite	hi
 80009fe:	3c03      	subhi	r4, #3
 8000a00:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a02:	4019      	ands	r1, r3
 8000a04:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a06:	fa05 f404 	lsl.w	r4, r5, r4
 8000a0a:	3c01      	subs	r4, #1
 8000a0c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000a0e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	ea42 0201 	orr.w	r2, r2, r1
 8000a14:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	bfaf      	iteee	ge
 8000a1a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	f000 000f 	andlt.w	r0, r0, #15
 8000a22:	4b06      	ldrlt	r3, [pc, #24]	; (8000a3c <HAL_NVIC_SetPriority+0x64>)
 8000a24:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	bfa5      	ittet	ge
 8000a28:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000a2c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a34:	bd30      	pop	{r4, r5, pc}
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	e000ed14 	.word	0xe000ed14

08000a40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	3801      	subs	r0, #1
 8000a42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a46:	d20a      	bcs.n	8000a5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	21f0      	movs	r1, #240	; 0xf0
 8000a50:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a6e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a70:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a72:	bf0c      	ite	eq
 8000a74:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a78:	f022 0204 	bicne.w	r2, r2, #4
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	4770      	bx	lr
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a84:	4770      	bx	lr

08000a86 <HAL_SYSTICK_IRQHandler>:
{
 8000a86:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a88:	f7ff fffc 	bl	8000a84 <HAL_SYSTICK_Callback>
 8000a8c:	bd08      	pop	{r3, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a94:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a98:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000c2c <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9c:	4a61      	ldr	r2, [pc, #388]	; (8000c24 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000a9e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000aa0:	fa38 f403 	lsrs.w	r4, r8, r3
 8000aa4:	d102      	bne.n	8000aac <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000aa6:	b003      	add	sp, #12
 8000aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000aac:	f04f 0e01 	mov.w	lr, #1
 8000ab0:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000ab4:	ea18 060e 	ands.w	r6, r8, lr
 8000ab8:	f000 80a6 	beq.w	8000c08 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abc:	684c      	ldr	r4, [r1, #4]
 8000abe:	f024 0710 	bic.w	r7, r4, #16
 8000ac2:	2f02      	cmp	r7, #2
 8000ac4:	d116      	bne.n	8000af4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000ac6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000aca:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ace:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000ad2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ada:	f04f 0c0f 	mov.w	ip, #15
 8000ade:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ae2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae6:	690d      	ldr	r5, [r1, #16]
 8000ae8:	fa05 f50b 	lsl.w	r5, r5, fp
 8000aec:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000af0:	f8ca 5020 	str.w	r5, [sl, #32]
 8000af4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000af8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000afa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000afe:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b02:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b04:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b08:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b0c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b10:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b12:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b16:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000b18:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1c:	d811      	bhi.n	8000b42 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000b1e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b20:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b24:	68cf      	ldr	r7, [r1, #12]
 8000b26:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000b2a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b2e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b30:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b32:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b36:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b3a:	409f      	lsls	r7, r3
 8000b3c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b40:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b42:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b44:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b46:	688f      	ldr	r7, [r1, #8]
 8000b48:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b4c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b4e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b50:	00e5      	lsls	r5, r4, #3
 8000b52:	d559      	bpl.n	8000c08 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000b58:	f045 0501 	orr.w	r5, r5, #1
 8000b5c:	f8c9 5018 	str.w	r5, [r9, #24]
 8000b60:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000b64:	f023 0703 	bic.w	r7, r3, #3
 8000b68:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b6c:	f005 0501 	and.w	r5, r5, #1
 8000b70:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000b74:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b76:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b7c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b7e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b82:	f04f 0e0f 	mov.w	lr, #15
 8000b86:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b8a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b8e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b92:	d03b      	beq.n	8000c0c <HAL_GPIO_Init+0x17c>
 8000b94:	4d24      	ldr	r5, [pc, #144]	; (8000c28 <HAL_GPIO_Init+0x198>)
 8000b96:	42a8      	cmp	r0, r5
 8000b98:	d03a      	beq.n	8000c10 <HAL_GPIO_Init+0x180>
 8000b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b9e:	42a8      	cmp	r0, r5
 8000ba0:	d038      	beq.n	8000c14 <HAL_GPIO_Init+0x184>
 8000ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ba6:	42a8      	cmp	r0, r5
 8000ba8:	d036      	beq.n	8000c18 <HAL_GPIO_Init+0x188>
 8000baa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bae:	42a8      	cmp	r0, r5
 8000bb0:	d034      	beq.n	8000c1c <HAL_GPIO_Init+0x18c>
 8000bb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bb6:	42a8      	cmp	r0, r5
 8000bb8:	d032      	beq.n	8000c20 <HAL_GPIO_Init+0x190>
 8000bba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bbe:	42a8      	cmp	r0, r5
 8000bc0:	bf14      	ite	ne
 8000bc2:	2507      	movne	r5, #7
 8000bc4:	2506      	moveq	r5, #6
 8000bc6:	fa05 f50c 	lsl.w	r5, r5, ip
 8000bca:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bce:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000bd0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	bf0c      	ite	eq
 8000bda:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000bdc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000bde:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000be0:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000be6:	bf0c      	ite	eq
 8000be8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000bea:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000bec:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000bee:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	bf0c      	ite	eq
 8000bf6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000bf8:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000bfa:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000bfc:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c00:	bf54      	ite	pl
 8000c02:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000c04:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000c06:	60d5      	str	r5, [r2, #12]
    position++;
 8000c08:	3301      	adds	r3, #1
 8000c0a:	e749      	b.n	8000aa0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	e7da      	b.n	8000bc6 <HAL_GPIO_Init+0x136>
 8000c10:	2501      	movs	r5, #1
 8000c12:	e7d8      	b.n	8000bc6 <HAL_GPIO_Init+0x136>
 8000c14:	2502      	movs	r5, #2
 8000c16:	e7d6      	b.n	8000bc6 <HAL_GPIO_Init+0x136>
 8000c18:	2503      	movs	r5, #3
 8000c1a:	e7d4      	b.n	8000bc6 <HAL_GPIO_Init+0x136>
 8000c1c:	2504      	movs	r5, #4
 8000c1e:	e7d2      	b.n	8000bc6 <HAL_GPIO_Init+0x136>
 8000c20:	2505      	movs	r5, #5
 8000c22:	e7d0      	b.n	8000bc6 <HAL_GPIO_Init+0x136>
 8000c24:	40010400 	.word	0x40010400
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c30:	6903      	ldr	r3, [r0, #16]
 8000c32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c34:	bf14      	ite	ne
 8000c36:	2001      	movne	r0, #1
 8000c38:	2000      	moveq	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c3c:	b10a      	cbz	r2, 8000c42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c3e:	6181      	str	r1, [r0, #24]
 8000c40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c42:	6281      	str	r1, [r0, #40]	; 0x28
 8000c44:	4770      	bx	lr

08000c46 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000c46:	6943      	ldr	r3, [r0, #20]
 8000c48:	4059      	eors	r1, r3
 8000c4a:	6141      	str	r1, [r0, #20]
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c50:	6803      	ldr	r3, [r0, #0]
{
 8000c52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c56:	07df      	lsls	r7, r3, #31
{
 8000c58:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	d411      	bmi.n	8000c80 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	079e      	lsls	r6, r3, #30
 8000c60:	f100 808b 	bmi.w	8000d7a <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	071c      	lsls	r4, r3, #28
 8000c68:	f100 80fe 	bmi.w	8000e68 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	0758      	lsls	r0, r3, #29
 8000c70:	f100 8147 	bmi.w	8000f02 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c74:	69aa      	ldr	r2, [r5, #24]
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	f040 81dd 	bne.w	8001036 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	e024      	b.n	8000cca <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c80:	4cbd      	ldr	r4, [pc, #756]	; (8000f78 <HAL_RCC_OscConfig+0x328>)
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d00a      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d11c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x80>
 8000c96:	6863      	ldr	r3, [r4, #4]
 8000c98:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca0:	d116      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000caa:	6821      	ldr	r1, [r4, #0]
 8000cac:	fa93 f3a3 	rbit	r3, r3
 8000cb0:	fab3 f383 	clz	r3, r3
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	2201      	movs	r2, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	420b      	tst	r3, r1
 8000cc0:	d0cc      	beq.n	8000c5c <HAL_RCC_OscConfig+0xc>
 8000cc2:	686b      	ldr	r3, [r5, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1c9      	bne.n	8000c5c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cc8:	2001      	movs	r0, #1
}
 8000cca:	b002      	add	sp, #8
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd0:	686b      	ldr	r3, [r5, #4]
 8000cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd6:	d11e      	bne.n	8000d16 <HAL_RCC_OscConfig+0xc6>
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ce0:	f7ff faba 	bl	8000258 <HAL_GetTick>
 8000ce4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ce8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cea:	2701      	movs	r7, #1
 8000cec:	fa96 f3a6 	rbit	r3, r6
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	fa96 f3a6 	rbit	r3, r6
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	f003 031f 	and.w	r3, r3, #31
 8000cfe:	fa07 f303 	lsl.w	r3, r7, r3
 8000d02:	4213      	tst	r3, r2
 8000d04:	d1aa      	bne.n	8000c5c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d06:	f7ff faa7 	bl	8000258 <HAL_GetTick>
 8000d0a:	eba0 0008 	sub.w	r0, r0, r8
 8000d0e:	2864      	cmp	r0, #100	; 0x64
 8000d10:	d9ec      	bls.n	8000cec <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000d12:	2003      	movs	r0, #3
 8000d14:	e7d9      	b.n	8000cca <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	bb0b      	cbnz	r3, 8000d5c <HAL_RCC_OscConfig+0x10c>
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1e:	6023      	str	r3, [r4, #0]
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d28:	f7ff fa96 	bl	8000258 <HAL_GetTick>
 8000d2c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d30:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	2701      	movs	r7, #1
 8000d34:	fa96 f3a6 	rbit	r3, r6
 8000d38:	6822      	ldr	r2, [r4, #0]
 8000d3a:	fa96 f3a6 	rbit	r3, r6
 8000d3e:	fab3 f383 	clz	r3, r3
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	fa07 f303 	lsl.w	r3, r7, r3
 8000d4a:	4213      	tst	r3, r2
 8000d4c:	d086      	beq.n	8000c5c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fa83 	bl	8000258 <HAL_GetTick>
 8000d52:	eba0 0008 	sub.w	r0, r0, r8
 8000d56:	2864      	cmp	r0, #100	; 0x64
 8000d58:	d9ec      	bls.n	8000d34 <HAL_RCC_OscConfig+0xe4>
 8000d5a:	e7da      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	d103      	bne.n	8000d6c <HAL_RCC_OscConfig+0x11c>
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6023      	str	r3, [r4, #0]
 8000d6a:	e7b5      	b.n	8000cd8 <HAL_RCC_OscConfig+0x88>
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6023      	str	r3, [r4, #0]
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d78:	e7b1      	b.n	8000cde <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d7a:	4c7f      	ldr	r4, [pc, #508]	; (8000f78 <HAL_RCC_OscConfig+0x328>)
 8000d7c:	6863      	ldr	r3, [r4, #4]
 8000d7e:	f013 0f0c 	tst.w	r3, #12
 8000d82:	d00a      	beq.n	8000d9a <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d84:	6863      	ldr	r3, [r4, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d124      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x188>
 8000d8e:	6863      	ldr	r3, [r4, #4]
 8000d90:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d98:	d11e      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x188>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da0:	6821      	ldr	r1, [r4, #0]
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	fab3 f383 	clz	r3, r3
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	2201      	movs	r2, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	420b      	tst	r3, r1
 8000db6:	d002      	beq.n	8000dbe <HAL_RCC_OscConfig+0x16e>
 8000db8:	68eb      	ldr	r3, [r5, #12]
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d184      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	6821      	ldr	r1, [r4, #0]
 8000dc0:	23f8      	movs	r3, #248	; 0xf8
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	fab3 f283 	clz	r2, r3
 8000dca:	692b      	ldr	r3, [r5, #16]
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	e745      	b.n	8000c64 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd8:	68ea      	ldr	r2, [r5, #12]
 8000dda:	2601      	movs	r6, #1
 8000ddc:	b30a      	cbz	r2, 8000e22 <HAL_RCC_OscConfig+0x1d2>
 8000dde:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000de2:	fab3 f383 	clz	r3, r3
 8000de6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	2702      	movs	r7, #2
 8000df2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000df4:	f7ff fa30 	bl	8000258 <HAL_GetTick>
 8000df8:	4680      	mov	r8, r0
 8000dfa:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfe:	6822      	ldr	r2, [r4, #0]
 8000e00:	fa97 f3a7 	rbit	r3, r7
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa06 f303 	lsl.w	r3, r6, r3
 8000e10:	4213      	tst	r3, r2
 8000e12:	d1d4      	bne.n	8000dbe <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fa20 	bl	8000258 <HAL_GetTick>
 8000e18:	eba0 0008 	sub.w	r0, r0, r8
 8000e1c:	2802      	cmp	r0, #2
 8000e1e:	d9ec      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1aa>
 8000e20:	e777      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
 8000e22:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000e26:	fab3 f383 	clz	r3, r3
 8000e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	2702      	movs	r7, #2
 8000e36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff fa0e 	bl	8000258 <HAL_GetTick>
 8000e3c:	4680      	mov	r8, r0
 8000e3e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	fa97 f3a7 	rbit	r3, r7
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	fa06 f303 	lsl.w	r3, r6, r3
 8000e54:	4213      	tst	r3, r2
 8000e56:	f43f af05 	beq.w	8000c64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5a:	f7ff f9fd 	bl	8000258 <HAL_GetTick>
 8000e5e:	eba0 0008 	sub.w	r0, r0, r8
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d9eb      	bls.n	8000e3e <HAL_RCC_OscConfig+0x1ee>
 8000e66:	e754      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e68:	696a      	ldr	r2, [r5, #20]
 8000e6a:	4e43      	ldr	r6, [pc, #268]	; (8000f78 <HAL_RCC_OscConfig+0x328>)
 8000e6c:	4943      	ldr	r1, [pc, #268]	; (8000f7c <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	2401      	movs	r4, #1
 8000e70:	b31a      	cbz	r2, 8000eba <HAL_RCC_OscConfig+0x26a>
 8000e72:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	440b      	add	r3, r1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	2702      	movs	r7, #2
 8000e80:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000e82:	f7ff f9e9 	bl	8000258 <HAL_GetTick>
 8000e86:	4680      	mov	r8, r0
 8000e88:	fa97 f3a7 	rbit	r3, r7
 8000e8c:	fa97 f3a7 	rbit	r3, r7
 8000e90:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e94:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000e96:	fa97 f3a7 	rbit	r3, r7
 8000e9a:	fab3 f383 	clz	r3, r3
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	fa04 f303 	lsl.w	r3, r4, r3
 8000ea6:	4213      	tst	r3, r2
 8000ea8:	f47f aee0 	bne.w	8000c6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eac:	f7ff f9d4 	bl	8000258 <HAL_GetTick>
 8000eb0:	eba0 0008 	sub.w	r0, r0, r8
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9e7      	bls.n	8000e88 <HAL_RCC_OscConfig+0x238>
 8000eb8:	e72b      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
 8000eba:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	2702      	movs	r7, #2
 8000ec8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eca:	f7ff f9c5 	bl	8000258 <HAL_GetTick>
 8000ece:	4680      	mov	r8, r0
 8000ed0:	fa97 f3a7 	rbit	r3, r7
 8000ed4:	fa97 f3a7 	rbit	r3, r7
 8000ed8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000edc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000ede:	fa97 f3a7 	rbit	r3, r7
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	fa04 f303 	lsl.w	r3, r4, r3
 8000eee:	4213      	tst	r3, r2
 8000ef0:	f43f aebc 	beq.w	8000c6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff f9b0 	bl	8000258 <HAL_GetTick>
 8000ef8:	eba0 0008 	sub.w	r0, r0, r8
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9e7      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x280>
 8000f00:	e707      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f02:	4c1d      	ldr	r4, [pc, #116]	; (8000f78 <HAL_RCC_OscConfig+0x328>)
 8000f04:	69e3      	ldr	r3, [r4, #28]
 8000f06:	00d9      	lsls	r1, r3, #3
 8000f08:	d434      	bmi.n	8000f74 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	69e3      	ldr	r3, [r4, #28]
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61e3      	str	r3, [r4, #28]
 8000f12:	69e3      	ldr	r3, [r4, #28]
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f1c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4f18      	ldr	r7, [pc, #96]	; (8000f80 <HAL_RCC_OscConfig+0x330>)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	05da      	lsls	r2, r3, #23
 8000f24:	d52e      	bpl.n	8000f84 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f26:	68ab      	ldr	r3, [r5, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d13c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x356>
 8000f2c:	6a23      	ldr	r3, [r4, #32]
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f34:	f7ff f990 	bl	8000258 <HAL_GetTick>
 8000f38:	2702      	movs	r7, #2
 8000f3a:	4682      	mov	sl, r0
 8000f3c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3e:	f04f 0801 	mov.w	r8, #1
 8000f42:	fa97 f3a7 	rbit	r3, r7
 8000f46:	fa97 f3a7 	rbit	r3, r7
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d06b      	beq.n	8001026 <HAL_RCC_OscConfig+0x3d6>
 8000f4e:	6a22      	ldr	r2, [r4, #32]
 8000f50:	fa99 f3a9 	rbit	r3, r9
 8000f54:	fab3 f383 	clz	r3, r3
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	fa08 f303 	lsl.w	r3, r8, r3
 8000f60:	4213      	tst	r3, r2
 8000f62:	d057      	beq.n	8001014 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	f43f ae85 	beq.w	8000c74 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6a:	69e3      	ldr	r3, [r4, #28]
 8000f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61e3      	str	r3, [r4, #28]
 8000f72:	e67f      	b.n	8000c74 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000f74:	2600      	movs	r6, #0
 8000f76:	e7d2      	b.n	8000f1e <HAL_RCC_OscConfig+0x2ce>
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	10908120 	.word	0x10908120
 8000f80:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000f8c:	f7ff f964 	bl	8000258 <HAL_GetTick>
 8000f90:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	d4c6      	bmi.n	8000f26 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f98:	f7ff f95e 	bl	8000258 <HAL_GetTick>
 8000f9c:	eba0 0008 	sub.w	r0, r0, r8
 8000fa0:	2864      	cmp	r0, #100	; 0x64
 8000fa2:	d9f6      	bls.n	8000f92 <HAL_RCC_OscConfig+0x342>
 8000fa4:	e6b5      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa6:	bb3b      	cbnz	r3, 8000ff8 <HAL_RCC_OscConfig+0x3a8>
 8000fa8:	6a23      	ldr	r3, [r4, #32]
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6223      	str	r3, [r4, #32]
 8000fb0:	6a23      	ldr	r3, [r4, #32]
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fb8:	f7ff f94e 	bl	8000258 <HAL_GetTick>
 8000fbc:	2702      	movs	r7, #2
 8000fbe:	4682      	mov	sl, r0
 8000fc0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc2:	f04f 0801 	mov.w	r8, #1
 8000fc6:	fa97 f3a7 	rbit	r3, r7
 8000fca:	fa97 f3a7 	rbit	r3, r7
 8000fce:	b373      	cbz	r3, 800102e <HAL_RCC_OscConfig+0x3de>
 8000fd0:	6a22      	ldr	r2, [r4, #32]
 8000fd2:	fa99 f3a9 	rbit	r3, r9
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	fa08 f303 	lsl.w	r3, r8, r3
 8000fe2:	4213      	tst	r3, r2
 8000fe4:	d0be      	beq.n	8000f64 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff f937 	bl	8000258 <HAL_GetTick>
 8000fea:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fee:	eba0 000a 	sub.w	r0, r0, sl
 8000ff2:	4298      	cmp	r0, r3
 8000ff4:	d9e7      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x376>
 8000ff6:	e68c      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	6a23      	ldr	r3, [r4, #32]
 8000ffc:	d103      	bne.n	8001006 <HAL_RCC_OscConfig+0x3b6>
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6223      	str	r3, [r4, #32]
 8001004:	e792      	b.n	8000f2c <HAL_RCC_OscConfig+0x2dc>
 8001006:	f023 0301 	bic.w	r3, r3, #1
 800100a:	6223      	str	r3, [r4, #32]
 800100c:	6a23      	ldr	r3, [r4, #32]
 800100e:	f023 0304 	bic.w	r3, r3, #4
 8001012:	e78e      	b.n	8000f32 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001014:	f7ff f920 	bl	8000258 <HAL_GetTick>
 8001018:	f241 3388 	movw	r3, #5000	; 0x1388
 800101c:	eba0 000a 	sub.w	r0, r0, sl
 8001020:	4298      	cmp	r0, r3
 8001022:	d98e      	bls.n	8000f42 <HAL_RCC_OscConfig+0x2f2>
 8001024:	e675      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
 8001026:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800102c:	e790      	b.n	8000f50 <HAL_RCC_OscConfig+0x300>
 800102e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001034:	e7cd      	b.n	8000fd2 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001036:	4c44      	ldr	r4, [pc, #272]	; (8001148 <HAL_RCC_OscConfig+0x4f8>)
 8001038:	6863      	ldr	r3, [r4, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b08      	cmp	r3, #8
 8001040:	f43f ae42 	beq.w	8000cc8 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001044:	2a02      	cmp	r2, #2
 8001046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800104a:	d158      	bne.n	80010fe <HAL_RCC_OscConfig+0x4ae>
 800104c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001062:	f7ff f8f9 	bl	8000258 <HAL_GetTick>
 8001066:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800106a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106c:	2601      	movs	r6, #1
 800106e:	fa97 f3a7 	rbit	r3, r7
 8001072:	6822      	ldr	r2, [r4, #0]
 8001074:	fa97 f3a7 	rbit	r3, r7
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa06 f303 	lsl.w	r3, r6, r3
 8001084:	4213      	tst	r3, r2
 8001086:	d133      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800108a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800108c:	f023 030f 	bic.w	r3, r3, #15
 8001090:	4313      	orrs	r3, r2
 8001092:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001094:	6862      	ldr	r2, [r4, #4]
 8001096:	6a2b      	ldr	r3, [r5, #32]
 8001098:	69e9      	ldr	r1, [r5, #28]
 800109a:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800109e:	430b      	orrs	r3, r1
 80010a0:	4313      	orrs	r3, r2
 80010a2:	6063      	str	r3, [r4, #4]
 80010a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80010be:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80010c0:	f7ff f8ca 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80010c6:	4607      	mov	r7, r0
 80010c8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	fa95 f3a5 	rbit	r3, r5
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	fa06 f303 	lsl.w	r3, r6, r3
 80010de:	4213      	tst	r3, r2
 80010e0:	f47f adcc 	bne.w	8000c7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e4:	f7ff f8b8 	bl	8000258 <HAL_GetTick>
 80010e8:	1bc0      	subs	r0, r0, r7
 80010ea:	2802      	cmp	r0, #2
 80010ec:	d9ec      	bls.n	80010c8 <HAL_RCC_OscConfig+0x478>
 80010ee:	e610      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f0:	f7ff f8b2 	bl	8000258 <HAL_GetTick>
 80010f4:	eba0 0008 	sub.w	r0, r0, r8
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9b8      	bls.n	800106e <HAL_RCC_OscConfig+0x41e>
 80010fc:	e609      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
 80010fe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001114:	f7ff f8a0 	bl	8000258 <HAL_GetTick>
 8001118:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800111c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111e:	2601      	movs	r6, #1
 8001120:	fa95 f3a5 	rbit	r3, r5
 8001124:	6822      	ldr	r2, [r4, #0]
 8001126:	fa95 f3a5 	rbit	r3, r5
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	fa06 f303 	lsl.w	r3, r6, r3
 8001136:	4213      	tst	r3, r2
 8001138:	f43f ada0 	beq.w	8000c7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800113c:	f7ff f88c 	bl	8000258 <HAL_GetTick>
 8001140:	1bc0      	subs	r0, r0, r7
 8001142:	2802      	cmp	r0, #2
 8001144:	d9ec      	bls.n	8001120 <HAL_RCC_OscConfig+0x4d0>
 8001146:	e5e4      	b.n	8000d12 <HAL_RCC_OscConfig+0xc2>
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800114c:	4911      	ldr	r1, [pc, #68]	; (8001194 <HAL_RCC_GetSysClockFreq+0x48>)
 800114e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001150:	f003 020c 	and.w	r2, r3, #12
 8001154:	2a08      	cmp	r2, #8
 8001156:	d11a      	bne.n	800118e <HAL_RCC_GetSysClockFreq+0x42>
 8001158:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800115c:	fa92 f2a2 	rbit	r2, r2
 8001160:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001162:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001166:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001168:	fa90 f0a0 	rbit	r0, r0
 800116c:	fab0 f080 	clz	r0, r0
 8001170:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001174:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001178:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800117a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <HAL_RCC_GetSysClockFreq+0x50>)
 8001180:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001184:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001188:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800118a:	4348      	muls	r0, r1
 800118c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	08001968 	.word	0x08001968
 800119c:	08001978 	.word	0x08001978
 80011a0:	007a1200 	.word	0x007a1200

080011a4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a4:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_RCC_ClockConfig+0x174>)
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	428b      	cmp	r3, r1
{
 80011ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b2:	4606      	mov	r6, r0
 80011b4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b6:	d330      	bcc.n	800121a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b8:	6832      	ldr	r2, [r6, #0]
 80011ba:	0791      	lsls	r1, r2, #30
 80011bc:	d43a      	bmi.n	8001234 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011be:	07d2      	lsls	r2, r2, #31
 80011c0:	d440      	bmi.n	8001244 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c2:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_RCC_ClockConfig+0x174>)
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	429d      	cmp	r5, r3
 80011cc:	f0c0 8092 	bcc.w	80012f4 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	6832      	ldr	r2, [r6, #0]
 80011d2:	4c52      	ldr	r4, [pc, #328]	; (800131c <HAL_RCC_ClockConfig+0x178>)
 80011d4:	f012 0f04 	tst.w	r2, #4
 80011d8:	f040 8097 	bne.w	800130a <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011dc:	0713      	lsls	r3, r2, #28
 80011de:	d506      	bpl.n	80011ee <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e0:	6863      	ldr	r3, [r4, #4]
 80011e2:	6932      	ldr	r2, [r6, #16]
 80011e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011ec:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011ee:	f7ff ffad 	bl	800114c <HAL_RCC_GetSysClockFreq>
 80011f2:	6863      	ldr	r3, [r4, #4]
 80011f4:	22f0      	movs	r2, #240	; 0xf0
 80011f6:	fa92 f2a2 	rbit	r2, r2
 80011fa:	fab2 f282 	clz	r2, r2
 80011fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001202:	40d3      	lsrs	r3, r2
 8001204:	4a46      	ldr	r2, [pc, #280]	; (8001320 <HAL_RCC_ClockConfig+0x17c>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	40d8      	lsrs	r0, r3
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_ClockConfig+0x180>)
 800120c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f7fe ffe0 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8001214:	2000      	movs	r0, #0
}
 8001216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	f023 0307 	bic.w	r3, r3, #7
 8001220:	430b      	orrs	r3, r1
 8001222:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	4299      	cmp	r1, r3
 800122c:	d0c4      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
 8001230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001234:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_RCC_ClockConfig+0x178>)
 8001236:	68b0      	ldr	r0, [r6, #8]
 8001238:	684b      	ldr	r3, [r1, #4]
 800123a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800123e:	4303      	orrs	r3, r0
 8001240:	604b      	str	r3, [r1, #4]
 8001242:	e7bc      	b.n	80011be <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001244:	6872      	ldr	r2, [r6, #4]
 8001246:	4c35      	ldr	r4, [pc, #212]	; (800131c <HAL_RCC_ClockConfig+0x178>)
 8001248:	2a01      	cmp	r2, #1
 800124a:	d128      	bne.n	800129e <HAL_RCC_ClockConfig+0xfa>
 800124c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001250:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	6821      	ldr	r1, [r4, #0]
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	d0e1      	beq.n	800122e <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126a:	6863      	ldr	r3, [r4, #4]
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	431a      	orrs	r2, r3
 8001272:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001274:	f7fe fff0 	bl	8000258 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001278:	6873      	ldr	r3, [r6, #4]
 800127a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800127c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127e:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001282:	d11f      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001284:	6863      	ldr	r3, [r4, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d099      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128e:	f7fe ffe3 	bl	8000258 <HAL_GetTick>
 8001292:	1bc0      	subs	r0, r0, r7
 8001294:	4540      	cmp	r0, r8
 8001296:	d9f5      	bls.n	8001284 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001298:	2003      	movs	r0, #3
 800129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	2a02      	cmp	r2, #2
 80012a0:	bf0c      	ite	eq
 80012a2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80012a6:	2302      	movne	r3, #2
 80012a8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4203      	tst	r3, r0
 80012c2:	e7d1      	b.n	8001268 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d110      	bne.n	80012ea <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	f43f af77 	beq.w	80011c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d4:	f7fe ffc0 	bl	8000258 <HAL_GetTick>
 80012d8:	1bc0      	subs	r0, r0, r7
 80012da:	4540      	cmp	r0, r8
 80012dc:	d9f4      	bls.n	80012c8 <HAL_RCC_ClockConfig+0x124>
 80012de:	e7db      	b.n	8001298 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7fe ffba 	bl	8000258 <HAL_GetTick>
 80012e4:	1bc0      	subs	r0, r0, r7
 80012e6:	4540      	cmp	r0, r8
 80012e8:	d8d6      	bhi.n	8001298 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ea:	6863      	ldr	r3, [r4, #4]
 80012ec:	f013 0f0c 	tst.w	r3, #12
 80012f0:	d1f6      	bne.n	80012e0 <HAL_RCC_ClockConfig+0x13c>
 80012f2:	e766      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f4:	6813      	ldr	r3, [r2, #0]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	432b      	orrs	r3, r5
 80012fc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	429d      	cmp	r5, r3
 8001306:	d192      	bne.n	800122e <HAL_RCC_ClockConfig+0x8a>
 8001308:	e762      	b.n	80011d0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	68f1      	ldr	r1, [r6, #12]
 800130e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001312:	430b      	orrs	r3, r1
 8001314:	6063      	str	r3, [r4, #4]
 8001316:	e761      	b.n	80011dc <HAL_RCC_ClockConfig+0x38>
 8001318:	40022000 	.word	0x40022000
 800131c:	40021000 	.word	0x40021000
 8001320:	08001988 	.word	0x08001988
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <HAL_RCC_GetHCLKFreq+0x8>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001334:	6803      	ldr	r3, [r0, #0]
{
 8001336:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800133a:	03df      	lsls	r7, r3, #15
{
 800133c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800133e:	d523      	bpl.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001340:	4d9b      	ldr	r5, [pc, #620]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001342:	69eb      	ldr	r3, [r5, #28]
 8001344:	00de      	lsls	r6, r3, #3
 8001346:	f100 80d7 	bmi.w	80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	69eb      	ldr	r3, [r5, #28]
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	61eb      	str	r3, [r5, #28]
 8001352:	69eb      	ldr	r3, [r5, #28]
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800135c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4f95      	ldr	r7, [pc, #596]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	05d8      	lsls	r0, r3, #23
 8001364:	f140 80ca 	bpl.w	80014fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001368:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800136a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800136e:	f040 80da 	bne.w	8001526 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001372:	6a2b      	ldr	r3, [r5, #32]
 8001374:	6862      	ldr	r2, [r4, #4]
 8001376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137a:	4313      	orrs	r3, r2
 800137c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800137e:	b11e      	cbz	r6, 8001388 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001380:	69eb      	ldr	r3, [r5, #28]
 8001382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001386:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	07c3      	lsls	r3, r0, #31
 800138c:	d506      	bpl.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800138e:	4a88      	ldr	r2, [pc, #544]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001390:	68a1      	ldr	r1, [r4, #8]
 8001392:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001394:	f023 0303 	bic.w	r3, r3, #3
 8001398:	430b      	orrs	r3, r1
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800139c:	0787      	lsls	r7, r0, #30
 800139e:	d506      	bpl.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013a0:	4a83      	ldr	r2, [pc, #524]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013a2:	68e1      	ldr	r1, [r4, #12]
 80013a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80013ae:	0746      	lsls	r6, r0, #29
 80013b0:	d506      	bpl.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013b2:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013b4:	6921      	ldr	r1, [r4, #16]
 80013b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013b8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80013bc:	430b      	orrs	r3, r1
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013c0:	0685      	lsls	r5, r0, #26
 80013c2:	d506      	bpl.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013c4:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013c6:	69e1      	ldr	r1, [r4, #28]
 80013c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013ca:	f023 0310 	bic.w	r3, r3, #16
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013d2:	0381      	lsls	r1, r0, #14
 80013d4:	d506      	bpl.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80013d6:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80013da:	6853      	ldr	r3, [r2, #4]
 80013dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80013e4:	0642      	lsls	r2, r0, #25
 80013e6:	d506      	bpl.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80013e8:	4a71      	ldr	r2, [pc, #452]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013ea:	6a21      	ldr	r1, [r4, #32]
 80013ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013ee:	f023 0320 	bic.w	r3, r3, #32
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013f6:	0343      	lsls	r3, r0, #13
 80013f8:	d506      	bpl.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013fa:	4a6d      	ldr	r2, [pc, #436]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001404:	430b      	orrs	r3, r1
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001408:	0707      	lsls	r7, r0, #28
 800140a:	d506      	bpl.n	800141a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800140c:	4a68      	ldr	r2, [pc, #416]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800140e:	6961      	ldr	r1, [r4, #20]
 8001410:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001412:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001416:	430b      	orrs	r3, r1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800141a:	06c6      	lsls	r6, r0, #27
 800141c:	d506      	bpl.n	800142c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800141e:	4a64      	ldr	r2, [pc, #400]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001420:	69a1      	ldr	r1, [r4, #24]
 8001422:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001424:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001428:	430b      	orrs	r3, r1
 800142a:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800142c:	0585      	lsls	r5, r0, #22
 800142e:	d506      	bpl.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001430:	4a5f      	ldr	r2, [pc, #380]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001432:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001434:	6853      	ldr	r3, [r2, #4]
 8001436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800143a:	430b      	orrs	r3, r1
 800143c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800143e:	0601      	lsls	r1, r0, #24
 8001440:	d506      	bpl.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001442:	4a5b      	ldr	r2, [pc, #364]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001444:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001446:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001448:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800144c:	430b      	orrs	r3, r1
 800144e:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001450:	05c2      	lsls	r2, r0, #23
 8001452:	d506      	bpl.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001454:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001456:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001458:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800145a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800145e:	430b      	orrs	r3, r1
 8001460:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001462:	04c3      	lsls	r3, r0, #19
 8001464:	d506      	bpl.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001466:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800146a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800146c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001470:	430b      	orrs	r3, r1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001474:	0487      	lsls	r7, r0, #18
 8001476:	d506      	bpl.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001478:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800147a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800147c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001482:	430b      	orrs	r3, r1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001486:	02c6      	lsls	r6, r0, #11
 8001488:	d506      	bpl.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800148a:	4a49      	ldr	r2, [pc, #292]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800148c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800148e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001494:	430b      	orrs	r3, r1
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001498:	0285      	lsls	r5, r0, #10
 800149a:	d506      	bpl.n	80014aa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800149c:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800149e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80014a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80014a6:	430b      	orrs	r3, r1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80014aa:	0241      	lsls	r1, r0, #9
 80014ac:	d506      	bpl.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80014ae:	4a40      	ldr	r2, [pc, #256]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80014b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80014bc:	0202      	lsls	r2, r0, #8
 80014be:	d506      	bpl.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80014c0:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80014c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ca:	430b      	orrs	r3, r1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80014ce:	01c3      	lsls	r3, r0, #7
 80014d0:	d506      	bpl.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80014d2:	4a37      	ldr	r2, [pc, #220]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80014d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014dc:	430b      	orrs	r3, r1
 80014de:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80014e0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80014e4:	d01c      	beq.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80014e6:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80014ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
 80014f6:	e013      	b.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80014f8:	2600      	movs	r6, #0
 80014fa:	e730      	b.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001502:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001504:	f7fe fea8 	bl	8000258 <HAL_GetTick>
 8001508:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	05d9      	lsls	r1, r3, #23
 800150e:	f53f af2b 	bmi.w	8001368 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7fe fea1 	bl	8000258 <HAL_GetTick>
 8001516:	eba0 0008 	sub.w	r0, r0, r8
 800151a:	2864      	cmp	r0, #100	; 0x64
 800151c:	d9f5      	bls.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800151e:	2003      	movs	r0, #3
}
 8001520:	b002      	add	sp, #8
 8001522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001526:	6862      	ldr	r2, [r4, #4]
 8001528:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800152c:	4293      	cmp	r3, r2
 800152e:	f43f af20 	beq.w	8001372 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001532:	6a29      	ldr	r1, [r5, #32]
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800153c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001540:	f8df e074 	ldr.w	lr, [pc, #116]	; 80015b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001544:	fab2 f282 	clz	r2, r2
 8001548:	4472      	add	r2, lr
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	2701      	movs	r7, #1
 800154e:	6017      	str	r7, [r2, #0]
 8001550:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	4473      	add	r3, lr
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001560:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001562:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001564:	f57f af05 	bpl.w	8001372 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001568:	f7fe fe76 	bl	8000258 <HAL_GetTick>
 800156c:	f04f 0802 	mov.w	r8, #2
 8001570:	4682      	mov	sl, r0
 8001572:	46c1      	mov	r9, r8
 8001574:	fa98 f3a8 	rbit	r3, r8
 8001578:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	b1a3      	cbz	r3, 80015a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800157e:	6a2a      	ldr	r2, [r5, #32]
 8001580:	fa99 f3a9 	rbit	r3, r9
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	fa07 f303 	lsl.w	r3, r7, r3
 8001590:	4213      	tst	r3, r2
 8001592:	f47f aeee 	bne.w	8001372 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7fe fe5f 	bl	8000258 <HAL_GetTick>
 800159a:	f241 3388 	movw	r3, #5000	; 0x1388
 800159e:	eba0 000a 	sub.w	r0, r0, sl
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d9e6      	bls.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80015a6:	e7ba      	b.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80015a8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80015ae:	e7e7      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40007000 	.word	0x40007000
 80015b8:	10908100 	.word	0x10908100

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b510      	push	{r4, lr}
 80015be:	b0a6      	sub	sp, #152	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ca:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015cc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80015ce:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d2:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80015d6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80015d8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015da:	f7ff fb39 	bl	8000c50 <HAL_RCC_OscConfig>
 80015de:	4601      	mov	r1, r0
 80015e0:	b100      	cbz	r0, 80015e4 <SystemClock_Config+0x28>
 80015e2:	e7fe      	b.n	80015e2 <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ec:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ee:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015f0:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015f2:	f7ff fdd7 	bl	80011a4 <HAL_RCC_ClockConfig>
 80015f6:	b100      	cbz	r0, 80015fa <SystemClock_Config+0x3e>
 80015f8:	e7fe      	b.n	80015f8 <SystemClock_Config+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fe:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001604:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001606:	f7ff fe95 	bl	8001334 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4604      	mov	r4, r0
 800160c:	b100      	cbz	r0, 8001610 <SystemClock_Config+0x54>
 800160e:	e7fe      	b.n	800160e <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001610:	f7ff fe8a 	bl	8001328 <HAL_RCC_GetHCLKFreq>
 8001614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001618:	fbb0 f0f3 	udiv	r0, r0, r3
 800161c:	f7ff fa10 	bl	8000a40 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001620:	2004      	movs	r0, #4
 8001622:	f7ff fa23 	bl	8000a6c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001626:	4622      	mov	r2, r4
 8001628:	4621      	mov	r1, r4
 800162a:	f04f 30ff 	mov.w	r0, #4294967295
 800162e:	f7ff f9d3 	bl	80009d8 <HAL_NVIC_SetPriority>
}
 8001632:	b026      	add	sp, #152	; 0x98
 8001634:	bd10      	pop	{r4, pc}
	...

08001638 <main>:
{
 8001638:	b500      	push	{lr}
 800163a:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800163c:	f7fe fdee 	bl	800021c <HAL_Init>
  SystemClock_Config();
 8001640:	f7ff ffbc 	bl	80015bc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <main+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001646:	4847      	ldr	r0, [pc, #284]	; (8001764 <main+0x12c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001648:	695a      	ldr	r2, [r3, #20]
  hadc1.Instance = ADC1;
 800164a:	4c47      	ldr	r4, [pc, #284]	; (8001768 <main+0x130>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800166a:	9202      	str	r2, [sp, #8]
 800166c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800167c:	9203      	str	r2, [sp, #12]
 800167e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001686:	615a      	str	r2, [r3, #20]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001692:	f44f 4180 	mov.w	r1, #16384	; 0x4000

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001696:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800169a:	f7ff facf 	bl	8000c3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800169e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a2:	a908      	add	r1, sp, #32
 80016a4:	482f      	ldr	r0, [pc, #188]	; (8001764 <main+0x12c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80016a6:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	f7ff f9ef 	bl	8000a90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	a908      	add	r1, sp, #32
 80016b8:	482a      	ldr	r0, [pc, #168]	; (8001764 <main+0x12c>)
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ba:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f7ff f9e5 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016c6:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	4828      	ldr	r0, [pc, #160]	; (800176c <main+0x134>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ca:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d0:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f7ff f9dd 	bl	8000a90 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80016d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016da:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016de:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e0:	2304      	movs	r3, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e2:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016e4:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ea:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ec:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ee:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016f0:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016f2:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016f4:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016f6:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016f8:	63a5      	str	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016fa:	f7fe fdff 	bl	80002fc <HAL_ADC_Init>
 80016fe:	b100      	cbz	r0, 8001702 <main+0xca>
 8001700:	e7fe      	b.n	8001700 <main+0xc8>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001702:	a90e      	add	r1, sp, #56	; 0x38
 8001704:	f841 0d24 	str.w	r0, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff f8c3 	bl	8000894 <HAL_ADCEx_MultiModeConfigChannel>
 800170e:	b100      	cbz	r0, 8001712 <main+0xda>
 8001710:	e7fe      	b.n	8001710 <main+0xd8>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001712:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001714:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001716:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8001718:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171a:	a908      	add	r1, sp, #32
 800171c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800171e:	9608      	str	r6, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001720:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001722:	f7fe ff1f 	bl	8000564 <HAL_ADC_ConfigChannel>
 8001726:	b100      	cbz	r0, 800172a <main+0xf2>
 8001728:	e7fe      	b.n	8001728 <main+0xf0>
  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_RESET)
 800172a:	4d10      	ldr	r5, [pc, #64]	; (800176c <main+0x134>)
  		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800172c:	4c0d      	ldr	r4, [pc, #52]	; (8001764 <main+0x12c>)
  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_RESET)
 800172e:	2120      	movs	r1, #32
 8001730:	4628      	mov	r0, r5
 8001732:	f7ff fa7d 	bl	8000c30 <HAL_GPIO_ReadPin>
 8001736:	2800      	cmp	r0, #0
 8001738:	d1f9      	bne.n	800172e <main+0xf6>
  		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800173a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff fa81 	bl	8000c46 <HAL_GPIO_TogglePin>
  		  HAL_Delay(1000);
 8001744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001748:	f7fe fd8c 	bl	8000264 <HAL_Delay>
  		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800174c:	4620      	mov	r0, r4
 800174e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001752:	f7ff fa78 	bl	8000c46 <HAL_GPIO_TogglePin>
  		  HAL_Delay(1000);
 8001756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175a:	f7fe fd83 	bl	8000264 <HAL_Delay>
 800175e:	e7e6      	b.n	800172e <main+0xf6>
 8001760:	40021000 	.word	0x40021000
 8001764:	48000c00 	.word	0x48000c00
 8001768:	2000002c 	.word	0x2000002c
 800176c:	48000400 	.word	0x48000400

08001770 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_MspInit+0x78>)
{
 8001772:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	f7ff f914 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	4611      	mov	r1, r2
 8001790:	f06f 000b 	mvn.w	r0, #11
 8001794:	f7ff f920 	bl	80009d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	4611      	mov	r1, r2
 800179c:	f06f 000a 	mvn.w	r0, #10
 80017a0:	f7ff f91a 	bl	80009d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	4611      	mov	r1, r2
 80017a8:	f06f 0009 	mvn.w	r0, #9
 80017ac:	f7ff f914 	bl	80009d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	4611      	mov	r1, r2
 80017b4:	f06f 0004 	mvn.w	r0, #4
 80017b8:	f7ff f90e 	bl	80009d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	4611      	mov	r1, r2
 80017c0:	f06f 0003 	mvn.w	r0, #3
 80017c4:	f7ff f908 	bl	80009d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	4611      	mov	r1, r2
 80017cc:	f06f 0001 	mvn.w	r0, #1
 80017d0:	f7ff f902 	bl	80009d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	4611      	mov	r1, r2
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff f8fc 	bl	80009d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e0:	b003      	add	sp, #12
 80017e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80017ee:	6803      	ldr	r3, [r0, #0]
 80017f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f4:	d117      	bne.n	8001826 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017f6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80017fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2303      	movs	r3, #3
 8001818:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f7ff f935 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001826:	b007      	add	sp, #28
 8001828:	f85d fb04 	ldr.w	pc, [sp], #4

0800182c <NMI_Handler>:
 800182c:	4770      	bx	lr

0800182e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800182e:	e7fe      	b.n	800182e <HardFault_Handler>

08001830 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler>

08001832 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler>

08001834 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler>

08001836 <SVC_Handler>:
 8001836:	4770      	bx	lr

08001838 <DebugMon_Handler>:
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800183c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f7fe fcff 	bl	8000240 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001846:	f7ff b91e 	b.w	8000a86 <HAL_SYSTICK_IRQHandler>
	...

0800184c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4915      	ldr	r1, [pc, #84]	; (80018a4 <SystemInit+0x58>)
 800184e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001852:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <SystemInit+0x5c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001864:	6858      	ldr	r0, [r3, #4]
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <SystemInit+0x60>)
 8001868:	4002      	ands	r2, r0
 800186a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001872:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001876:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800187e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001886:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188a:	f022 020f 	bic.w	r2, r2, #15
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001890:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <SystemInit+0x64>)
 8001894:	4002      	ands	r2, r0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018a0:	608b      	str	r3, [r1, #8]
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00
 80018a8:	40021000 	.word	0x40021000
 80018ac:	f87fc00c 	.word	0xf87fc00c
 80018b0:	ff00fccc 	.word	0xff00fccc

080018b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ba:	e003      	b.n	80018c4 <LoopCopyDataInit>

080018bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018c2:	3104      	adds	r1, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018cc:	d3f6      	bcc.n	80018bc <CopyDataInit>
	ldr	r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80018d0:	e002      	b.n	80018d8 <LoopFillZerobss>

080018d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018d4:	f842 3b04 	str.w	r3, [r2], #4

080018d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <LoopForever+0x16>)
	cmp	r2, r3
 80018da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018dc:	d3f9      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018de:	f7ff ffb5 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f000 f811 	bl	8001908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e6:	f7ff fea7 	bl	8001638 <main>

080018ea <LoopForever>:

LoopForever:
    b LoopForever
 80018ea:	e7fe      	b.n	80018ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018ec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80018f0:	080019a0 	.word	0x080019a0
	ldr	r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018f8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80018fc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001900:	20000080 	.word	0x20000080

08001904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_2_IRQHandler>
	...

08001908 <__libc_init_array>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	4e0d      	ldr	r6, [pc, #52]	; (8001940 <__libc_init_array+0x38>)
 800190c:	4c0d      	ldr	r4, [pc, #52]	; (8001944 <__libc_init_array+0x3c>)
 800190e:	1ba4      	subs	r4, r4, r6
 8001910:	10a4      	asrs	r4, r4, #2
 8001912:	2500      	movs	r5, #0
 8001914:	42a5      	cmp	r5, r4
 8001916:	d109      	bne.n	800192c <__libc_init_array+0x24>
 8001918:	4e0b      	ldr	r6, [pc, #44]	; (8001948 <__libc_init_array+0x40>)
 800191a:	4c0c      	ldr	r4, [pc, #48]	; (800194c <__libc_init_array+0x44>)
 800191c:	f000 f818 	bl	8001950 <_init>
 8001920:	1ba4      	subs	r4, r4, r6
 8001922:	10a4      	asrs	r4, r4, #2
 8001924:	2500      	movs	r5, #0
 8001926:	42a5      	cmp	r5, r4
 8001928:	d105      	bne.n	8001936 <__libc_init_array+0x2e>
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001930:	4798      	blx	r3
 8001932:	3501      	adds	r5, #1
 8001934:	e7ee      	b.n	8001914 <__libc_init_array+0xc>
 8001936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800193a:	4798      	blx	r3
 800193c:	3501      	adds	r5, #1
 800193e:	e7f2      	b.n	8001926 <__libc_init_array+0x1e>
 8001940:	08001998 	.word	0x08001998
 8001944:	08001998 	.word	0x08001998
 8001948:	08001998 	.word	0x08001998
 800194c:	0800199c 	.word	0x0800199c

08001950 <_init>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr

0800195c <_fini>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr
