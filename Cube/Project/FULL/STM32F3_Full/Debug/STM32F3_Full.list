
STM32F3_Full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          00000e8c  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000efc  20000efc  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020edd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f98  00000000  00000000  00040f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bd0b  00000000  00000000  00044f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fa8  00000000  00000000  00050c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001418  00000000  00000000  00051bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000098c9  00000000  00000000  00052fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000062c4  00000000  00000000  0005c8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00062b6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035bc  00000000  00000000  00062bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000661a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  00066244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042fc 	.word	0x080042fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080042fc 	.word	0x080042fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	printf("ledON");
 8000282:	4c07      	ldr	r4, [pc, #28]	; (80002a0 <StartDefaultTask+0x20>)
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f001 f965 	bl	800155a <HAL_GPIO_TogglePin>
	printf("ledON");
 8000290:	4620      	mov	r0, r4
 8000292:	f003 f8f5 	bl	8003480 <iprintf>
    osDelay(1000);
 8000296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029a:	f002 fadf 	bl	800285c <osDelay>
 800029e:	e7f1      	b.n	8000284 <StartDefaultTask+0x4>
 80002a0:	08004350 	.word	0x08004350

080002a4 <StartTask03>:
  /* USER CODE END StartTask02 */
}

/* StartTask03 function */
void StartTask03(void const * argument)
{
 80002a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f002 fad8 	bl	800285c <osDelay>
 80002ac:	e7fb      	b.n	80002a6 <StartTask03+0x2>

080002ae <StartTask02>:
 80002ae:	b508      	push	{r3, lr}
 80002b0:	2001      	movs	r0, #1
 80002b2:	f002 fad3 	bl	800285c <osDelay>
 80002b6:	e7fb      	b.n	80002b0 <StartTask02+0x2>

080002b8 <SystemClock_Config>:
{
 80002b8:	b530      	push	{r4, r5, lr}
 80002ba:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002c8:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002d2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f001 f945 	bl	8001564 <HAL_RCC_OscConfig>
 80002da:	4601      	mov	r1, r0
 80002dc:	b100      	cbz	r0, 80002e0 <SystemClock_Config+0x28>
 80002de:	e7fe      	b.n	80002de <SystemClock_Config+0x26>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	240f      	movs	r4, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002e2:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002ee:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f0:	f001 fbe2 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80002f4:	b100      	cbz	r0, 80002f8 <SystemClock_Config+0x40>
 80002f6:	e7fe      	b.n	80002f6 <SystemClock_Config+0x3e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80002f8:	2381      	movs	r3, #129	; 0x81
 80002fa:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002fc:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000304:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	f001 fced 	bl	8001ce4 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4605      	mov	r5, r0
 800030c:	b100      	cbz	r0, 8000310 <SystemClock_Config+0x58>
 800030e:	e7fe      	b.n	800030e <SystemClock_Config+0x56>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000310:	f001 fc94 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8000314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000318:	fbb0 f0f3 	udiv	r0, r0, r3
 800031c:	f001 f802 	bl	8001324 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000320:	2004      	movs	r0, #4
 8000322:	f001 f815 	bl	8001350 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000326:	462a      	mov	r2, r5
 8000328:	4621      	mov	r1, r4
 800032a:	f04f 30ff 	mov.w	r0, #4294967295
 800032e:	f000 ffb9 	bl	80012a4 <HAL_NVIC_SetPriority>
}
 8000332:	b027      	add	sp, #156	; 0x9c
 8000334:	bd30      	pop	{r4, r5, pc}
	...

08000338 <main>:
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 800033c:	f000 f9e6 	bl	800070c <HAL_Init>
  SystemClock_Config();
 8000340:	f7ff ffba 	bl	80002b8 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000344:	4b54      	ldr	r3, [pc, #336]	; (8000498 <main+0x160>)
  hadc1.Instance = ADC1;
 8000346:	4c55      	ldr	r4, [pc, #340]	; (800049c <main+0x164>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000348:	695a      	ldr	r2, [r3, #20]
 800034a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	695a      	ldr	r2, [r3, #20]
 8000352:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000356:	9201      	str	r2, [sp, #4]
 8000358:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	695a      	ldr	r2, [r3, #20]
 800035c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000360:	615a      	str	r2, [r3, #20]
 8000362:	695a      	ldr	r2, [r3, #20]
 8000364:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000368:	9202      	str	r2, [sp, #8]
 800036a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	695a      	ldr	r2, [r3, #20]
 800036e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000372:	615a      	str	r2, [r3, #20]
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800037a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000386:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000388:	f001 f8e2 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000392:	4843      	ldr	r0, [pc, #268]	; (80004a0 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000396:	f001 f8db 	bl	8001550 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800039c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	a90e      	add	r1, sp, #56	; 0x38
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80003a6:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ae:	f000 ffff 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b6:	483a      	ldr	r0, [pc, #232]	; (80004a0 <main+0x168>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003b8:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ba:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	f000 fff5 	bl	80013b0 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80003c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ca:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ce:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003d0:	2304      	movs	r3, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003d2:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d4:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003d6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d8:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003da:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003dc:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003de:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003e0:	6226      	str	r6, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003e2:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e4:	6163      	str	r3, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e6:	61a5      	str	r5, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003e8:	63a5      	str	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ea:	f000 f9ed 	bl	80007c8 <HAL_ADC_Init>
 80003ee:	b100      	cbz	r0, 80003f2 <main+0xba>
 80003f0:	e7fe      	b.n	80003f0 <main+0xb8>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003f2:	af14      	add	r7, sp, #80	; 0x50
 80003f4:	f847 0d2c 	str.w	r0, [r7, #-44]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003f8:	4620      	mov	r0, r4
 80003fa:	4639      	mov	r1, r7
 80003fc:	f000 feb0 	bl	8001160 <HAL_ADCEx_MultiModeConfigChannel>
 8000400:	b100      	cbz	r0, 8000404 <main+0xcc>
 8000402:	e7fe      	b.n	8000402 <main+0xca>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000404:	9011      	str	r0, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000406:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000408:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.Offset = 0;
 800040a:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040c:	a90e      	add	r1, sp, #56	; 0x38
 800040e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000410:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000412:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000414:	f000 fd0c 	bl	8000e30 <HAL_ADC_ConfigChannel>
 8000418:	b100      	cbz	r0, 800041c <main+0xe4>
 800041a:	e7fe      	b.n	800041a <main+0xe2>
  huart1.Instance = USART1;
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <main+0x16c>)
  huart1.Init.BaudRate = 115200;
 800041e:	4922      	ldr	r1, [pc, #136]	; (80004a8 <main+0x170>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000420:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8000422:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000426:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042a:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042c:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800042e:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000430:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000432:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000434:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000436:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000438:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800043a:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043c:	f002 f8b7 	bl	80025ae <HAL_UART_Init>
 8000440:	4680      	mov	r8, r0
 8000442:	b100      	cbz	r0, 8000446 <main+0x10e>
 8000444:	e7fe      	b.n	8000444 <main+0x10c>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000446:	4c19      	ldr	r4, [pc, #100]	; (80004ac <main+0x174>)
 8000448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800044a:	ae04      	add	r6, sp, #16
 800044c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800044e:	4625      	mov	r5, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000450:	4641      	mov	r1, r8
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000458:	a804      	add	r0, sp, #16
 800045a:	f002 f9e7 	bl	800282c <osThreadCreate>
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <main+0x178>)
 8000460:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000464:	463e      	mov	r6, r7
 8000466:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000468:	682b      	ldr	r3, [r5, #0]
 800046a:	6033      	str	r3, [r6, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800046c:	4641      	mov	r1, r8
 800046e:	4638      	mov	r0, r7
 8000470:	f002 f9dc 	bl	800282c <osThreadCreate>
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <main+0x17c>)
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000476:	3418      	adds	r4, #24
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000478:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 800047a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800047c:	ad0e      	add	r5, sp, #56	; 0x38
 800047e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	602b      	str	r3, [r5, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000484:	4641      	mov	r1, r8
 8000486:	a80e      	add	r0, sp, #56	; 0x38
 8000488:	f002 f9d0 	bl	800282c <osThreadCreate>
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <main+0x180>)
 800048e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000490:	f002 f9c7 	bl	8002822 <osKernelStart>
 8000494:	e7fe      	b.n	8000494 <main+0x15c>
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	20000de8 	.word	0x20000de8
 80004a0:	48000800 	.word	0x48000800
 80004a4:	20000e3c 	.word	0x20000e3c
 80004a8:	40013800 	.word	0x40013800
 80004ac:	08004314 	.word	0x08004314
 80004b0:	20000de4 	.word	0x20000de4
 80004b4:	20000eac 	.word	0x20000eac
 80004b8:	20000eb0 	.word	0x20000eb0

080004bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004bc:	6802      	ldr	r2, [r0, #0]
 80004be:	4b03      	ldr	r3, [pc, #12]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d101      	bne.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80004c4:	f000 b934 	b.w	8000730 <HAL_IncTick>
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40012c00 	.word	0x40012c00

080004d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <HAL_MspInit+0x78>)
{
 80004d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	f042 0201 	orr.w	r2, r2, #1
 80004da:	619a      	str	r2, [r3, #24]
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e4:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	f000 feca 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4611      	mov	r1, r2
 80004f0:	f06f 000b 	mvn.w	r0, #11
 80004f4:	f000 fed6 	bl	80012a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	4611      	mov	r1, r2
 80004fc:	f06f 000a 	mvn.w	r0, #10
 8000500:	f000 fed0 	bl	80012a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	4611      	mov	r1, r2
 8000508:	f06f 0009 	mvn.w	r0, #9
 800050c:	f000 feca 	bl	80012a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	4611      	mov	r1, r2
 8000514:	f06f 0004 	mvn.w	r0, #4
 8000518:	f000 fec4 	bl	80012a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	4611      	mov	r1, r2
 8000520:	f06f 0003 	mvn.w	r0, #3
 8000524:	f000 febe 	bl	80012a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	210f      	movs	r1, #15
 800052c:	f06f 0001 	mvn.w	r0, #1
 8000530:	f000 feb8 	bl	80012a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	210f      	movs	r1, #15
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 feb2 	bl	80012a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	b003      	add	sp, #12
 8000542:	f85d fb04 	ldr.w	pc, [sp], #4
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800054c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800054e:	6803      	ldr	r3, [r0, #0]
 8000550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8000554:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8000556:	d11f      	bne.n	8000598 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000558:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800055c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000568:	615a      	str	r2, [r3, #20]
 800056a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC12_CLK_ENABLE();
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000576:	2301      	movs	r3, #1
 8000578:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000582:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f000 ff14 	bl	80013b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000588:	2012      	movs	r0, #18
 800058a:	4622      	mov	r2, r4
 800058c:	2105      	movs	r1, #5
 800058e:	f000 fe89 	bl	80012a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000592:	2012      	movs	r0, #18
 8000594:	f000 feba 	bl	800130c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000598:	b006      	add	sp, #24
 800059a:	bd10      	pop	{r4, pc}

0800059c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800059c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800059e:	6802      	ldr	r2, [r0, #0]
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_UART_MspInit+0x54>)
 80005a2:	429a      	cmp	r2, r3
{
 80005a4:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 80005a6:	d120      	bne.n	80005ea <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ae:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005c4:	2330      	movs	r3, #48	; 0x30
 80005c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005d2:	2307      	movs	r3, #7
 80005d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	f000 feeb 	bl	80013b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80005da:	2025      	movs	r0, #37	; 0x25
 80005dc:	4622      	mov	r2, r4
 80005de:	2105      	movs	r1, #5
 80005e0:	f000 fe60 	bl	80012a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005e4:	2025      	movs	r0, #37	; 0x25
 80005e6:	f000 fe91 	bl	800130c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005ea:	b006      	add	sp, #24
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	bf00      	nop
 80005f0:	40013800 	.word	0x40013800
 80005f4:	48000800 	.word	0x48000800

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80005fa:	4601      	mov	r1, r0
{
 80005fc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80005fe:	2200      	movs	r2, #0
 8000600:	2019      	movs	r0, #25
 8000602:	f000 fe4f 	bl	80012a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000606:	2019      	movs	r0, #25
 8000608:	f000 fe80 	bl	800130c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800060e:	4c15      	ldr	r4, [pc, #84]	; (8000664 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000610:	699a      	ldr	r2, [r3, #24]
 8000612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000616:	619a      	str	r2, [r3, #24]
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800061e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000620:	a901      	add	r1, sp, #4
 8000622:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000624:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000626:	f001 fb3f 	bl	8001ca8 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800062a:	f001 fb25 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_InitTick+0x70>)
 8000630:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000632:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000636:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_InitTick+0x74>)
 800063a:	fbb0 f0f3 	udiv	r0, r0, r3
 800063e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000640:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8000642:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000644:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8000646:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800064a:	f001 fdb9 	bl	80021c0 <HAL_TIM_Base_Init>
 800064e:	b920      	cbnz	r0, 800065a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000650:	4620      	mov	r0, r4
 8000652:	f001 fc8c 	bl	8001f6e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000656:	b008      	add	sp, #32
 8000658:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800065a:	2001      	movs	r0, #1
 800065c:	e7fb      	b.n	8000656 <HAL_InitTick+0x5e>
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	20000eb4 	.word	0x20000eb4
 8000668:	40012c00 	.word	0x40012c00
 800066c:	000f4240 	.word	0x000f4240

08000670 <NMI_Handler>:
 8000670:	4770      	bx	lr

08000672 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler>

08000674 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler>

08000676 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler>

08000678 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler>

0800067a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800067a:	4770      	bx	lr

0800067c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800067c:	f002 b8f6 	b.w	800286c <osSystickHandler>

08000680 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000680:	4801      	ldr	r0, [pc, #4]	; (8000688 <ADC1_2_IRQHandler+0x8>)
 8000682:	f000 b9d9 	b.w	8000a38 <HAL_ADC_IRQHandler>
 8000686:	bf00      	nop
 8000688:	20000de8 	.word	0x20000de8

0800068c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800068c:	4801      	ldr	r0, [pc, #4]	; (8000694 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800068e:	f001 bc7d 	b.w	8001f8c <HAL_TIM_IRQHandler>
 8000692:	bf00      	nop
 8000694:	20000eb4 	.word	0x20000eb4

08000698 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000698:	4801      	ldr	r0, [pc, #4]	; (80006a0 <USART1_IRQHandler+0x8>)
 800069a:	f002 b82b 	b.w	80026f4 <HAL_UART_IRQHandler>
 800069e:	bf00      	nop
 80006a0:	20000e3c 	.word	0x20000e3c

080006a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a4:	4915      	ldr	r1, [pc, #84]	; (80006fc <SystemInit+0x58>)
 80006a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80006aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x5c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80006bc:	6858      	ldr	r0, [r3, #4]
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <SystemInit+0x60>)
 80006c0:	4002      	ands	r2, r0
 80006c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80006ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80006de:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80006e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e2:	f022 020f 	bic.w	r2, r2, #15
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80006e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <SystemInit+0x64>)
 80006ec:	4002      	ands	r2, r0
 80006ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006f8:	608b      	str	r3, [r1, #8]
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	40021000 	.word	0x40021000
 8000704:	f87fc00c 	.word	0xf87fc00c
 8000708:	ff00fccc 	.word	0xff00fccc

0800070c <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_Init+0x20>)
{
 800070e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	6813      	ldr	r3, [r2, #0]
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 fdb1 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff6a 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff fed4 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000728:	2000      	movs	r0, #0
 800072a:	bd08      	pop	{r3, pc}
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_IncTick+0x10>)
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <HAL_IncTick+0x14>)
 8000734:	6811      	ldr	r1, [r2, #0]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	440b      	add	r3, r1
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000ef4 	.word	0x20000ef4
 8000744:	20000004 	.word	0x20000004

08000748 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_GetTick+0x8>)
 800074a:	6818      	ldr	r0, [r3, #0]
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000ef4 	.word	0x20000ef4

08000754 <HAL_ADC_ConvCpltCallback>:
 8000754:	4770      	bx	lr

08000756 <HAL_ADC_LevelOutOfWindowCallback>:
 8000756:	4770      	bx	lr

08000758 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000758:	4770      	bx	lr

0800075a <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800075a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800075c:	6803      	ldr	r3, [r0, #0]
{
 800075e:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000760:	6898      	ldr	r0, [r3, #8]
 8000762:	f000 0003 	and.w	r0, r0, #3
 8000766:	2801      	cmp	r0, #1
 8000768:	d001      	beq.n	800076e <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800076a:	2000      	movs	r0, #0
 800076c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	07d2      	lsls	r2, r2, #31
 8000772:	d5fa      	bpl.n	800076a <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	f002 020d 	and.w	r2, r2, #13
 800077a:	2a01      	cmp	r2, #1
 800077c:	d11b      	bne.n	80007b6 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	f042 0202 	orr.w	r2, r2, #2
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	2203      	movs	r2, #3
 8000788:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800078a:	f7ff ffdd 	bl	8000748 <HAL_GetTick>
 800078e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	07db      	lsls	r3, r3, #31
 8000796:	d5e8      	bpl.n	800076a <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000798:	f7ff ffd6 	bl	8000748 <HAL_GetTick>
 800079c:	1b40      	subs	r0, r0, r5
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9f6      	bls.n	8000790 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80007c6:	bd38      	pop	{r3, r4, r5, pc}

080007c8 <HAL_ADC_Init>:
{
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80007d0:	4604      	mov	r4, r0
 80007d2:	2800      	cmp	r0, #0
 80007d4:	f000 8091 	beq.w	80008fa <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80007da:	06d2      	lsls	r2, r2, #27
 80007dc:	d463      	bmi.n	80008a6 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80007de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d02e      	beq.n	8000842 <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e4:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	689a      	ldr	r2, [r3, #8]
 80007ea:	00d1      	lsls	r1, r2, #3
 80007ec:	d502      	bpl.n	80007f4 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80007ee:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80007f0:	009a      	lsls	r2, r3, #2
 80007f2:	d50a      	bpl.n	800080a <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 80007f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007f6:	f023 0312 	bic.w	r3, r3, #18
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000800:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000808:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800080a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800080c:	06db      	lsls	r3, r3, #27
 800080e:	d46e      	bmi.n	80008ee <HAL_ADC_Init+0x126>
 8000810:	2800      	cmp	r0, #0
 8000812:	d16c      	bne.n	80008ee <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000818:	f015 0504 	ands.w	r5, r5, #4
 800081c:	d167      	bne.n	80008ee <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800081e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000820:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000824:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800082c:	6462      	str	r2, [r4, #68]	; 0x44
 800082e:	4a78      	ldr	r2, [pc, #480]	; (8000a10 <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000830:	d065      	beq.n	80008fe <HAL_ADC_Init+0x136>
 8000832:	4293      	cmp	r3, r2
 8000834:	d166      	bne.n	8000904 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083a:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800083c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000840:	e066      	b.n	8000910 <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 8000842:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000844:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000846:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000848:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800084c:	f7ff fe7e 	bl	800054c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	00de      	lsls	r6, r3, #3
 8000856:	d4c5      	bmi.n	80007e4 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8000858:	4620      	mov	r0, r4
 800085a:	f7ff ff7e 	bl	800075a <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800085e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000860:	06d5      	lsls	r5, r2, #27
 8000862:	d4c0      	bmi.n	80007e6 <HAL_ADC_Init+0x1e>
 8000864:	2800      	cmp	r0, #0
 8000866:	d1be      	bne.n	80007e6 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800086a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800086e:	f023 0302 	bic.w	r3, r3, #2
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000880:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000888:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800088a:	4b62      	ldr	r3, [pc, #392]	; (8000a14 <HAL_ADC_Init+0x24c>)
 800088c:	4a62      	ldr	r2, [pc, #392]	; (8000a18 <HAL_ADC_Init+0x250>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	fbb3 f2f2 	udiv	r2, r3, r2
 8000894:	230a      	movs	r3, #10
 8000896:	4353      	muls	r3, r2
            wait_loop_index--;
 8000898:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800089a:	9b00      	ldr	r3, [sp, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0a1      	beq.n	80007e4 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 80008a0:	9b00      	ldr	r3, [sp, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	e7f8      	b.n	8000898 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a6:	4618      	mov	r0, r3
 80008a8:	e7af      	b.n	800080a <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008aa:	4293      	cmp	r3, r2
 80008ac:	bf0c      	ite	eq
 80008ae:	9101      	streq	r1, [sp, #4]
 80008b0:	9001      	strne	r0, [sp, #4]
 80008b2:	e02c      	b.n	800090e <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 80008b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008b6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80008ba:	f042 0220 	orr.w	r2, r2, #32
 80008be:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80008c2:	f042 0201 	orr.w	r2, r2, #1
 80008c6:	64a2      	str	r2, [r4, #72]	; 0x48
 80008c8:	e052      	b.n	8000970 <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80008ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008ce:	e06d      	b.n	80009ac <HAL_ADC_Init+0x1e4>
 80008d0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80008d4:	e06a      	b.n	80009ac <HAL_ADC_Init+0x1e4>
 80008d6:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80008da:	e067      	b.n	80009ac <HAL_ADC_Init+0x1e4>
 80008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e0:	e064      	b.n	80009ac <HAL_ADC_Init+0x1e4>
 80008e2:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80008e6:	e061      	b.n	80009ac <HAL_ADC_Init+0x1e4>
 80008e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008ec:	e05e      	b.n	80009ac <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 80008ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008f0:	f023 0312 	bic.w	r3, r3, #18
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80008fa:	2001      	movs	r0, #1
 80008fc:	e085      	b.n	8000a0a <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008fe:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000900:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <HAL_ADC_Init+0x254>)
 8000902:	e005      	b.n	8000910 <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000904:	4946      	ldr	r1, [pc, #280]	; (8000a20 <HAL_ADC_Init+0x258>)
 8000906:	4a47      	ldr	r2, [pc, #284]	; (8000a24 <HAL_ADC_Init+0x25c>)
 8000908:	428b      	cmp	r3, r1
 800090a:	d1ce      	bne.n	80008aa <HAL_ADC_Init+0xe2>
 800090c:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000910:	6899      	ldr	r1, [r3, #8]
 8000912:	f001 0103 	and.w	r1, r1, #3
 8000916:	2901      	cmp	r1, #1
 8000918:	d102      	bne.n	8000920 <HAL_ADC_Init+0x158>
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	07ce      	lsls	r6, r1, #31
 800091e:	d40f      	bmi.n	8000940 <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000920:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000922:	b139      	cbz	r1, 8000934 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000924:	688e      	ldr	r6, [r1, #8]
 8000926:	f006 0603 	and.w	r6, r6, #3
 800092a:	2e01      	cmp	r6, #1
 800092c:	d102      	bne.n	8000934 <HAL_ADC_Init+0x16c>
 800092e:	6809      	ldr	r1, [r1, #0]
 8000930:	07c9      	lsls	r1, r1, #31
 8000932:	d405      	bmi.n	8000940 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000934:	6891      	ldr	r1, [r2, #8]
 8000936:	6866      	ldr	r6, [r4, #4]
 8000938:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800093c:	4331      	orrs	r1, r6
 800093e:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000940:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000942:	68a6      	ldr	r6, [r4, #8]
 8000944:	69e2      	ldr	r2, [r4, #28]
 8000946:	2901      	cmp	r1, #1
 8000948:	68e1      	ldr	r1, [r4, #12]
 800094a:	ea41 0106 	orr.w	r1, r1, r6
 800094e:	bf18      	it	ne
 8000950:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 8000954:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 8000958:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800095a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800095c:	2d01      	cmp	r5, #1
 800095e:	d107      	bne.n	8000970 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000960:	2a00      	cmp	r2, #0
 8000962:	d1a7      	bne.n	80008b4 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000966:	3a01      	subs	r2, #1
 8000968:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 800096c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000972:	2a01      	cmp	r2, #1
 8000974:	d01d      	beq.n	80009b2 <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000976:	4d2a      	ldr	r5, [pc, #168]	; (8000a20 <HAL_ADC_Init+0x258>)
 8000978:	42ab      	cmp	r3, r5
 800097a:	d003      	beq.n	8000984 <HAL_ADC_Init+0x1bc>
 800097c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8000980:	42ab      	cmp	r3, r5
 8000982:	d1a2      	bne.n	80008ca <HAL_ADC_Init+0x102>
 8000984:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8000988:	d0a2      	beq.n	80008d0 <HAL_ADC_Init+0x108>
 800098a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800098e:	d0a2      	beq.n	80008d6 <HAL_ADC_Init+0x10e>
 8000990:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8000994:	d0a2      	beq.n	80008dc <HAL_ADC_Init+0x114>
 8000996:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 800099a:	d0a2      	beq.n	80008e2 <HAL_ADC_Init+0x11a>
 800099c:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80009a0:	d0a2      	beq.n	80008e8 <HAL_ADC_Init+0x120>
 80009a2:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80009a6:	bf08      	it	eq
 80009a8:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80009ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80009ae:	4329      	orrs	r1, r5
 80009b0:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	f012 0f0c 	tst.w	r2, #12
 80009b8:	d10b      	bne.n	80009d2 <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80009ba:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80009bc:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80009be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009c2:	f022 0202 	bic.w	r2, r2, #2
 80009c6:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80009c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80009ca:	0052      	lsls	r2, r2, #1
 80009cc:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 80009d0:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80009d2:	68dd      	ldr	r5, [r3, #12]
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <HAL_ADC_Init+0x264>)
 80009d6:	402a      	ands	r2, r5
 80009d8:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009da:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80009dc:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009de:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80009e0:	bf05      	ittet	eq
 80009e2:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 80009e4:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80009e6:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80009e8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80009ec:	bf06      	itte	eq
 80009ee:	f021 010f 	biceq.w	r1, r1, #15
 80009f2:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80009f4:	f022 020f 	bicne.w	r2, r2, #15
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80009fa:	2300      	movs	r3, #0
 80009fc:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80009fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a00:	f023 0303 	bic.w	r3, r3, #3
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000a0a:	b016      	add	sp, #88	; 0x58
 8000a0c:	bd70      	pop	{r4, r5, r6, pc}
 8000a0e:	bf00      	nop
 8000a10:	50000100 	.word	0x50000100
 8000a14:	20000000 	.word	0x20000000
 8000a18:	000f4240 	.word	0x000f4240
 8000a1c:	50000300 	.word	0x50000300
 8000a20:	50000400 	.word	0x50000400
 8000a24:	50000500 	.word	0x50000500
 8000a28:	50000700 	.word	0x50000700
 8000a2c:	fff0c007 	.word	0xfff0c007

08000a30 <HAL_ADCEx_InjectedConvCpltCallback>:
 8000a30:	4770      	bx	lr

08000a32 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8000a32:	4770      	bx	lr

08000a34 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8000a34:	4770      	bx	lr

08000a36 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 8000a36:	4770      	bx	lr

08000a38 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a38:	6803      	ldr	r3, [r0, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	0752      	lsls	r2, r2, #29
{
 8000a3e:	b510      	push	{r4, lr}
 8000a40:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a42:	d502      	bpl.n	8000a4a <HAL_ADC_IRQHandler+0x12>
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	0750      	lsls	r0, r2, #29
 8000a48:	d405      	bmi.n	8000a56 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a4a:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a4c:	0711      	lsls	r1, r2, #28
 8000a4e:	d544      	bpl.n	8000ada <HAL_ADC_IRQHandler+0xa2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	0712      	lsls	r2, r2, #28
 8000a54:	d541      	bpl.n	8000ada <HAL_ADC_IRQHandler+0xa2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a56:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a58:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a5a:	bf5e      	ittt	pl
 8000a5c:	6c62      	ldrpl	r2, [r4, #68]	; 0x44
 8000a5e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000a62:	6462      	strpl	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a68:	d003      	beq.n	8000a72 <HAL_ADC_IRQHandler+0x3a>
 8000a6a:	4aa3      	ldr	r2, [pc, #652]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	f040 810f 	bne.w	8000c90 <HAL_ADC_IRQHandler+0x258>
 8000a72:	4aa2      	ldr	r2, [pc, #648]	; (8000cfc <HAL_ADC_IRQHandler+0x2c4>)
 8000a74:	6891      	ldr	r1, [r2, #8]
 8000a76:	06c9      	lsls	r1, r1, #27
 8000a78:	d00c      	beq.n	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7e:	d003      	beq.n	8000a88 <HAL_ADC_IRQHandler+0x50>
 8000a80:	499d      	ldr	r1, [pc, #628]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000a82:	428b      	cmp	r3, r1
 8000a84:	f040 8109 	bne.w	8000c9a <HAL_ADC_IRQHandler+0x262>
 8000a88:	6892      	ldr	r2, [r2, #8]
 8000a8a:	f002 021f 	and.w	r2, r2, #31
 8000a8e:	2a05      	cmp	r2, #5
 8000a90:	f040 8115 	bne.w	8000cbe <HAL_ADC_IRQHandler+0x286>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000a94:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000a96:	68d9      	ldr	r1, [r3, #12]
 8000a98:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8000a9c:	d117      	bne.n	8000ace <HAL_ADC_IRQHandler+0x96>
 8000a9e:	0490      	lsls	r0, r2, #18
 8000aa0:	d415      	bmi.n	8000ace <HAL_ADC_IRQHandler+0x96>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	0711      	lsls	r1, r2, #28
 8000aa6:	d512      	bpl.n	8000ace <HAL_ADC_IRQHandler+0x96>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	0752      	lsls	r2, r2, #29
 8000aac:	f100 812c 	bmi.w	8000d08 <HAL_ADC_IRQHandler+0x2d0>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	f022 020c 	bic.w	r2, r2, #12
 8000ab6:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000abe:	6463      	str	r3, [r4, #68]	; 0x44
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ac0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ac2:	04db      	lsls	r3, r3, #19
 8000ac4:	d403      	bmi.n	8000ace <HAL_ADC_IRQHandler+0x96>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f7ff fe40 	bl	8000754 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	0690      	lsls	r0, r2, #26
 8000ae0:	d502      	bpl.n	8000ae8 <HAL_ADC_IRQHandler+0xb0>
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	0691      	lsls	r1, r2, #26
 8000ae6:	d405      	bmi.n	8000af4 <HAL_ADC_IRQHandler+0xbc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000ae8:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8000aea:	0652      	lsls	r2, r2, #25
 8000aec:	d562      	bpl.n	8000bb4 <HAL_ADC_IRQHandler+0x17c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	0650      	lsls	r0, r2, #25
 8000af2:	d55f      	bpl.n	8000bb4 <HAL_ADC_IRQHandler+0x17c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000af4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000afa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000afe:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000b00:	d003      	beq.n	8000b0a <HAL_ADC_IRQHandler+0xd2>
 8000b02:	4a7d      	ldr	r2, [pc, #500]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	f040 8108 	bne.w	8000d1a <HAL_ADC_IRQHandler+0x2e2>
 8000b0a:	4a7c      	ldr	r2, [pc, #496]	; (8000cfc <HAL_ADC_IRQHandler+0x2c4>)
 8000b0c:	6891      	ldr	r1, [r2, #8]
 8000b0e:	06c9      	lsls	r1, r1, #27
 8000b10:	d00c      	beq.n	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b16:	d003      	beq.n	8000b20 <HAL_ADC_IRQHandler+0xe8>
 8000b18:	4977      	ldr	r1, [pc, #476]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	f040 8102 	bne.w	8000d24 <HAL_ADC_IRQHandler+0x2ec>
 8000b20:	6892      	ldr	r2, [r2, #8]
 8000b22:	f002 021f 	and.w	r2, r2, #31
 8000b26:	2a05      	cmp	r2, #5
 8000b28:	f040 810e 	bne.w	8000d48 <HAL_ADC_IRQHandler+0x310>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000b2c:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8000b2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000b30:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8000b34:	d007      	beq.n	8000b46 <HAL_ADC_IRQHandler+0x10e>
 8000b36:	0190      	lsls	r0, r2, #6
 8000b38:	d436      	bmi.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b3a:	68d9      	ldr	r1, [r3, #12]
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8000b3c:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8000b40:	d132      	bne.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000b42:	0491      	lsls	r1, r2, #18
 8000b44:	d430      	bmi.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	0652      	lsls	r2, r2, #25
 8000b4a:	d52d      	bpl.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8000b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b50:	d003      	beq.n	8000b5a <HAL_ADC_IRQHandler+0x122>
 8000b52:	4a69      	ldr	r2, [pc, #420]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	f040 8113 	bne.w	8000d80 <HAL_ADC_IRQHandler+0x348>
 8000b5a:	4a68      	ldr	r2, [pc, #416]	; (8000cfc <HAL_ADC_IRQHandler+0x2c4>)
 8000b5c:	6891      	ldr	r1, [r2, #8]
 8000b5e:	06c8      	lsls	r0, r1, #27
 8000b60:	d00c      	beq.n	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b66:	d003      	beq.n	8000b70 <HAL_ADC_IRQHandler+0x138>
 8000b68:	4963      	ldr	r1, [pc, #396]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	f040 810d 	bne.w	8000d8a <HAL_ADC_IRQHandler+0x352>
 8000b70:	6892      	ldr	r2, [r2, #8]
 8000b72:	f002 021f 	and.w	r2, r2, #31
 8000b76:	2a06      	cmp	r2, #6
 8000b78:	f040 8119 	bne.w	8000dae <HAL_ADC_IRQHandler+0x376>
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000b7c:	68da      	ldr	r2, [r3, #12]
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000b7e:	0292      	lsls	r2, r2, #10
 8000b80:	d412      	bmi.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	0710      	lsls	r0, r2, #28
 8000b86:	f100 812e 	bmi.w	8000de6 <HAL_ADC_IRQHandler+0x3ae>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000b90:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000b92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b98:	6463      	str	r3, [r4, #68]	; 0x44
            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b9c:	05d9      	lsls	r1, r3, #23
 8000b9e:	d403      	bmi.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff ff41 	bl	8000a30 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	2260      	movs	r2, #96	; 0x60
 8000bb2:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	0612      	lsls	r2, r2, #24
 8000bba:	d50c      	bpl.n	8000bd6 <HAL_ADC_IRQHandler+0x19e>
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	061b      	lsls	r3, r3, #24
 8000bc0:	d509      	bpl.n	8000bd6 <HAL_ADC_IRQHandler+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc8:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff fdc3 	bl	8000756 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	05d0      	lsls	r0, r2, #23
 8000bdc:	d50d      	bpl.n	8000bfa <HAL_ADC_IRQHandler+0x1c2>
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	05d9      	lsls	r1, r3, #23
 8000be2:	d50a      	bpl.n	8000bfa <HAL_ADC_IRQHandler+0x1c2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000be4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bea:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff ff21 	bl	8000a34 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	0592      	lsls	r2, r2, #22
 8000c00:	d50d      	bpl.n	8000c1e <HAL_ADC_IRQHandler+0x1e6>
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	0598      	lsls	r0, r3, #22
 8000c06:	d50a      	bpl.n	8000c1e <HAL_ADC_IRQHandler+0x1e6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000c08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0e:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f7ff ff10 	bl	8000a36 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1c:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000c1e:	6822      	ldr	r2, [r4, #0]
 8000c20:	6813      	ldr	r3, [r2, #0]
 8000c22:	06d9      	lsls	r1, r3, #27
 8000c24:	d51c      	bpl.n	8000c60 <HAL_ADC_IRQHandler+0x228>
 8000c26:	6853      	ldr	r3, [r2, #4]
 8000c28:	06db      	lsls	r3, r3, #27
 8000c2a:	d519      	bpl.n	8000c60 <HAL_ADC_IRQHandler+0x228>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	f000 80e8 	beq.w	8000e04 <HAL_ADC_IRQHandler+0x3cc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c34:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000c38:	f000 80de 	beq.w	8000df8 <HAL_ADC_IRQHandler+0x3c0>
 8000c3c:	492f      	ldr	r1, [pc, #188]	; (8000cfc <HAL_ADC_IRQHandler+0x2c4>)
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_ADC_IRQHandler+0x2c8>)
 8000c40:	482d      	ldr	r0, [pc, #180]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000c42:	4282      	cmp	r2, r0
 8000c44:	bf08      	it	eq
 8000c46:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000c48:	6899      	ldr	r1, [r3, #8]
 8000c4a:	06c8      	lsls	r0, r1, #27
 8000c4c:	f040 80d6 	bne.w	8000dfc <HAL_ADC_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000c50:	68d3      	ldr	r3, [r2, #12]
 8000c52:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000c56:	f040 80d5 	bne.w	8000e04 <HAL_ADC_IRQHandler+0x3cc>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	0551      	lsls	r1, r2, #21
 8000c66:	f140 80d9 	bpl.w	8000e1c <HAL_ADC_IRQHandler+0x3e4>
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	0552      	lsls	r2, r2, #21
 8000c6e:	f140 80d5 	bpl.w	8000e1c <HAL_ADC_IRQHandler+0x3e4>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000c72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c78:	6462      	str	r2, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000c7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c7c:	f042 0208 	orr.w	r2, r2, #8
 8000c80:	64a2      	str	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f7ff fed2 	bl	8000a32 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8000c8e:	bd10      	pop	{r4, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_ADC_IRQHandler+0x2c8>)
 8000c92:	6892      	ldr	r2, [r2, #8]
 8000c94:	06d2      	lsls	r2, r2, #27
 8000c96:	f43f aefd 	beq.w	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_ADC_IRQHandler+0x2c8>)
 8000c9c:	6892      	ldr	r2, [r2, #8]
 8000c9e:	f002 021f 	and.w	r2, r2, #31
 8000ca2:	2a05      	cmp	r2, #5
 8000ca4:	f43f aef6 	beq.w	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <HAL_ADC_IRQHandler+0x2c8>)
 8000caa:	6892      	ldr	r2, [r2, #8]
 8000cac:	f002 021f 	and.w	r2, r2, #31
 8000cb0:	2a09      	cmp	r2, #9
 8000cb2:	f43f aeef 	beq.w	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <HAL_ADC_IRQHandler+0x2cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d11a      	bne.n	8000cf2 <HAL_ADC_IRQHandler+0x2ba>
 8000cbc:	e6ea      	b.n	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cc2:	d002      	beq.n	8000cca <HAL_ADC_IRQHandler+0x292>
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d1ee      	bne.n	8000ca8 <HAL_ADC_IRQHandler+0x270>
 8000cca:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_ADC_IRQHandler+0x2c4>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	f002 021f 	and.w	r2, r2, #31
 8000cd2:	2a09      	cmp	r2, #9
 8000cd4:	f43f aede 	beq.w	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cdc:	f43f aeda 	beq.w	8000a94 <HAL_ADC_IRQHandler+0x5c>
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_ADC_IRQHandler+0x2cc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f43f aed6 	beq.w	8000a94 <HAL_ADC_IRQHandler+0x5c>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000ce8:	4903      	ldr	r1, [pc, #12]	; (8000cf8 <HAL_ADC_IRQHandler+0x2c0>)
 8000cea:	428b      	cmp	r3, r1
 8000cec:	bf08      	it	eq
 8000cee:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 8000cf2:	68d2      	ldr	r2, [r2, #12]
 8000cf4:	e6cf      	b.n	8000a96 <HAL_ADC_IRQHandler+0x5e>
 8000cf6:	bf00      	nop
 8000cf8:	50000100 	.word	0x50000100
 8000cfc:	50000300 	.word	0x50000300
 8000d00:	50000700 	.word	0x50000700
 8000d04:	50000400 	.word	0x50000400
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64a3      	str	r3, [r4, #72]	; 0x48
 8000d18:	e6d9      	b.n	8000ace <HAL_ADC_IRQHandler+0x96>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000d1a:	4a41      	ldr	r2, [pc, #260]	; (8000e20 <HAL_ADC_IRQHandler+0x3e8>)
 8000d1c:	6892      	ldr	r2, [r2, #8]
 8000d1e:	06d2      	lsls	r2, r2, #27
 8000d20:	f43f af04 	beq.w	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000d24:	4a3e      	ldr	r2, [pc, #248]	; (8000e20 <HAL_ADC_IRQHandler+0x3e8>)
 8000d26:	6892      	ldr	r2, [r2, #8]
 8000d28:	f002 021f 	and.w	r2, r2, #31
 8000d2c:	2a05      	cmp	r2, #5
 8000d2e:	f43f aefd 	beq.w	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000d32:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <HAL_ADC_IRQHandler+0x3e8>)
 8000d34:	6892      	ldr	r2, [r2, #8]
 8000d36:	f002 021f 	and.w	r2, r2, #31
 8000d3a:	2a09      	cmp	r2, #9
 8000d3c:	f43f aef6 	beq.w	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000d40:	4a38      	ldr	r2, [pc, #224]	; (8000e24 <HAL_ADC_IRQHandler+0x3ec>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d11a      	bne.n	8000d7c <HAL_ADC_IRQHandler+0x344>
 8000d46:	e6f1      	b.n	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d4c:	d002      	beq.n	8000d54 <HAL_ADC_IRQHandler+0x31c>
 8000d4e:	4a36      	ldr	r2, [pc, #216]	; (8000e28 <HAL_ADC_IRQHandler+0x3f0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d1ee      	bne.n	8000d32 <HAL_ADC_IRQHandler+0x2fa>
 8000d54:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <HAL_ADC_IRQHandler+0x3f4>)
 8000d56:	6892      	ldr	r2, [r2, #8]
 8000d58:	f002 021f 	and.w	r2, r2, #31
 8000d5c:	2a09      	cmp	r2, #9
 8000d5e:	f43f aee5 	beq.w	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d66:	f43f aee1 	beq.w	8000b2c <HAL_ADC_IRQHandler+0xf4>
 8000d6a:	4a2e      	ldr	r2, [pc, #184]	; (8000e24 <HAL_ADC_IRQHandler+0x3ec>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	f43f aedd 	beq.w	8000b2c <HAL_ADC_IRQHandler+0xf4>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000d72:	492d      	ldr	r1, [pc, #180]	; (8000e28 <HAL_ADC_IRQHandler+0x3f0>)
 8000d74:	428b      	cmp	r3, r1
 8000d76:	bf08      	it	eq
 8000d78:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 8000d7c:	68d2      	ldr	r2, [r2, #12]
 8000d7e:	e6d6      	b.n	8000b2e <HAL_ADC_IRQHandler+0xf6>
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_ADC_IRQHandler+0x3e8>)
 8000d82:	6892      	ldr	r2, [r2, #8]
 8000d84:	06d1      	lsls	r1, r2, #27
 8000d86:	f43f aef9 	beq.w	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000d8a:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <HAL_ADC_IRQHandler+0x3e8>)
 8000d8c:	6892      	ldr	r2, [r2, #8]
 8000d8e:	f002 021f 	and.w	r2, r2, #31
 8000d92:	2a06      	cmp	r2, #6
 8000d94:	f43f aef2 	beq.w	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_ADC_IRQHandler+0x3e8>)
 8000d9a:	6892      	ldr	r2, [r2, #8]
 8000d9c:	f002 021f 	and.w	r2, r2, #31
 8000da0:	2a07      	cmp	r2, #7
 8000da2:	f43f aeeb 	beq.w	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_ADC_IRQHandler+0x3ec>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d11a      	bne.n	8000de2 <HAL_ADC_IRQHandler+0x3aa>
 8000dac:	e6e6      	b.n	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db2:	d002      	beq.n	8000dba <HAL_ADC_IRQHandler+0x382>
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_ADC_IRQHandler+0x3f0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d1ee      	bne.n	8000d98 <HAL_ADC_IRQHandler+0x360>
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_ADC_IRQHandler+0x3f4>)
 8000dbc:	6892      	ldr	r2, [r2, #8]
 8000dbe:	f002 021f 	and.w	r2, r2, #31
 8000dc2:	2a07      	cmp	r2, #7
 8000dc4:	f43f aeda 	beq.w	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dcc:	f43f aed6 	beq.w	8000b7c <HAL_ADC_IRQHandler+0x144>
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_ADC_IRQHandler+0x3ec>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f43f aed2 	beq.w	8000b7c <HAL_ADC_IRQHandler+0x144>
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000dd8:	4913      	ldr	r1, [pc, #76]	; (8000e28 <HAL_ADC_IRQHandler+0x3f0>)
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	bf08      	it	eq
 8000dde:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
 8000de2:	68d2      	ldr	r2, [r2, #12]
 8000de4:	e6cb      	b.n	8000b7e <HAL_ADC_IRQHandler+0x146>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6463      	str	r3, [r4, #68]	; 0x44
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64a3      	str	r3, [r4, #72]	; 0x48
 8000df6:	e6d7      	b.n	8000ba8 <HAL_ADC_IRQHandler+0x170>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_ADC_IRQHandler+0x3f4>)
 8000dfa:	e725      	b.n	8000c48 <HAL_ADC_IRQHandler+0x210>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8000e02:	e728      	b.n	8000c56 <HAL_ADC_IRQHandler+0x21e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000e04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	64a3      	str	r3, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff fc9f 	bl	8000758 <HAL_ADC_ErrorCallback>
 8000e1a:	e71e      	b.n	8000c5a <HAL_ADC_IRQHandler+0x222>
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	bf00      	nop
 8000e20:	50000700 	.word	0x50000700
 8000e24:	50000400 	.word	0x50000400
 8000e28:	50000100 	.word	0x50000100
 8000e2c:	50000300 	.word	0x50000300

08000e30 <HAL_ADC_ConfigChannel>:
{
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8000e38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e3c:	2b01      	cmp	r3, #1
{
 8000e3e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000e40:	f000 8163 	beq.w	800110a <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e44:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e46:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e48:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8000e4a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e4c:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 8000e4e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e52:	f100 8155 	bmi.w	8001100 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 8000e56:	6848      	ldr	r0, [r1, #4]
 8000e58:	680c      	ldr	r4, [r1, #0]
 8000e5a:	2804      	cmp	r0, #4
 8000e5c:	f04f 0206 	mov.w	r2, #6
 8000e60:	d831      	bhi.n	8000ec6 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000e62:	4342      	muls	r2, r0
 8000e64:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000e66:	201f      	movs	r0, #31
 8000e68:	4090      	lsls	r0, r2
 8000e6a:	ea27 0000 	bic.w	r0, r7, r0
 8000e6e:	fa04 f202 	lsl.w	r2, r4, r2
 8000e72:	4302      	orrs	r2, r0
 8000e74:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	f012 0f0c 	tst.w	r2, #12
 8000e7c:	d162      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e7e:	2c09      	cmp	r4, #9
 8000e80:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000e84:	688f      	ldr	r7, [r1, #8]
 8000e86:	d946      	bls.n	8000f16 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e88:	4422      	add	r2, r4
 8000e8a:	6998      	ldr	r0, [r3, #24]
 8000e8c:	3a1e      	subs	r2, #30
 8000e8e:	f04f 0e07 	mov.w	lr, #7
 8000e92:	fa0e fe02 	lsl.w	lr, lr, r2
 8000e96:	ea20 000e 	bic.w	r0, r0, lr
 8000e9a:	fa07 f202 	lsl.w	r2, r7, r2
 8000e9e:	4302      	orrs	r2, r0
 8000ea0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000ea8:	694a      	ldr	r2, [r1, #20]
 8000eaa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000eae:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000eb2:	690a      	ldr	r2, [r1, #16]
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8000eba:	2a03      	cmp	r2, #3
 8000ebc:	d873      	bhi.n	8000fa6 <HAL_ADC_ConfigChannel+0x176>
 8000ebe:	e8df f002 	tbb	[pc, r2]
 8000ec2:	5137      	.short	0x5137
 8000ec4:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8000ec6:	2809      	cmp	r0, #9
 8000ec8:	d80b      	bhi.n	8000ee2 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8000eca:	4342      	muls	r2, r0
 8000ecc:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000ece:	3a1e      	subs	r2, #30
 8000ed0:	201f      	movs	r0, #31
 8000ed2:	4090      	lsls	r0, r2
 8000ed4:	ea27 0000 	bic.w	r0, r7, r0
 8000ed8:	fa04 f202 	lsl.w	r2, r4, r2
 8000edc:	4302      	orrs	r2, r0
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee0:	e7c9      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000ee2:	280e      	cmp	r0, #14
 8000ee4:	d80b      	bhi.n	8000efe <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ee6:	4342      	muls	r2, r0
 8000ee8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8000eea:	3a3c      	subs	r2, #60	; 0x3c
 8000eec:	201f      	movs	r0, #31
 8000eee:	4090      	lsls	r0, r2
 8000ef0:	ea27 0000 	bic.w	r0, r7, r0
 8000ef4:	fa04 f202 	lsl.w	r2, r4, r2
 8000ef8:	4302      	orrs	r2, r0
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38
 8000efc:	e7bb      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000efe:	4342      	muls	r2, r0
 8000f00:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000f02:	3a5a      	subs	r2, #90	; 0x5a
 8000f04:	201f      	movs	r0, #31
 8000f06:	4090      	lsls	r0, r2
 8000f08:	ea27 0000 	bic.w	r0, r7, r0
 8000f0c:	fa04 f202 	lsl.w	r2, r4, r2
 8000f10:	4302      	orrs	r2, r0
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f14:	e7af      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f16:	6958      	ldr	r0, [r3, #20]
 8000f18:	4422      	add	r2, r4
 8000f1a:	f04f 0e07 	mov.w	lr, #7
 8000f1e:	fa0e fe02 	lsl.w	lr, lr, r2
 8000f22:	ea20 000e 	bic.w	r0, r0, lr
 8000f26:	fa07 f202 	lsl.w	r2, r7, r2
 8000f2a:	4302      	orrs	r2, r0
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	e7b8      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f32:	4f83      	ldr	r7, [pc, #524]	; (8001140 <HAL_ADC_ConfigChannel+0x310>)
 8000f34:	4017      	ands	r7, r2
 8000f36:	ea47 020c 	orr.w	r2, r7, ip
 8000f3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f3e:	ea42 020e 	orr.w	r2, r2, lr
 8000f42:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	f002 0203 	and.w	r2, r2, #3
 8000f4a:	2a01      	cmp	r2, #1
 8000f4c:	f040 80df 	bne.w	800110e <HAL_ADC_ConfigChannel+0x2de>
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	07d7      	lsls	r7, r2, #31
 8000f54:	f140 80db 	bpl.w	800110e <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f58:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000f60:	b017      	add	sp, #92	; 0x5c
 8000f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000f64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f66:	4f76      	ldr	r7, [pc, #472]	; (8001140 <HAL_ADC_ConfigChannel+0x310>)
 8000f68:	4017      	ands	r7, r2
 8000f6a:	ea47 020c 	orr.w	r2, r7, ip
 8000f6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f72:	ea42 020e 	orr.w	r2, r2, lr
 8000f76:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000f78:	e7e4      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000f7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f7c:	4870      	ldr	r0, [pc, #448]	; (8001140 <HAL_ADC_ConfigChannel+0x310>)
 8000f7e:	4010      	ands	r0, r2
 8000f80:	ea40 020c 	orr.w	r2, r0, ip
 8000f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f88:	ea42 020e 	orr.w	r2, r2, lr
 8000f8c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8000f8e:	e7d9      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000f90:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000f92:	4a6b      	ldr	r2, [pc, #428]	; (8001140 <HAL_ADC_ConfigChannel+0x310>)
 8000f94:	4002      	ands	r2, r0
 8000f96:	ea42 020c 	orr.w	r2, r2, ip
 8000f9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f9e:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000fa2:	66da      	str	r2, [r3, #108]	; 0x6c
 8000fa4:	e7ce      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fa8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000fac:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000fae:	bf02      	ittt	eq
 8000fb0:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000fb2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000fb6:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fba:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000fbe:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000fc0:	bf02      	ittt	eq
 8000fc2:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000fc4:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000fc8:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000fcc:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000fd0:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000fd2:	bf02      	ittt	eq
 8000fd4:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000fd6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000fda:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000fde:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000fe2:	4594      	cmp	ip, r2
 8000fe4:	d1ae      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000fe6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000fe8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fec:	e7d9      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000fee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	40a1      	lsls	r1, r4
 8000ff6:	ea22 0201 	bic.w	r2, r2, r1
 8000ffa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001002:	d01e      	beq.n	8001042 <HAL_ADC_ConfigChannel+0x212>
 8001004:	494f      	ldr	r1, [pc, #316]	; (8001144 <HAL_ADC_ConfigChannel+0x314>)
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_ADC_ConfigChannel+0x318>)
 8001008:	4850      	ldr	r0, [pc, #320]	; (800114c <HAL_ADC_ConfigChannel+0x31c>)
 800100a:	4283      	cmp	r3, r0
 800100c:	bf08      	it	eq
 800100e:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001010:	2c10      	cmp	r4, #16
 8001012:	d118      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001014:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001016:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800101a:	d19d      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800101c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001020:	494a      	ldr	r1, [pc, #296]	; (800114c <HAL_ADC_ConfigChannel+0x31c>)
 8001022:	d11c      	bne.n	800105e <HAL_ADC_ConfigChannel+0x22e>
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	e024      	b.n	8001072 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001028:	1c60      	adds	r0, r4, #1
 800102a:	6959      	ldr	r1, [r3, #20]
 800102c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001030:	2207      	movs	r2, #7
 8001032:	4082      	lsls	r2, r0
 8001034:	ea21 0102 	bic.w	r1, r1, r2
 8001038:	fa06 f200 	lsl.w	r2, r6, r0
 800103c:	430a      	orrs	r2, r1
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	e7dd      	b.n	8000ffe <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001042:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_ADC_ConfigChannel+0x314>)
 8001044:	e7e4      	b.n	8001010 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001046:	2c11      	cmp	r4, #17
 8001048:	d103      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800104a:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800104c:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8001050:	e7e3      	b.n	800101a <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001052:	2c12      	cmp	r4, #18
 8001054:	d180      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001056:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001058:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800105c:	e7dd      	b.n	800101a <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800105e:	428b      	cmp	r3, r1
 8001060:	d102      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x238>
 8001062:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001066:	e7dd      	b.n	8001024 <HAL_ADC_ConfigChannel+0x1f4>
 8001068:	4939      	ldr	r1, [pc, #228]	; (8001150 <HAL_ADC_ConfigChannel+0x320>)
 800106a:	483a      	ldr	r0, [pc, #232]	; (8001154 <HAL_ADC_ConfigChannel+0x324>)
 800106c:	428b      	cmp	r3, r1
 800106e:	d12b      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x298>
 8001070:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001072:	6899      	ldr	r1, [r3, #8]
 8001074:	f001 0103 	and.w	r1, r1, #3
 8001078:	2901      	cmp	r1, #1
 800107a:	d102      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x252>
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	07c8      	lsls	r0, r1, #31
 8001080:	d438      	bmi.n	80010f4 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001082:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001084:	b139      	cbz	r1, 8001096 <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001086:	6888      	ldr	r0, [r1, #8]
 8001088:	f000 0003 	and.w	r0, r0, #3
 800108c:	2801      	cmp	r0, #1
 800108e:	d102      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x266>
 8001090:	6809      	ldr	r1, [r1, #0]
 8001092:	07c9      	lsls	r1, r1, #31
 8001094:	d42e      	bmi.n	80010f4 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001096:	2c10      	cmp	r4, #16
 8001098:	d11a      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x2a0>
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109e:	f47f af5b 	bne.w	8000f58 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80010a2:	6893      	ldr	r3, [r2, #8]
 80010a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <HAL_ADC_ConfigChannel+0x328>)
 80010ac:	4a2b      	ldr	r2, [pc, #172]	; (800115c <HAL_ADC_ConfigChannel+0x32c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80010b4:	230a      	movs	r3, #10
 80010b6:	4353      	muls	r3, r2
            wait_loop_index--;
 80010b8:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80010ba:	9b00      	ldr	r3, [sp, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f43f af4b 	beq.w	8000f58 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 80010c2:	9b00      	ldr	r3, [sp, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	e7f7      	b.n	80010b8 <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010c8:	4283      	cmp	r3, r0
 80010ca:	bf18      	it	ne
 80010cc:	2100      	movne	r1, #0
 80010ce:	e7a9      	b.n	8001024 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80010d0:	2c11      	cmp	r4, #17
 80010d2:	d108      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x2b6>
 80010d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d8:	f47f af3e 	bne.w	8000f58 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80010dc:	6893      	ldr	r3, [r2, #8]
 80010de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80010e2:	6093      	str	r3, [r2, #8]
 80010e4:	e738      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80010e6:	2c12      	cmp	r4, #18
 80010e8:	f47f af36 	bne.w	8000f58 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80010ec:	6893      	ldr	r3, [r2, #8]
 80010ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f2:	e7f6      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80010fc:	2001      	movs	r0, #1
 80010fe:	e72c      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001100:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001102:	f043 0320 	orr.w	r3, r3, #32
 8001106:	646b      	str	r3, [r5, #68]	; 0x44
 8001108:	e727      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 800110a:	2002      	movs	r0, #2
 800110c:	e728      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800110e:	2e01      	cmp	r6, #1
 8001110:	f47f af6d 	bne.w	8000fee <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001114:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001118:	40a6      	lsls	r6, r4
 800111a:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800111c:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800111e:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8001122:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001124:	d980      	bls.n	8001028 <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001126:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800112a:	6999      	ldr	r1, [r3, #24]
 800112c:	3a1b      	subs	r2, #27
 800112e:	2007      	movs	r0, #7
 8001130:	4090      	lsls	r0, r2
 8001132:	ea21 0100 	bic.w	r1, r1, r0
 8001136:	fa06 f202 	lsl.w	r2, r6, r2
 800113a:	430a      	orrs	r2, r1
 800113c:	619a      	str	r2, [r3, #24]
 800113e:	e75e      	b.n	8000ffe <HAL_ADC_ConfigChannel+0x1ce>
 8001140:	83fff000 	.word	0x83fff000
 8001144:	50000300 	.word	0x50000300
 8001148:	50000700 	.word	0x50000700
 800114c:	50000100 	.word	0x50000100
 8001150:	50000400 	.word	0x50000400
 8001154:	50000500 	.word	0x50000500
 8001158:	20000000 	.word	0x20000000
 800115c:	000f4240 	.word	0x000f4240

08001160 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001162:	6802      	ldr	r2, [r0, #0]
 8001164:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8001166:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800116a:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800116c:	d101      	bne.n	8001172 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	e009      	b.n	8001186 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001172:	429a      	cmp	r2, r3
 8001174:	d102      	bne.n	800117c <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8001176:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800117a:	e7f8      	b.n	800116e <HAL_ADCEx_MultiModeConfigChannel+0xe>
 800117c:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800117e:	4c3d      	ldr	r4, [pc, #244]	; (8001274 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8001180:	429a      	cmp	r2, r3
 8001182:	d130      	bne.n	80011e6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8001184:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001186:	9c01      	ldr	r4, [sp, #4]
 8001188:	2c00      	cmp	r4, #0
 800118a:	d058      	beq.n	800123e <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800118c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001190:	2b01      	cmp	r3, #1
 8001192:	d056      	beq.n	8001242 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8001194:	2301      	movs	r3, #1
 8001196:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800119a:	6893      	ldr	r3, [r2, #8]
 800119c:	075b      	lsls	r3, r3, #29
 800119e:	d443      	bmi.n	8001228 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80011a0:	68a3      	ldr	r3, [r4, #8]
 80011a2:	075f      	lsls	r7, r3, #29
 80011a4:	d440      	bmi.n	8001228 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80011aa:	d020      	beq.n	80011ee <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80011ac:	4d32      	ldr	r5, [pc, #200]	; (8001278 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80011b0:	4e2e      	ldr	r6, [pc, #184]	; (800126c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80011b2:	42b2      	cmp	r2, r6
 80011b4:	bf08      	it	eq
 80011b6:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80011b8:	680d      	ldr	r5, [r1, #0]
 80011ba:	b1d5      	cbz	r5, 80011f2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80011bc:	684e      	ldr	r6, [r1, #4]
 80011be:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80011c2:	4637      	mov	r7, r6
 80011c4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80011c6:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80011ca:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 80011ce:	433e      	orrs	r6, r7
 80011d0:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80011d2:	6896      	ldr	r6, [r2, #8]
 80011d4:	f006 0603 	and.w	r6, r6, #3
 80011d8:	2e01      	cmp	r6, #1
 80011da:	d134      	bne.n	8001246 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	07d6      	lsls	r6, r2, #31
 80011e0:	d531      	bpl.n	8001246 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e025      	b.n	8001232 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011e6:	42a2      	cmp	r2, r4
 80011e8:	bf18      	it	ne
 80011ea:	2300      	movne	r3, #0
 80011ec:	e7bf      	b.n	800116e <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80011f0:	e7e2      	b.n	80011b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80011f2:	6899      	ldr	r1, [r3, #8]
 80011f4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80011f8:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80011fa:	6891      	ldr	r1, [r2, #8]
 80011fc:	f001 0103 	and.w	r1, r1, #3
 8001200:	2901      	cmp	r1, #1
 8001202:	d102      	bne.n	800120a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	07d1      	lsls	r1, r2, #31
 8001208:	d4eb      	bmi.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800120a:	68a2      	ldr	r2, [r4, #8]
 800120c:	f002 0203 	and.w	r2, r2, #3
 8001210:	2a01      	cmp	r2, #1
 8001212:	d102      	bne.n	800121a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8001214:	6822      	ldr	r2, [r4, #0]
 8001216:	07d2      	lsls	r2, r2, #31
 8001218:	d4e3      	bmi.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001220:	f022 020f 	bic.w	r2, r2, #15
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	e7dc      	b.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001228:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8001232:	2200      	movs	r2, #0
 8001234:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8001238:	4618      	mov	r0, r3
 800123a:	b017      	add	sp, #92	; 0x5c
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e7fa      	b.n	8001238 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8001242:	2302      	movs	r3, #2
 8001244:	e7f8      	b.n	8001238 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001246:	68a2      	ldr	r2, [r4, #8]
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	2a01      	cmp	r2, #1
 800124e:	d102      	bne.n	8001256 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	07d4      	lsls	r4, r2, #31
 8001254:	d4c5      	bmi.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	6889      	ldr	r1, [r1, #8]
 800125a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800125e:	430d      	orrs	r5, r1
 8001260:	f022 020f 	bic.w	r2, r2, #15
 8001264:	4315      	orrs	r5, r2
 8001266:	609d      	str	r5, [r3, #8]
 8001268:	e7bb      	b.n	80011e2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 800126a:	bf00      	nop
 800126c:	50000100 	.word	0x50000100
 8001270:	50000400 	.word	0x50000400
 8001274:	50000500 	.word	0x50000500
 8001278:	50000300 	.word	0x50000300
 800127c:	50000700 	.word	0x50000700

08001280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	0c1b      	lsrs	r3, r3, #16
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001290:	0200      	lsls	r0, r0, #8
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800129a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800129c:	60d3      	str	r3, [r2, #12]
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a6:	b530      	push	{r4, r5, lr}
 80012a8:	68dc      	ldr	r4, [r3, #12]
 80012aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	bf28      	it	cs
 80012b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 0501 	mov.w	r5, #1
 80012c0:	fa05 f303 	lsl.w	r3, r5, r3
 80012c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c8:	bf8c      	ite	hi
 80012ca:	3c03      	subhi	r4, #3
 80012cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ce:	4019      	ands	r1, r3
 80012d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d2:	fa05 f404 	lsl.w	r4, r5, r4
 80012d6:	3c01      	subs	r4, #1
 80012d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	ea42 0201 	orr.w	r2, r2, r1
 80012e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	bfaf      	iteee	ge
 80012e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	f000 000f 	andlt.w	r0, r0, #15
 80012ee:	4b06      	ldrlt	r3, [pc, #24]	; (8001308 <HAL_NVIC_SetPriority+0x64>)
 80012f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	bfa5      	ittet	ge
 80012f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80012f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001300:	bd30      	pop	{r4, r5, pc}
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	e000ed14 	.word	0xe000ed14

0800130c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800130c:	0942      	lsrs	r2, r0, #5
 800130e:	2301      	movs	r3, #1
 8001310:	f000 001f 	and.w	r0, r0, #31
 8001314:	fa03 f000 	lsl.w	r0, r3, r0
 8001318:	4b01      	ldr	r3, [pc, #4]	; (8001320 <HAL_NVIC_EnableIRQ+0x14>)
 800131a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	3801      	subs	r0, #1
 8001326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800132a:	d20a      	bcs.n	8001342 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001330:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	21f0      	movs	r1, #240	; 0xf0
 8001334:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001352:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001354:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001356:	bf0c      	ite	eq
 8001358:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800135c:	f022 0204 	bicne.w	r2, r2, #4
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	4770      	bx	lr
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001368:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800136c:	2a02      	cmp	r2, #2
{  
 800136e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	d003      	beq.n	800137a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001372:	2204      	movs	r2, #4
 8001374:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001376:	2001      	movs	r0, #1
 8001378:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800137a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800137c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800137e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001380:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001382:	f021 010e 	bic.w	r1, r1, #14
 8001386:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001388:	6811      	ldr	r1, [r2, #0]
 800138a:	f021 0101 	bic.w	r1, r1, #1
 800138e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001390:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800139a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800139c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80013a0:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80013a4:	b113      	cbz	r3, 80013ac <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80013a6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80013a8:	4620      	mov	r0, r4
 80013aa:	bd10      	pop	{r4, pc}
 80013ac:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80013ae:	bd10      	pop	{r4, pc}

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013b4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800154c <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013bc:	4a61      	ldr	r2, [pc, #388]	; (8001544 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 80013be:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80013c0:	fa38 f403 	lsrs.w	r4, r8, r3
 80013c4:	d102      	bne.n	80013cc <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80013c6:	b003      	add	sp, #12
 80013c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013cc:	f04f 0e01 	mov.w	lr, #1
 80013d0:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80013d4:	ea18 060e 	ands.w	r6, r8, lr
 80013d8:	f000 80a6 	beq.w	8001528 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013dc:	684c      	ldr	r4, [r1, #4]
 80013de:	f024 0710 	bic.w	r7, r4, #16
 80013e2:	2f02      	cmp	r7, #2
 80013e4:	d116      	bne.n	8001414 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80013e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80013ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80013f2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80013fa:	f04f 0c0f 	mov.w	ip, #15
 80013fe:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001402:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001406:	690d      	ldr	r5, [r1, #16]
 8001408:	fa05 f50b 	lsl.w	r5, r5, fp
 800140c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001410:	f8ca 5020 	str.w	r5, [sl, #32]
 8001414:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001418:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800141a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	fa05 f50a 	lsl.w	r5, r5, sl
 8001422:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001424:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001428:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001430:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001432:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001438:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143c:	d811      	bhi.n	8001462 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800143e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001440:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001444:	68cf      	ldr	r7, [r1, #12]
 8001446:	fa07 fc0a 	lsl.w	ip, r7, sl
 800144a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800144e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001450:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001452:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001456:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800145a:	409f      	lsls	r7, r3
 800145c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001460:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001462:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001464:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001466:	688f      	ldr	r7, [r1, #8]
 8001468:	fa07 f70a 	lsl.w	r7, r7, sl
 800146c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800146e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001470:	00e5      	lsls	r5, r4, #3
 8001472:	d559      	bpl.n	8001528 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001478:	f045 0501 	orr.w	r5, r5, #1
 800147c:	f8c9 5018 	str.w	r5, [r9, #24]
 8001480:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8001484:	f023 0703 	bic.w	r7, r3, #3
 8001488:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800148c:	f005 0501 	and.w	r5, r5, #1
 8001490:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001494:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001496:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800149c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800149e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014a2:	f04f 0e0f 	mov.w	lr, #15
 80014a6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014aa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80014ae:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014b2:	d03b      	beq.n	800152c <HAL_GPIO_Init+0x17c>
 80014b4:	4d24      	ldr	r5, [pc, #144]	; (8001548 <HAL_GPIO_Init+0x198>)
 80014b6:	42a8      	cmp	r0, r5
 80014b8:	d03a      	beq.n	8001530 <HAL_GPIO_Init+0x180>
 80014ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014be:	42a8      	cmp	r0, r5
 80014c0:	d038      	beq.n	8001534 <HAL_GPIO_Init+0x184>
 80014c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014c6:	42a8      	cmp	r0, r5
 80014c8:	d036      	beq.n	8001538 <HAL_GPIO_Init+0x188>
 80014ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ce:	42a8      	cmp	r0, r5
 80014d0:	d034      	beq.n	800153c <HAL_GPIO_Init+0x18c>
 80014d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014d6:	42a8      	cmp	r0, r5
 80014d8:	d032      	beq.n	8001540 <HAL_GPIO_Init+0x190>
 80014da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014de:	42a8      	cmp	r0, r5
 80014e0:	bf14      	ite	ne
 80014e2:	2507      	movne	r5, #7
 80014e4:	2506      	moveq	r5, #6
 80014e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80014ea:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80014ee:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80014f0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80014f8:	bf0c      	ite	eq
 80014fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80014fc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80014fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001500:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001502:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001506:	bf0c      	ite	eq
 8001508:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800150a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800150c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800150e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001510:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001514:	bf0c      	ite	eq
 8001516:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001518:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800151a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800151c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800151e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001520:	bf54      	ite	pl
 8001522:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001524:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001526:	60d5      	str	r5, [r2, #12]
    position++;
 8001528:	3301      	adds	r3, #1
 800152a:	e749      	b.n	80013c0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800152c:	2500      	movs	r5, #0
 800152e:	e7da      	b.n	80014e6 <HAL_GPIO_Init+0x136>
 8001530:	2501      	movs	r5, #1
 8001532:	e7d8      	b.n	80014e6 <HAL_GPIO_Init+0x136>
 8001534:	2502      	movs	r5, #2
 8001536:	e7d6      	b.n	80014e6 <HAL_GPIO_Init+0x136>
 8001538:	2503      	movs	r5, #3
 800153a:	e7d4      	b.n	80014e6 <HAL_GPIO_Init+0x136>
 800153c:	2504      	movs	r5, #4
 800153e:	e7d2      	b.n	80014e6 <HAL_GPIO_Init+0x136>
 8001540:	2505      	movs	r5, #5
 8001542:	e7d0      	b.n	80014e6 <HAL_GPIO_Init+0x136>
 8001544:	40010400 	.word	0x40010400
 8001548:	48000400 	.word	0x48000400
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	b10a      	cbz	r2, 8001556 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001552:	6181      	str	r1, [r0, #24]
 8001554:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001556:	6281      	str	r1, [r0, #40]	; 0x28
 8001558:	4770      	bx	lr

0800155a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800155a:	6943      	ldr	r3, [r0, #20]
 800155c:	4059      	eors	r1, r3
 800155e:	6141      	str	r1, [r0, #20]
 8001560:	4770      	bx	lr
	...

08001564 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001564:	6803      	ldr	r3, [r0, #0]
{
 8001566:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	07df      	lsls	r7, r3, #31
{
 800156c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	d411      	bmi.n	8001594 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	079e      	lsls	r6, r3, #30
 8001574:	f100 808b 	bmi.w	800168e <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	071c      	lsls	r4, r3, #28
 800157c:	f100 80fe 	bmi.w	800177c <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	0758      	lsls	r0, r3, #29
 8001584:	f100 8147 	bmi.w	8001816 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001588:	69aa      	ldr	r2, [r5, #24]
 800158a:	2a00      	cmp	r2, #0
 800158c:	f040 81dd 	bne.w	800194a <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001590:	2000      	movs	r0, #0
 8001592:	e024      	b.n	80015de <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001594:	4cbd      	ldr	r4, [pc, #756]	; (800188c <HAL_RCC_OscConfig+0x328>)
 8001596:	6863      	ldr	r3, [r4, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b04      	cmp	r3, #4
 800159e:	d00a      	beq.n	80015b6 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a0:	6863      	ldr	r3, [r4, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d11c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x80>
 80015aa:	6863      	ldr	r3, [r4, #4]
 80015ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ba:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015be:	6821      	ldr	r1, [r4, #0]
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2201      	movs	r2, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	420b      	tst	r3, r1
 80015d4:	d0cc      	beq.n	8001570 <HAL_RCC_OscConfig+0xc>
 80015d6:	686b      	ldr	r3, [r5, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1c9      	bne.n	8001570 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80015dc:	2001      	movs	r0, #1
}
 80015de:	b002      	add	sp, #8
 80015e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	686b      	ldr	r3, [r5, #4]
 80015e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ea:	d11e      	bne.n	800162a <HAL_RCC_OscConfig+0xc6>
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015f4:	f7ff f8a8 	bl	8000748 <HAL_GetTick>
 80015f8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80015fc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	2701      	movs	r7, #1
 8001600:	fa96 f3a6 	rbit	r3, r6
 8001604:	6822      	ldr	r2, [r4, #0]
 8001606:	fa96 f3a6 	rbit	r3, r6
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	fa07 f303 	lsl.w	r3, r7, r3
 8001616:	4213      	tst	r3, r2
 8001618:	d1aa      	bne.n	8001570 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff f895 	bl	8000748 <HAL_GetTick>
 800161e:	eba0 0008 	sub.w	r0, r0, r8
 8001622:	2864      	cmp	r0, #100	; 0x64
 8001624:	d9ec      	bls.n	8001600 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001626:	2003      	movs	r0, #3
 8001628:	e7d9      	b.n	80015de <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	bb0b      	cbnz	r3, 8001670 <HAL_RCC_OscConfig+0x10c>
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	6023      	str	r3, [r4, #0]
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800163c:	f7ff f884 	bl	8000748 <HAL_GetTick>
 8001640:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001644:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	2701      	movs	r7, #1
 8001648:	fa96 f3a6 	rbit	r3, r6
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	fa96 f3a6 	rbit	r3, r6
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	fa07 f303 	lsl.w	r3, r7, r3
 800165e:	4213      	tst	r3, r2
 8001660:	d086      	beq.n	8001570 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001662:	f7ff f871 	bl	8000748 <HAL_GetTick>
 8001666:	eba0 0008 	sub.w	r0, r0, r8
 800166a:	2864      	cmp	r0, #100	; 0x64
 800166c:	d9ec      	bls.n	8001648 <HAL_RCC_OscConfig+0xe4>
 800166e:	e7da      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	d103      	bne.n	8001680 <HAL_RCC_OscConfig+0x11c>
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6023      	str	r3, [r4, #0]
 800167e:	e7b5      	b.n	80015ec <HAL_RCC_OscConfig+0x88>
 8001680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001684:	6023      	str	r3, [r4, #0]
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	e7b1      	b.n	80015f2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800168e:	4c7f      	ldr	r4, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x328>)
 8001690:	6863      	ldr	r3, [r4, #4]
 8001692:	f013 0f0c 	tst.w	r3, #12
 8001696:	d00a      	beq.n	80016ae <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001698:	6863      	ldr	r3, [r4, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d124      	bne.n	80016ec <HAL_RCC_OscConfig+0x188>
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ac:	d11e      	bne.n	80016ec <HAL_RCC_OscConfig+0x188>
 80016ae:	2302      	movs	r3, #2
 80016b0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b4:	6821      	ldr	r1, [r4, #0]
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2201      	movs	r2, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	420b      	tst	r3, r1
 80016ca:	d002      	beq.n	80016d2 <HAL_RCC_OscConfig+0x16e>
 80016cc:	68eb      	ldr	r3, [r5, #12]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d184      	bne.n	80015dc <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	6821      	ldr	r1, [r4, #0]
 80016d4:	23f8      	movs	r3, #248	; 0xf8
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	fab3 f283 	clz	r2, r3
 80016de:	692b      	ldr	r3, [r5, #16]
 80016e0:	4093      	lsls	r3, r2
 80016e2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80016e6:	4313      	orrs	r3, r2
 80016e8:	6023      	str	r3, [r4, #0]
 80016ea:	e745      	b.n	8001578 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	68ea      	ldr	r2, [r5, #12]
 80016ee:	2601      	movs	r6, #1
 80016f0:	b30a      	cbz	r2, 8001736 <HAL_RCC_OscConfig+0x1d2>
 80016f2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	2702      	movs	r7, #2
 8001706:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001708:	f7ff f81e 	bl	8000748 <HAL_GetTick>
 800170c:	4680      	mov	r8, r0
 800170e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	fa97 f3a7 	rbit	r3, r7
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa06 f303 	lsl.w	r3, r6, r3
 8001724:	4213      	tst	r3, r2
 8001726:	d1d4      	bne.n	80016d2 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff f80e 	bl	8000748 <HAL_GetTick>
 800172c:	eba0 0008 	sub.w	r0, r0, r8
 8001730:	2802      	cmp	r0, #2
 8001732:	d9ec      	bls.n	800170e <HAL_RCC_OscConfig+0x1aa>
 8001734:	e777      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
 8001736:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001742:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	2702      	movs	r7, #2
 800174a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800174c:	f7fe fffc 	bl	8000748 <HAL_GetTick>
 8001750:	4680      	mov	r8, r0
 8001752:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	6822      	ldr	r2, [r4, #0]
 8001758:	fa97 f3a7 	rbit	r3, r7
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	fa06 f303 	lsl.w	r3, r6, r3
 8001768:	4213      	tst	r3, r2
 800176a:	f43f af05 	beq.w	8001578 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7fe ffeb 	bl	8000748 <HAL_GetTick>
 8001772:	eba0 0008 	sub.w	r0, r0, r8
 8001776:	2802      	cmp	r0, #2
 8001778:	d9eb      	bls.n	8001752 <HAL_RCC_OscConfig+0x1ee>
 800177a:	e754      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	696a      	ldr	r2, [r5, #20]
 800177e:	4e43      	ldr	r6, [pc, #268]	; (800188c <HAL_RCC_OscConfig+0x328>)
 8001780:	4943      	ldr	r1, [pc, #268]	; (8001890 <HAL_RCC_OscConfig+0x32c>)
 8001782:	2401      	movs	r4, #1
 8001784:	b31a      	cbz	r2, 80017ce <HAL_RCC_OscConfig+0x26a>
 8001786:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	440b      	add	r3, r1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	2702      	movs	r7, #2
 8001794:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001796:	f7fe ffd7 	bl	8000748 <HAL_GetTick>
 800179a:	4680      	mov	r8, r0
 800179c:	fa97 f3a7 	rbit	r3, r7
 80017a0:	fa97 f3a7 	rbit	r3, r7
 80017a4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80017aa:	fa97 f3a7 	rbit	r3, r7
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	fa04 f303 	lsl.w	r3, r4, r3
 80017ba:	4213      	tst	r3, r2
 80017bc:	f47f aee0 	bne.w	8001580 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7fe ffc2 	bl	8000748 <HAL_GetTick>
 80017c4:	eba0 0008 	sub.w	r0, r0, r8
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9e7      	bls.n	800179c <HAL_RCC_OscConfig+0x238>
 80017cc:	e72b      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
 80017ce:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	440b      	add	r3, r1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	2702      	movs	r7, #2
 80017dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017de:	f7fe ffb3 	bl	8000748 <HAL_GetTick>
 80017e2:	4680      	mov	r8, r0
 80017e4:	fa97 f3a7 	rbit	r3, r7
 80017e8:	fa97 f3a7 	rbit	r3, r7
 80017ec:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80017f2:	fa97 f3a7 	rbit	r3, r7
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	fa04 f303 	lsl.w	r3, r4, r3
 8001802:	4213      	tst	r3, r2
 8001804:	f43f aebc 	beq.w	8001580 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001808:	f7fe ff9e 	bl	8000748 <HAL_GetTick>
 800180c:	eba0 0008 	sub.w	r0, r0, r8
 8001810:	2802      	cmp	r0, #2
 8001812:	d9e7      	bls.n	80017e4 <HAL_RCC_OscConfig+0x280>
 8001814:	e707      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4c1d      	ldr	r4, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x328>)
 8001818:	69e3      	ldr	r3, [r4, #28]
 800181a:	00d9      	lsls	r1, r3, #3
 800181c:	d434      	bmi.n	8001888 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	69e3      	ldr	r3, [r4, #28]
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61e3      	str	r3, [r4, #28]
 8001826:	69e3      	ldr	r3, [r4, #28]
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001830:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4f18      	ldr	r7, [pc, #96]	; (8001894 <HAL_RCC_OscConfig+0x330>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	05da      	lsls	r2, r3, #23
 8001838:	d52e      	bpl.n	8001898 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	68ab      	ldr	r3, [r5, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d13c      	bne.n	80018ba <HAL_RCC_OscConfig+0x356>
 8001840:	6a23      	ldr	r3, [r4, #32]
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001848:	f7fe ff7e 	bl	8000748 <HAL_GetTick>
 800184c:	2702      	movs	r7, #2
 800184e:	4682      	mov	sl, r0
 8001850:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	f04f 0801 	mov.w	r8, #1
 8001856:	fa97 f3a7 	rbit	r3, r7
 800185a:	fa97 f3a7 	rbit	r3, r7
 800185e:	2b00      	cmp	r3, #0
 8001860:	d06b      	beq.n	800193a <HAL_RCC_OscConfig+0x3d6>
 8001862:	6a22      	ldr	r2, [r4, #32]
 8001864:	fa99 f3a9 	rbit	r3, r9
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	fa08 f303 	lsl.w	r3, r8, r3
 8001874:	4213      	tst	r3, r2
 8001876:	d057      	beq.n	8001928 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8001878:	2e00      	cmp	r6, #0
 800187a:	f43f ae85 	beq.w	8001588 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	69e3      	ldr	r3, [r4, #28]
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	61e3      	str	r3, [r4, #28]
 8001886:	e67f      	b.n	8001588 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2600      	movs	r6, #0
 800188a:	e7d2      	b.n	8001832 <HAL_RCC_OscConfig+0x2ce>
 800188c:	40021000 	.word	0x40021000
 8001890:	10908120 	.word	0x10908120
 8001894:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80018a0:	f7fe ff52 	bl	8000748 <HAL_GetTick>
 80018a4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	d4c6      	bmi.n	800183a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ac:	f7fe ff4c 	bl	8000748 <HAL_GetTick>
 80018b0:	eba0 0008 	sub.w	r0, r0, r8
 80018b4:	2864      	cmp	r0, #100	; 0x64
 80018b6:	d9f6      	bls.n	80018a6 <HAL_RCC_OscConfig+0x342>
 80018b8:	e6b5      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ba:	bb3b      	cbnz	r3, 800190c <HAL_RCC_OscConfig+0x3a8>
 80018bc:	6a23      	ldr	r3, [r4, #32]
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6223      	str	r3, [r4, #32]
 80018c4:	6a23      	ldr	r3, [r4, #32]
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018cc:	f7fe ff3c 	bl	8000748 <HAL_GetTick>
 80018d0:	2702      	movs	r7, #2
 80018d2:	4682      	mov	sl, r0
 80018d4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d6:	f04f 0801 	mov.w	r8, #1
 80018da:	fa97 f3a7 	rbit	r3, r7
 80018de:	fa97 f3a7 	rbit	r3, r7
 80018e2:	b373      	cbz	r3, 8001942 <HAL_RCC_OscConfig+0x3de>
 80018e4:	6a22      	ldr	r2, [r4, #32]
 80018e6:	fa99 f3a9 	rbit	r3, r9
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	fa08 f303 	lsl.w	r3, r8, r3
 80018f6:	4213      	tst	r3, r2
 80018f8:	d0be      	beq.n	8001878 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7fe ff25 	bl	8000748 <HAL_GetTick>
 80018fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001902:	eba0 000a 	sub.w	r0, r0, sl
 8001906:	4298      	cmp	r0, r3
 8001908:	d9e7      	bls.n	80018da <HAL_RCC_OscConfig+0x376>
 800190a:	e68c      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	2b05      	cmp	r3, #5
 800190e:	6a23      	ldr	r3, [r4, #32]
 8001910:	d103      	bne.n	800191a <HAL_RCC_OscConfig+0x3b6>
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6223      	str	r3, [r4, #32]
 8001918:	e792      	b.n	8001840 <HAL_RCC_OscConfig+0x2dc>
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6223      	str	r3, [r4, #32]
 8001920:	6a23      	ldr	r3, [r4, #32]
 8001922:	f023 0304 	bic.w	r3, r3, #4
 8001926:	e78e      	b.n	8001846 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7fe ff0e 	bl	8000748 <HAL_GetTick>
 800192c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001930:	eba0 000a 	sub.w	r0, r0, sl
 8001934:	4298      	cmp	r0, r3
 8001936:	d98e      	bls.n	8001856 <HAL_RCC_OscConfig+0x2f2>
 8001938:	e675      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
 800193a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001940:	e790      	b.n	8001864 <HAL_RCC_OscConfig+0x300>
 8001942:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001948:	e7cd      	b.n	80018e6 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194a:	4c44      	ldr	r4, [pc, #272]	; (8001a5c <HAL_RCC_OscConfig+0x4f8>)
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	f43f ae42 	beq.w	80015dc <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001958:	2a02      	cmp	r2, #2
 800195a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800195e:	d158      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4ae>
 8001960:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800196c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001976:	f7fe fee7 	bl	8000748 <HAL_GetTick>
 800197a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800197e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001980:	2601      	movs	r6, #1
 8001982:	fa97 f3a7 	rbit	r3, r7
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	fa97 f3a7 	rbit	r3, r7
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa06 f303 	lsl.w	r3, r6, r3
 8001998:	4213      	tst	r3, r2
 800199a:	d133      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800199e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	4313      	orrs	r3, r2
 80019a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019a8:	6862      	ldr	r2, [r4, #4]
 80019aa:	6a2b      	ldr	r3, [r5, #32]
 80019ac:	69e9      	ldr	r1, [r5, #28]
 80019ae:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80019b2:	430b      	orrs	r3, r1
 80019b4:	4313      	orrs	r3, r2
 80019b6:	6063      	str	r3, [r4, #4]
 80019b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019bc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80019d2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80019d4:	f7fe feb8 	bl	8000748 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d8:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80019da:	4607      	mov	r7, r0
 80019dc:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	fa95 f3a5 	rbit	r3, r5
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	fa06 f303 	lsl.w	r3, r6, r3
 80019f2:	4213      	tst	r3, r2
 80019f4:	f47f adcc 	bne.w	8001590 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7fe fea6 	bl	8000748 <HAL_GetTick>
 80019fc:	1bc0      	subs	r0, r0, r7
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d9ec      	bls.n	80019dc <HAL_RCC_OscConfig+0x478>
 8001a02:	e610      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe fea0 	bl	8000748 <HAL_GetTick>
 8001a08:	eba0 0008 	sub.w	r0, r0, r8
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9b8      	bls.n	8001982 <HAL_RCC_OscConfig+0x41e>
 8001a10:	e609      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
 8001a12:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a28:	f7fe fe8e 	bl	8000748 <HAL_GetTick>
 8001a2c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001a30:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	2601      	movs	r6, #1
 8001a34:	fa95 f3a5 	rbit	r3, r5
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	fa95 f3a5 	rbit	r3, r5
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	fa06 f303 	lsl.w	r3, r6, r3
 8001a4a:	4213      	tst	r3, r2
 8001a4c:	f43f ada0 	beq.w	8001590 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7fe fe7a 	bl	8000748 <HAL_GetTick>
 8001a54:	1bc0      	subs	r0, r0, r7
 8001a56:	2802      	cmp	r0, #2
 8001a58:	d9ec      	bls.n	8001a34 <HAL_RCC_OscConfig+0x4d0>
 8001a5a:	e5e4      	b.n	8001626 <HAL_RCC_OscConfig+0xc2>
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001a60:	4911      	ldr	r1, [pc, #68]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001a62:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a64:	f003 020c 	and.w	r2, r3, #12
 8001a68:	2a08      	cmp	r2, #8
 8001a6a:	d11a      	bne.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x42>
 8001a6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001a70:	fa92 f2a2 	rbit	r2, r2
 8001a74:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a76:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a7a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001a7c:	fa90 f0a0 	rbit	r0, r0
 8001a80:	fab0 f080 	clz	r0, r0
 8001a84:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001a8c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a8e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001a94:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001a96:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x54>)
 8001a98:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a9c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001a9e:	4348      	muls	r0, r1
 8001aa0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001aa2:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	0800438c 	.word	0x0800438c
 8001ab0:	0800439c 	.word	0x0800439c
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ab8:	4a5c      	ldr	r2, [pc, #368]	; (8001c2c <HAL_RCC_ClockConfig+0x174>)
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	428b      	cmp	r3, r1
{
 8001ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac6:	4606      	mov	r6, r0
 8001ac8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001aca:	d330      	bcc.n	8001b2e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	6832      	ldr	r2, [r6, #0]
 8001ace:	0791      	lsls	r1, r2, #30
 8001ad0:	d43a      	bmi.n	8001b48 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	07d2      	lsls	r2, r2, #31
 8001ad4:	d440      	bmi.n	8001b58 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ad6:	4a55      	ldr	r2, [pc, #340]	; (8001c2c <HAL_RCC_ClockConfig+0x174>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	429d      	cmp	r5, r3
 8001ae0:	f0c0 8092 	bcc.w	8001c08 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	6832      	ldr	r2, [r6, #0]
 8001ae6:	4c52      	ldr	r4, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x178>)
 8001ae8:	f012 0f04 	tst.w	r2, #4
 8001aec:	f040 8097 	bne.w	8001c1e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	0713      	lsls	r3, r2, #28
 8001af2:	d506      	bpl.n	8001b02 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	6932      	ldr	r2, [r6, #16]
 8001af8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001afc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b00:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b02:	f7ff ffad 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001b06:	6863      	ldr	r3, [r4, #4]
 8001b08:	22f0      	movs	r2, #240	; 0xf0
 8001b0a:	fa92 f2a2 	rbit	r2, r2
 8001b0e:	fab2 f282 	clz	r2, r2
 8001b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b16:	40d3      	lsrs	r3, r2
 8001b18:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <HAL_RCC_ClockConfig+0x17c>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	40d8      	lsrs	r0, r3
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_ClockConfig+0x180>)
 8001b20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7fe fd68 	bl	80005f8 <HAL_InitTick>
  return HAL_OK;
 8001b28:	2000      	movs	r0, #0
}
 8001b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	6813      	ldr	r3, [r2, #0]
 8001b30:	f023 0307 	bic.w	r3, r3, #7
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	4299      	cmp	r1, r3
 8001b40:	d0c4      	beq.n	8001acc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4939      	ldr	r1, [pc, #228]	; (8001c30 <HAL_RCC_ClockConfig+0x178>)
 8001b4a:	68b0      	ldr	r0, [r6, #8]
 8001b4c:	684b      	ldr	r3, [r1, #4]
 8001b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b52:	4303      	orrs	r3, r0
 8001b54:	604b      	str	r3, [r1, #4]
 8001b56:	e7bc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	6872      	ldr	r2, [r6, #4]
 8001b5a:	4c35      	ldr	r4, [pc, #212]	; (8001c30 <HAL_RCC_ClockConfig+0x178>)
 8001b5c:	2a01      	cmp	r2, #1
 8001b5e:	d128      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xfa>
 8001b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b64:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b68:	6821      	ldr	r1, [r4, #0]
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	d0e1      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	6863      	ldr	r3, [r4, #4]
 8001b80:	f023 0303 	bic.w	r3, r3, #3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001b88:	f7fe fdde 	bl	8000748 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8c:	6873      	ldr	r3, [r6, #4]
 8001b8e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001b90:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	d11f      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b98:	6863      	ldr	r3, [r4, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d099      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7fe fdd1 	bl	8000748 <HAL_GetTick>
 8001ba6:	1bc0      	subs	r0, r0, r7
 8001ba8:	4540      	cmp	r0, r8
 8001baa:	d9f5      	bls.n	8001b98 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001bac:	2003      	movs	r0, #3
 8001bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	2a02      	cmp	r2, #2
 8001bb4:	bf0c      	ite	eq
 8001bb6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001bba:	2302      	movne	r3, #2
 8001bbc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4203      	tst	r3, r0
 8001bd6:	e7d1      	b.n	8001b7c <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d110      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	f43f af77 	beq.w	8001ad6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7fe fdae 	bl	8000748 <HAL_GetTick>
 8001bec:	1bc0      	subs	r0, r0, r7
 8001bee:	4540      	cmp	r0, r8
 8001bf0:	d9f4      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x124>
 8001bf2:	e7db      	b.n	8001bac <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe fda8 	bl	8000748 <HAL_GetTick>
 8001bf8:	1bc0      	subs	r0, r0, r7
 8001bfa:	4540      	cmp	r0, r8
 8001bfc:	d8d6      	bhi.n	8001bac <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfe:	6863      	ldr	r3, [r4, #4]
 8001c00:	f013 0f0c 	tst.w	r3, #12
 8001c04:	d1f6      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x13c>
 8001c06:	e766      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	f023 0307 	bic.w	r3, r3, #7
 8001c0e:	432b      	orrs	r3, r5
 8001c10:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	429d      	cmp	r5, r3
 8001c1a:	d192      	bne.n	8001b42 <HAL_RCC_ClockConfig+0x8a>
 8001c1c:	e762      	b.n	8001ae4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1e:	6863      	ldr	r3, [r4, #4]
 8001c20:	68f1      	ldr	r1, [r6, #12]
 8001c22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6063      	str	r3, [r4, #4]
 8001c2a:	e761      	b.n	8001af0 <HAL_RCC_ClockConfig+0x38>
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08004374 	.word	0x08004374
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	fa92 f2a2 	rbit	r2, r2
 8001c54:	fab2 f282 	clz	r2, r2
 8001c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c5c:	40d3      	lsrs	r3, r2
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001c64:	6810      	ldr	r0, [r2, #0]
}    
 8001c66:	40d8      	lsrs	r0, r3
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08004384 	.word	0x08004384
 8001c74:	20000000 	.word	0x20000000

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	fab2 f282 	clz	r2, r2
 8001c88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001c8c:	40d3      	lsrs	r3, r2
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001c94:	6810      	ldr	r0, [r2, #0]
} 
 8001c96:	40d8      	lsrs	r0, r3
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08004384 	.word	0x08004384
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_GetClockConfig+0x34>)
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001cbc:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001cc4:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cce:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_RCC_GetClockConfig+0x38>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	600b      	str	r3, [r1, #0]
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce4:	6803      	ldr	r3, [r0, #0]
{
 8001ce6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cea:	03df      	lsls	r7, r3, #15
{
 8001cec:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cee:	d523      	bpl.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4d9b      	ldr	r5, [pc, #620]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cf2:	69eb      	ldr	r3, [r5, #28]
 8001cf4:	00de      	lsls	r6, r3, #3
 8001cf6:	f100 80d7 	bmi.w	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	69eb      	ldr	r3, [r5, #28]
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	61eb      	str	r3, [r5, #28]
 8001d02:	69eb      	ldr	r3, [r5, #28]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d0c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4f95      	ldr	r7, [pc, #596]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	05d8      	lsls	r0, r3, #23
 8001d14:	f140 80ca 	bpl.w	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d18:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d1e:	f040 80da 	bne.w	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001d22:	6a2b      	ldr	r3, [r5, #32]
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d2e:	b11e      	cbz	r6, 8001d38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d30:	69eb      	ldr	r3, [r5, #28]
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d38:	6820      	ldr	r0, [r4, #0]
 8001d3a:	07c3      	lsls	r3, r0, #31
 8001d3c:	d506      	bpl.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d3e:	4a88      	ldr	r2, [pc, #544]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d40:	68a1      	ldr	r1, [r4, #8]
 8001d42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d44:	f023 0303 	bic.w	r3, r3, #3
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d4c:	0787      	lsls	r7, r0, #30
 8001d4e:	d506      	bpl.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d50:	4a83      	ldr	r2, [pc, #524]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d52:	68e1      	ldr	r1, [r4, #12]
 8001d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d5e:	0746      	lsls	r6, r0, #29
 8001d60:	d506      	bpl.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d62:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d64:	6921      	ldr	r1, [r4, #16]
 8001d66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d68:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d70:	0685      	lsls	r5, r0, #26
 8001d72:	d506      	bpl.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d74:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d76:	69e1      	ldr	r1, [r4, #28]
 8001d78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d7a:	f023 0310 	bic.w	r3, r3, #16
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d82:	0381      	lsls	r1, r0, #14
 8001d84:	d506      	bpl.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001d86:	4a76      	ldr	r2, [pc, #472]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001d8a:	6853      	ldr	r3, [r2, #4]
 8001d8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d94:	0642      	lsls	r2, r0, #25
 8001d96:	d506      	bpl.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d98:	4a71      	ldr	r2, [pc, #452]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d9a:	6a21      	ldr	r1, [r4, #32]
 8001d9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d9e:	f023 0320 	bic.w	r3, r3, #32
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001da6:	0343      	lsls	r3, r0, #13
 8001da8:	d506      	bpl.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001daa:	4a6d      	ldr	r2, [pc, #436]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001db8:	0707      	lsls	r7, r0, #28
 8001dba:	d506      	bpl.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dbc:	4a68      	ldr	r2, [pc, #416]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dbe:	6961      	ldr	r1, [r4, #20]
 8001dc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001dc2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dca:	06c6      	lsls	r6, r0, #27
 8001dcc:	d506      	bpl.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dce:	4a64      	ldr	r2, [pc, #400]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dd0:	69a1      	ldr	r1, [r4, #24]
 8001dd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001dd4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ddc:	0585      	lsls	r5, r0, #22
 8001dde:	d506      	bpl.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001de0:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001de2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001de4:	6853      	ldr	r3, [r2, #4]
 8001de6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dea:	430b      	orrs	r3, r1
 8001dec:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001dee:	0601      	lsls	r1, r0, #24
 8001df0:	d506      	bpl.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001df2:	4a5b      	ldr	r2, [pc, #364]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001df4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001df6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001df8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001e00:	05c2      	lsls	r2, r0, #23
 8001e02:	d506      	bpl.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e0a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001e0e:	430b      	orrs	r3, r1
 8001e10:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e12:	04c3      	lsls	r3, r0, #19
 8001e14:	d506      	bpl.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e16:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001e24:	0487      	lsls	r7, r0, #18
 8001e26:	d506      	bpl.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001e28:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001e36:	02c6      	lsls	r6, r0, #11
 8001e38:	d506      	bpl.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001e3a:	4a49      	ldr	r2, [pc, #292]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001e48:	0285      	lsls	r5, r0, #10
 8001e4a:	d506      	bpl.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001e4c:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001e56:	430b      	orrs	r3, r1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e5a:	0241      	lsls	r1, r0, #9
 8001e5c:	d506      	bpl.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e5e:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e60:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e62:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001e6c:	0202      	lsls	r2, r0, #8
 8001e6e:	d506      	bpl.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001e70:	4a3b      	ldr	r2, [pc, #236]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e72:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001e74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001e7e:	01c3      	lsls	r3, r0, #7
 8001e80:	d506      	bpl.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001e82:	4a37      	ldr	r2, [pc, #220]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001e86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001e90:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001e94:	d01c      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001e96:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001e9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e013      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001ea8:	2600      	movs	r6, #0
 8001eaa:	e730      	b.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001eb4:	f7fe fc48 	bl	8000748 <HAL_GetTick>
 8001eb8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	05d9      	lsls	r1, r3, #23
 8001ebe:	f53f af2b 	bmi.w	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7fe fc41 	bl	8000748 <HAL_GetTick>
 8001ec6:	eba0 0008 	sub.w	r0, r0, r8
 8001eca:	2864      	cmp	r0, #100	; 0x64
 8001ecc:	d9f5      	bls.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001ece:	2003      	movs	r0, #3
}
 8001ed0:	b002      	add	sp, #8
 8001ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ed6:	6862      	ldr	r2, [r4, #4]
 8001ed8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f43f af20 	beq.w	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee2:	6a29      	ldr	r1, [r5, #32]
 8001ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001eec:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001f68 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	4472      	add	r2, lr
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	2701      	movs	r7, #1
 8001efe:	6017      	str	r7, [r2, #0]
 8001f00:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	4473      	add	r3, lr
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f10:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001f12:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f14:	f57f af05 	bpl.w	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001f18:	f7fe fc16 	bl	8000748 <HAL_GetTick>
 8001f1c:	f04f 0802 	mov.w	r8, #2
 8001f20:	4682      	mov	sl, r0
 8001f22:	46c1      	mov	r9, r8
 8001f24:	fa98 f3a8 	rbit	r3, r8
 8001f28:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	b1a3      	cbz	r3, 8001f58 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001f2e:	6a2a      	ldr	r2, [r5, #32]
 8001f30:	fa99 f3a9 	rbit	r3, r9
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa07 f303 	lsl.w	r3, r7, r3
 8001f40:	4213      	tst	r3, r2
 8001f42:	f47f aeee 	bne.w	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fbff 	bl	8000748 <HAL_GetTick>
 8001f4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f4e:	eba0 000a 	sub.w	r0, r0, sl
 8001f52:	4298      	cmp	r0, r3
 8001f54:	d9e6      	bls.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001f56:	e7ba      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001f58:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001f5e:	e7e7      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	10908100 	.word	0x10908100

08001f6c <HAL_TIM_Base_MspInit>:
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001f80:	2000      	movs	r0, #0
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_OC_DelayElapsedCallback>:
 8001f84:	4770      	bx	lr

08001f86 <HAL_TIM_IC_CaptureCallback>:
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_TriggerCallback>:
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f8c:	6803      	ldr	r3, [r0, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	0791      	lsls	r1, r2, #30
{
 8001f92:	b510      	push	{r4, lr}
 8001f94:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f96:	d50f      	bpl.n	8001fb8 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	0792      	lsls	r2, r2, #30
 8001f9c:	d50c      	bpl.n	8001fb8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f9e:	f06f 0202 	mvn.w	r2, #2
 8001fa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001faa:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fac:	f000 8085 	beq.w	80020ba <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001fb0:	f7ff ffe9 	bl	8001f86 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	0752      	lsls	r2, r2, #29
 8001fbe:	d510      	bpl.n	8001fe2 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	0750      	lsls	r0, r2, #29
 8001fc4:	d50d      	bpl.n	8001fe2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fc6:	f06f 0204 	mvn.w	r2, #4
 8001fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fcc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fce:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd4:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd8:	d075      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	f7ff ffd4 	bl	8001f86 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	0711      	lsls	r1, r2, #28
 8001fe8:	d50f      	bpl.n	800200a <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	0712      	lsls	r2, r2, #28
 8001fee:	d50c      	bpl.n	800200a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffa:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ffc:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002000:	d067      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	f7ff ffc0 	bl	8001f86 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	2300      	movs	r3, #0
 8002008:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	06d0      	lsls	r0, r2, #27
 8002010:	d510      	bpl.n	8002034 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	06d1      	lsls	r1, r2, #27
 8002016:	d50d      	bpl.n	8002034 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002018:	f06f 0210 	mvn.w	r2, #16
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800201e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002020:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002022:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002026:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002028:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202a:	d058      	beq.n	80020de <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800202c:	f7ff ffab 	bl	8001f86 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002030:	2300      	movs	r3, #0
 8002032:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	07d2      	lsls	r2, r2, #31
 800203a:	d508      	bpl.n	800204e <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	07d0      	lsls	r0, r2, #31
 8002040:	d505      	bpl.n	800204e <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002042:	f06f 0201 	mvn.w	r2, #1
 8002046:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002048:	4620      	mov	r0, r4
 800204a:	f7fe fa37 	bl	80004bc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	0611      	lsls	r1, r2, #24
 8002054:	d508      	bpl.n	8002068 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	0612      	lsls	r2, r2, #24
 800205a:	d505      	bpl.n	8002068 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800205c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002060:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002062:	4620      	mov	r0, r4
 8002064:	f000 f8c7 	bl	80021f6 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	05d0      	lsls	r0, r2, #23
 800206e:	d508      	bpl.n	8002082 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	0611      	lsls	r1, r2, #24
 8002074:	d505      	bpl.n	8002082 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002076:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800207a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800207c:	4620      	mov	r0, r4
 800207e:	f000 f8bb 	bl	80021f8 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	0652      	lsls	r2, r2, #25
 8002088:	d508      	bpl.n	800209c <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	0650      	lsls	r0, r2, #25
 800208e:	d505      	bpl.n	800209c <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002094:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002096:	4620      	mov	r0, r4
 8002098:	f7ff ff77 	bl	8001f8a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	0691      	lsls	r1, r2, #26
 80020a2:	d522      	bpl.n	80020ea <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	0692      	lsls	r2, r2, #26
 80020a8:	d51f      	bpl.n	80020ea <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020aa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80020ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020b0:	611a      	str	r2, [r3, #16]
    }
  }
}
 80020b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80020b6:	f000 b89d 	b.w	80021f4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	f7ff ff63 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ff62 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
 80020c4:	e776      	b.n	8001fb4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	f7ff ff5d 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff ff5c 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
 80020d0:	e785      	b.n	8001fde <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	f7ff ff57 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7ff ff56 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
 80020dc:	e793      	b.n	8002006 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	f7ff ff51 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff ff50 	bl	8001f88 <HAL_TIM_PWM_PulseFinishedCallback>
 80020e8:	e7a2      	b.n	8002030 <HAL_TIM_IRQHandler+0xa4>
 80020ea:	bd10      	pop	{r4, pc}

080020ec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	4a32      	ldr	r2, [pc, #200]	; (80021b8 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80020ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f0:	4290      	cmp	r0, r2
 80020f2:	d012      	beq.n	800211a <TIM_Base_SetConfig+0x2e>
 80020f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020f8:	d00f      	beq.n	800211a <TIM_Base_SetConfig+0x2e>
 80020fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020fe:	4290      	cmp	r0, r2
 8002100:	d00b      	beq.n	800211a <TIM_Base_SetConfig+0x2e>
 8002102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002106:	4290      	cmp	r0, r2
 8002108:	d007      	beq.n	800211a <TIM_Base_SetConfig+0x2e>
 800210a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800210e:	4290      	cmp	r0, r2
 8002110:	d003      	beq.n	800211a <TIM_Base_SetConfig+0x2e>
 8002112:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002116:	4290      	cmp	r0, r2
 8002118:	d115      	bne.n	8002146 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800211a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002120:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <TIM_Base_SetConfig+0xcc>)
 8002124:	4290      	cmp	r0, r2
 8002126:	d01d      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 8002128:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800212c:	d01a      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 800212e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002132:	4290      	cmp	r0, r2
 8002134:	d016      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 8002136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800213a:	4290      	cmp	r0, r2
 800213c:	d012      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 800213e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002142:	4290      	cmp	r0, r2
 8002144:	d00e      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <TIM_Base_SetConfig+0xd0>)
 8002148:	4290      	cmp	r0, r2
 800214a:	d00b      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 800214c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002150:	4290      	cmp	r0, r2
 8002152:	d007      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 8002154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002158:	4290      	cmp	r0, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0x78>
 800215c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002160:	4290      	cmp	r0, r2
 8002162:	d103      	bne.n	800216c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002164:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800216c:	694a      	ldr	r2, [r1, #20]
 800216e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002172:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002174:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002176:	688b      	ldr	r3, [r1, #8]
 8002178:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800217a:	680b      	ldr	r3, [r1, #0]
 800217c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <TIM_Base_SetConfig+0xcc>)
 8002180:	4298      	cmp	r0, r3
 8002182:	d013      	beq.n	80021ac <TIM_Base_SetConfig+0xc0>
 8002184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002188:	4298      	cmp	r0, r3
 800218a:	d00f      	beq.n	80021ac <TIM_Base_SetConfig+0xc0>
 800218c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002190:	4298      	cmp	r0, r3
 8002192:	d00b      	beq.n	80021ac <TIM_Base_SetConfig+0xc0>
 8002194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002198:	4298      	cmp	r0, r3
 800219a:	d007      	beq.n	80021ac <TIM_Base_SetConfig+0xc0>
 800219c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a0:	4298      	cmp	r0, r3
 80021a2:	d003      	beq.n	80021ac <TIM_Base_SetConfig+0xc0>
 80021a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a8:	4298      	cmp	r0, r3
 80021aa:	d101      	bne.n	80021b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ac:	690b      	ldr	r3, [r1, #16]
 80021ae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80021b0:	2301      	movs	r3, #1
 80021b2:	6143      	str	r3, [r0, #20]
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40014000 	.word	0x40014000

080021c0 <HAL_TIM_Base_Init>:
{ 
 80021c0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80021c2:	4604      	mov	r4, r0
 80021c4:	b1a0      	cbz	r0, 80021f0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80021c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ce:	b91b      	cbnz	r3, 80021d8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80021d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021d4:	f7ff feca 	bl	8001f6c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80021d8:	2302      	movs	r3, #2
 80021da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80021de:	6820      	ldr	r0, [r4, #0]
 80021e0:	1d21      	adds	r1, r4, #4
 80021e2:	f7ff ff83 	bl	80020ec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80021ec:	2000      	movs	r0, #0
 80021ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
}
 80021f2:	bd10      	pop	{r4, pc}

080021f4 <HAL_TIMEx_CommutationCallback>:
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIMEx_BreakCallback>:
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021f8:	4770      	bx	lr

080021fa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021fa:	6803      	ldr	r3, [r0, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002202:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800220c:	2320      	movs	r3, #32
 800220e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002212:	4770      	bx	lr

08002214 <HAL_UART_TxCpltCallback>:
 8002214:	4770      	bx	lr

08002216 <HAL_UART_RxCpltCallback>:
 8002216:	4770      	bx	lr

08002218 <HAL_UART_ErrorCallback>:
 8002218:	4770      	bx	lr

0800221a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800221a:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800221c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002224:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002228:	f7ff fff6 	bl	8002218 <HAL_UART_ErrorCallback>
 800222c:	bd08      	pop	{r3, pc}
	...

08002230 <UART_SetConfig>:
{
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002234:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002236:	6921      	ldr	r1, [r4, #16]
 8002238:	68a2      	ldr	r2, [r4, #8]
 800223a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800223c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800223e:	430a      	orrs	r2, r1
 8002240:	6961      	ldr	r1, [r4, #20]
 8002242:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002244:	4977      	ldr	r1, [pc, #476]	; (8002424 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002246:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002248:	4001      	ands	r1, r0
 800224a:	430a      	orrs	r2, r1
 800224c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800224e:	686a      	ldr	r2, [r5, #4]
 8002250:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002252:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002254:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002258:	430a      	orrs	r2, r1
 800225a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800225c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800225e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002260:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002264:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002266:	430a      	orrs	r2, r1
 8002268:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800226a:	4a6f      	ldr	r2, [pc, #444]	; (8002428 <UART_SetConfig+0x1f8>)
 800226c:	4295      	cmp	r5, r2
 800226e:	d112      	bne.n	8002296 <UART_SetConfig+0x66>
 8002270:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002274:	496d      	ldr	r1, [pc, #436]	; (800242c <UART_SetConfig+0x1fc>)
 8002276:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002278:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800227c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002280:	5c8a      	ldrb	r2, [r1, r2]
 8002282:	d066      	beq.n	8002352 <UART_SetConfig+0x122>
    switch (clocksource)
 8002284:	2a08      	cmp	r2, #8
 8002286:	d819      	bhi.n	80022bc <UART_SetConfig+0x8c>
 8002288:	e8df f002 	tbb	[pc, r2]
 800228c:	189e92c2 	.word	0x189e92c2
 8002290:	181818a9 	.word	0x181818a9
 8002294:	ac          	.byte	0xac
 8002295:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002296:	4a66      	ldr	r2, [pc, #408]	; (8002430 <UART_SetConfig+0x200>)
 8002298:	4295      	cmp	r5, r2
 800229a:	d124      	bne.n	80022e6 <UART_SetConfig+0xb6>
 800229c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80022a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022a2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80022a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80022aa:	f000 80a0 	beq.w	80023ee <UART_SetConfig+0x1be>
 80022ae:	d807      	bhi.n	80022c0 <UART_SetConfig+0x90>
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	f000 80aa 	beq.w	800240a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ba:	d076      	beq.n	80023aa <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 80022bc:	2001      	movs	r0, #1
  return ret;
 80022be:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022c0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80022c4:	f000 8099 	beq.w	80023fa <UART_SetConfig+0x1ca>
 80022c8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80022cc:	d1f3      	bne.n	80022b6 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d2:	d179      	bne.n	80023c8 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80022d4:	6860      	ldr	r0, [r4, #4]
 80022d6:	0843      	lsrs	r3, r0, #1
 80022d8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80022dc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80022e4:	e054      	b.n	8002390 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022e6:	4a53      	ldr	r2, [pc, #332]	; (8002434 <UART_SetConfig+0x204>)
 80022e8:	4295      	cmp	r5, r2
 80022ea:	d10e      	bne.n	800230a <UART_SetConfig+0xda>
 80022ec:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80022f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80022f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80022fa:	d078      	beq.n	80023ee <UART_SetConfig+0x1be>
 80022fc:	d9d8      	bls.n	80022b0 <UART_SetConfig+0x80>
 80022fe:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002302:	d07a      	beq.n	80023fa <UART_SetConfig+0x1ca>
 8002304:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002308:	e7e0      	b.n	80022cc <UART_SetConfig+0x9c>
 800230a:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <UART_SetConfig+0x208>)
 800230c:	4295      	cmp	r5, r2
 800230e:	d10e      	bne.n	800232e <UART_SetConfig+0xfe>
 8002310:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002314:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002316:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800231a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800231e:	d066      	beq.n	80023ee <UART_SetConfig+0x1be>
 8002320:	d9c6      	bls.n	80022b0 <UART_SetConfig+0x80>
 8002322:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002326:	d068      	beq.n	80023fa <UART_SetConfig+0x1ca>
 8002328:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800232c:	e7ce      	b.n	80022cc <UART_SetConfig+0x9c>
 800232e:	4a43      	ldr	r2, [pc, #268]	; (800243c <UART_SetConfig+0x20c>)
 8002330:	4295      	cmp	r5, r2
 8002332:	d1c0      	bne.n	80022b6 <UART_SetConfig+0x86>
 8002334:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800233e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002342:	d054      	beq.n	80023ee <UART_SetConfig+0x1be>
 8002344:	d9b4      	bls.n	80022b0 <UART_SetConfig+0x80>
 8002346:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800234a:	d056      	beq.n	80023fa <UART_SetConfig+0x1ca>
 800234c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002350:	e7bc      	b.n	80022cc <UART_SetConfig+0x9c>
    switch (clocksource)
 8002352:	2a08      	cmp	r2, #8
 8002354:	d829      	bhi.n	80023aa <UART_SetConfig+0x17a>
 8002356:	a301      	add	r3, pc, #4	; (adr r3, 800235c <UART_SetConfig+0x12c>)
 8002358:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800235c:	08002381 	.word	0x08002381
 8002360:	080023a5 	.word	0x080023a5
 8002364:	080022d5 	.word	0x080022d5
 8002368:	080023ab 	.word	0x080023ab
 800236c:	080023f5 	.word	0x080023f5
 8002370:	080023ab 	.word	0x080023ab
 8002374:	080023ab 	.word	0x080023ab
 8002378:	080023ab 	.word	0x080023ab
 800237c:	08002401 	.word	0x08002401
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002380:	f7ff fc62 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002384:	6861      	ldr	r1, [r4, #4]
 8002386:	084a      	lsrs	r2, r1, #1
 8002388:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800238c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002390:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002392:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002394:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002398:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800239a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800239e:	4313      	orrs	r3, r2
 80023a0:	60cb      	str	r3, [r1, #12]
 80023a2:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023a4:	f7ff fc68 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80023a8:	e7ec      	b.n	8002384 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e7f1      	b.n	8002394 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023b0:	f7ff fc62 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80023ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <UART_SetConfig+0x1f8>)
 80023c0:	b280      	uxth	r0, r0
 80023c2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023c4:	2000      	movs	r0, #0
        break;
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023c8:	6862      	ldr	r2, [r4, #4]
 80023ca:	0853      	lsrs	r3, r2, #1
 80023cc:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80023d0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	60eb      	str	r3, [r5, #12]
 80023dc:	e7f2      	b.n	80023c4 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023de:	f7ff fb3f 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 80023e2:	e017      	b.n	8002414 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80023e4:	6862      	ldr	r2, [r4, #4]
 80023e6:	0853      	lsrs	r3, r2, #1
 80023e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023ec:	e7f2      	b.n	80023d4 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f2:	d1f4      	bne.n	80023de <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023f4:	f7ff fb34 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 80023f8:	e7c4      	b.n	8002384 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fe:	d1f1      	bne.n	80023e4 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002400:	6860      	ldr	r0, [r4, #4]
 8002402:	0843      	lsrs	r3, r0, #1
 8002404:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002408:	e76a      	b.n	80022e0 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800240a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240e:	d0b7      	beq.n	8002380 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002410:	f7ff fc1a 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002414:	6863      	ldr	r3, [r4, #4]
 8002416:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800241a:	fbb0 f0f3 	udiv	r0, r0, r3
 800241e:	b280      	uxth	r0, r0
 8002420:	60e8      	str	r0, [r5, #12]
 8002422:	e7cf      	b.n	80023c4 <UART_SetConfig+0x194>
 8002424:	efff69f3 	.word	0xefff69f3
 8002428:	40013800 	.word	0x40013800
 800242c:	080043ac 	.word	0x080043ac
 8002430:	40004400 	.word	0x40004400
 8002434:	40004800 	.word	0x40004800
 8002438:	40004c00 	.word	0x40004c00
 800243c:	40005000 	.word	0x40005000

08002440 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002440:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002442:	07da      	lsls	r2, r3, #31
{
 8002444:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002446:	d506      	bpl.n	8002456 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002448:	6801      	ldr	r1, [r0, #0]
 800244a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800244c:	684a      	ldr	r2, [r1, #4]
 800244e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002452:	4322      	orrs	r2, r4
 8002454:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002456:	079c      	lsls	r4, r3, #30
 8002458:	d506      	bpl.n	8002468 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800245a:	6801      	ldr	r1, [r0, #0]
 800245c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800245e:	684a      	ldr	r2, [r1, #4]
 8002460:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002464:	4322      	orrs	r2, r4
 8002466:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002468:	0759      	lsls	r1, r3, #29
 800246a:	d506      	bpl.n	800247a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800246c:	6801      	ldr	r1, [r0, #0]
 800246e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002470:	684a      	ldr	r2, [r1, #4]
 8002472:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002476:	4322      	orrs	r2, r4
 8002478:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800247a:	071a      	lsls	r2, r3, #28
 800247c:	d506      	bpl.n	800248c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800247e:	6801      	ldr	r1, [r0, #0]
 8002480:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002482:	684a      	ldr	r2, [r1, #4]
 8002484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002488:	4322      	orrs	r2, r4
 800248a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800248c:	06dc      	lsls	r4, r3, #27
 800248e:	d506      	bpl.n	800249e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002490:	6801      	ldr	r1, [r0, #0]
 8002492:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002494:	688a      	ldr	r2, [r1, #8]
 8002496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800249a:	4322      	orrs	r2, r4
 800249c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800249e:	0699      	lsls	r1, r3, #26
 80024a0:	d506      	bpl.n	80024b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024a2:	6801      	ldr	r1, [r0, #0]
 80024a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024a6:	688a      	ldr	r2, [r1, #8]
 80024a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ac:	4322      	orrs	r2, r4
 80024ae:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024b0:	065a      	lsls	r2, r3, #25
 80024b2:	d50f      	bpl.n	80024d4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024b4:	6801      	ldr	r1, [r0, #0]
 80024b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024b8:	684a      	ldr	r2, [r1, #4]
 80024ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80024be:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024c6:	d105      	bne.n	80024d4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024c8:	684a      	ldr	r2, [r1, #4]
 80024ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80024d0:	4322      	orrs	r2, r4
 80024d2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	d506      	bpl.n	80024e6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024d8:	6802      	ldr	r2, [r0, #0]
 80024da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024dc:	6853      	ldr	r3, [r2, #4]
 80024de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6053      	str	r3, [r2, #4]
 80024e6:	bd10      	pop	{r4, pc}

080024e8 <UART_WaitOnFlagUntilTimeout>:
{
 80024e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ec:	9d06      	ldr	r5, [sp, #24]
 80024ee:	4604      	mov	r4, r0
 80024f0:	460f      	mov	r7, r1
 80024f2:	4616      	mov	r6, r2
 80024f4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f6:	6821      	ldr	r1, [r4, #0]
 80024f8:	69ca      	ldr	r2, [r1, #28]
 80024fa:	ea37 0302 	bics.w	r3, r7, r2
 80024fe:	bf0c      	ite	eq
 8002500:	2201      	moveq	r2, #1
 8002502:	2200      	movne	r2, #0
 8002504:	42b2      	cmp	r2, r6
 8002506:	d002      	beq.n	800250e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
}
 800250a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800250e:	1c6b      	adds	r3, r5, #1
 8002510:	d0f2      	beq.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002512:	b99d      	cbnz	r5, 800253c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800251c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002526:	2320      	movs	r3, #32
 8002528:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800252c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002530:	2300      	movs	r3, #0
 8002532:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002536:	2003      	movs	r0, #3
 8002538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800253c:	f7fe f904 	bl	8000748 <HAL_GetTick>
 8002540:	eba0 0008 	sub.w	r0, r0, r8
 8002544:	4285      	cmp	r5, r0
 8002546:	d2d6      	bcs.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002548:	e7e4      	b.n	8002514 <UART_WaitOnFlagUntilTimeout+0x2c>

0800254a <UART_CheckIdleState>:
{
 800254a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800254c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	2600      	movs	r6, #0
 8002550:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002552:	f7fe f8f9 	bl	8000748 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800255c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800255e:	d417      	bmi.n	8002590 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	075b      	lsls	r3, r3, #29
 8002566:	d50a      	bpl.n	800257e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	462b      	mov	r3, r5
 8002572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002576:	4620      	mov	r0, r4
 8002578:	f7ff ffb6 	bl	80024e8 <UART_WaitOnFlagUntilTimeout>
 800257c:	b9a0      	cbnz	r0, 80025a8 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800257e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002580:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002582:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002586:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800258a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800258e:	e00c      	b.n	80025aa <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4632      	mov	r2, r6
 8002598:	4603      	mov	r3, r0
 800259a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff ffa2 	bl	80024e8 <UART_WaitOnFlagUntilTimeout>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d0db      	beq.n	8002560 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80025a8:	2003      	movs	r0, #3
}
 80025aa:	b002      	add	sp, #8
 80025ac:	bd70      	pop	{r4, r5, r6, pc}

080025ae <HAL_UART_Init>:
{
 80025ae:	b510      	push	{r4, lr}
  if(huart == NULL)
 80025b0:	4604      	mov	r4, r0
 80025b2:	b360      	cbz	r0, 800260e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80025b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80025b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025bc:	b91b      	cbnz	r3, 80025c6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80025be:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80025c2:	f7fd ffeb 	bl	800059c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80025c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025c8:	2324      	movs	r3, #36	; 0x24
 80025ca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80025ce:	6813      	ldr	r3, [r2, #0]
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7ff fe2a 	bl	8002230 <UART_SetConfig>
 80025dc:	2801      	cmp	r0, #1
 80025de:	d016      	beq.n	800260e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e2:	b113      	cbz	r3, 80025ea <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff ff2b 	bl	8002440 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025fa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002602:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002604:	601a      	str	r2, [r3, #0]
}
 8002606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800260a:	f7ff bf9e 	b.w	800254a <UART_CheckIdleState>
}
 800260e:	2001      	movs	r0, #1
 8002610:	bd10      	pop	{r4, pc}

08002612 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002612:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002616:	2b21      	cmp	r3, #33	; 0x21
 8002618:	d127      	bne.n	800266a <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 800261a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800261e:	6802      	ldr	r2, [r0, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	b94b      	cbnz	r3, 8002638 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002624:	6811      	ldr	r1, [r2, #0]
 8002626:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800262a:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800262c:	6811      	ldr	r1, [r2, #0]
 800262e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002632:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002634:	2000      	movs	r0, #0
 8002636:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002638:	6883      	ldr	r3, [r0, #8]
 800263a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002640:	d10e      	bne.n	8002660 <UART_Transmit_IT+0x4e>
 8002642:	6901      	ldr	r1, [r0, #16]
 8002644:	b961      	cbnz	r1, 8002660 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002646:	f833 1b02 	ldrh.w	r1, [r3], #2
 800264a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800264e:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002650:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002652:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002656:	3b01      	subs	r3, #1
 8002658:	b29b      	uxth	r3, r3
 800265a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800265e:	e7e9      	b.n	8002634 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002660:	1c59      	adds	r1, r3, #1
 8002662:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	8513      	strh	r3, [r2, #40]	; 0x28
 8002668:	e7f3      	b.n	8002652 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 800266a:	2002      	movs	r0, #2
  }
}
 800266c:	4770      	bx	lr

0800266e <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800266e:	6801      	ldr	r1, [r0, #0]
{
 8002670:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002672:	680b      	ldr	r3, [r1, #0]
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800267a:	2320      	movs	r3, #32
 800267c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002680:	f7ff fdc8 	bl	8002214 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002684:	2000      	movs	r0, #0
 8002686:	bd08      	pop	{r3, pc}

08002688 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002688:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800268c:	2b22      	cmp	r3, #34	; 0x22
{
 800268e:	b510      	push	{r4, lr}
 8002690:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002692:	d129      	bne.n	80026e8 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002694:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8002698:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a0:	ea02 0201 	and.w	r2, r2, r1
 80026a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80026a6:	d11b      	bne.n	80026e0 <UART_Receive_IT+0x58>
 80026a8:	6901      	ldr	r1, [r0, #16]
 80026aa:	b9c9      	cbnz	r1, 80026e0 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80026ac:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80026b0:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80026b2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80026b6:	3c01      	subs	r4, #1
 80026b8:	b2a4      	uxth	r4, r4
 80026ba:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80026be:	b96c      	cbnz	r4, 80026dc <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026d2:	2320      	movs	r3, #32
 80026d4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80026d8:	f7ff fd9d 	bl	8002216 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80026dc:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80026de:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80026e0:	1c59      	adds	r1, r3, #1
 80026e2:	6541      	str	r1, [r0, #84]	; 0x54
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	e7e4      	b.n	80026b2 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f042 0208 	orr.w	r2, r2, #8
 80026ee:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80026f0:	2002      	movs	r0, #2
 80026f2:	bd10      	pop	{r4, pc}

080026f4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026f4:	6802      	ldr	r2, [r0, #0]
 80026f6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026f8:	6811      	ldr	r1, [r2, #0]
{
 80026fa:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80026fc:	f013 050f 	ands.w	r5, r3, #15
{
 8002700:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002702:	d107      	bne.n	8002714 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002704:	069e      	lsls	r6, r3, #26
 8002706:	d505      	bpl.n	8002714 <HAL_UART_IRQHandler+0x20>
 8002708:	068e      	lsls	r6, r1, #26
 800270a:	d503      	bpl.n	8002714 <HAL_UART_IRQHandler+0x20>
}
 800270c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002710:	f7ff bfba 	b.w	8002688 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002714:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002716:	2d00      	cmp	r5, #0
 8002718:	d05c      	beq.n	80027d4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800271a:	f010 0501 	ands.w	r5, r0, #1
 800271e:	d102      	bne.n	8002726 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002720:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002724:	d056      	beq.n	80027d4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002726:	07d8      	lsls	r0, r3, #31
 8002728:	d507      	bpl.n	800273a <HAL_UART_IRQHandler+0x46>
 800272a:	05ce      	lsls	r6, r1, #23
 800272c:	d505      	bpl.n	800273a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800272e:	2001      	movs	r0, #1
 8002730:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002732:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002734:	f040 0001 	orr.w	r0, r0, #1
 8002738:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273a:	0798      	lsls	r0, r3, #30
 800273c:	d506      	bpl.n	800274c <HAL_UART_IRQHandler+0x58>
 800273e:	b12d      	cbz	r5, 800274c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002740:	2002      	movs	r0, #2
 8002742:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002744:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002746:	f040 0004 	orr.w	r0, r0, #4
 800274a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800274c:	075e      	lsls	r6, r3, #29
 800274e:	d506      	bpl.n	800275e <HAL_UART_IRQHandler+0x6a>
 8002750:	b12d      	cbz	r5, 800275e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002752:	2004      	movs	r0, #4
 8002754:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002756:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002758:	f040 0002 	orr.w	r0, r0, #2
 800275c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800275e:	0718      	lsls	r0, r3, #28
 8002760:	d507      	bpl.n	8002772 <HAL_UART_IRQHandler+0x7e>
 8002762:	068e      	lsls	r6, r1, #26
 8002764:	d400      	bmi.n	8002768 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002766:	b125      	cbz	r5, 8002772 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002768:	2008      	movs	r0, #8
 800276a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800276e:	4302      	orrs	r2, r0
 8002770:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002772:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002774:	2a00      	cmp	r2, #0
 8002776:	d050      	beq.n	800281a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002778:	0698      	lsls	r0, r3, #26
 800277a:	d504      	bpl.n	8002786 <HAL_UART_IRQHandler+0x92>
 800277c:	068a      	lsls	r2, r1, #26
 800277e:	d502      	bpl.n	8002786 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff81 	bl	8002688 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002786:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002788:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800278a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800278c:	d404      	bmi.n	8002798 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002792:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002796:	d019      	beq.n	80027cc <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8002798:	f7ff fd2f 	bl	80021fa <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	0656      	lsls	r6, r2, #25
 80027a2:	d50f      	bpl.n	80027c4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80027a6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ac:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80027ae:	b148      	cbz	r0, 80027c4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_UART_IRQHandler+0x128>)
 80027b2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b4:	f7fe fdd8 	bl	8001368 <HAL_DMA_Abort_IT>
 80027b8:	b378      	cbz	r0, 800281a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80027bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027c2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff fd27 	bl	8002218 <HAL_UART_ErrorCallback>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80027cc:	f7ff fd24 	bl	8002218 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80027d4:	02dd      	lsls	r5, r3, #11
 80027d6:	d50e      	bpl.n	80027f6 <HAL_UART_IRQHandler+0x102>
 80027d8:	0246      	lsls	r6, r0, #9
 80027da:	d50c      	bpl.n	80027f6 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80027dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80027e2:	2320      	movs	r3, #32
 80027e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80027e8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80027ea:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80027ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80027f2:	f000 b815 	b.w	8002820 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f6:	061d      	lsls	r5, r3, #24
 80027f8:	d506      	bpl.n	8002808 <HAL_UART_IRQHandler+0x114>
 80027fa:	0608      	lsls	r0, r1, #24
 80027fc:	d504      	bpl.n	8002808 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80027fe:	4620      	mov	r0, r4
}
 8002800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002804:	f7ff bf05 	b.w	8002612 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002808:	065a      	lsls	r2, r3, #25
 800280a:	d506      	bpl.n	800281a <HAL_UART_IRQHandler+0x126>
 800280c:	064b      	lsls	r3, r1, #25
 800280e:	d504      	bpl.n	800281a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002810:	4620      	mov	r0, r4
}
 8002812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002816:	f7ff bf2a 	b.w	800266e <UART_EndTransmit_IT>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	0800221b 	.word	0x0800221b

08002820 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002820:	4770      	bx	lr

08002822 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002822:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002824:	f000 fbe8 	bl	8002ff8 <vTaskStartScheduler>
  
  return osOK;
}
 8002828:	2000      	movs	r0, #0
 800282a:	bd08      	pop	{r3, pc}

0800282c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800282c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800282e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8002832:	8a02      	ldrh	r2, [r0, #16]
{
 8002834:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002836:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800283a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800283c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800283e:	bf14      	ite	ne
 8002840:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002842:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002844:	a803      	add	r0, sp, #12
 8002846:	9001      	str	r0, [sp, #4]
 8002848:	9400      	str	r4, [sp, #0]
 800284a:	4628      	mov	r0, r5
 800284c:	f000 fb04 	bl	8002e58 <xTaskCreate>
 8002850:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002852:	bf0c      	ite	eq
 8002854:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002856:	2000      	movne	r0, #0
}
 8002858:	b005      	add	sp, #20
 800285a:	bd30      	pop	{r4, r5, pc}

0800285c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800285c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800285e:	2800      	cmp	r0, #0
 8002860:	bf08      	it	eq
 8002862:	2001      	moveq	r0, #1
 8002864:	f000 fd16 	bl	8003294 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002868:	2000      	movs	r0, #0
 800286a:	bd08      	pop	{r3, pc}

0800286c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800286c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800286e:	f000 fda9 	bl	80033c4 <xTaskGetSchedulerState>
 8002872:	2801      	cmp	r0, #1
 8002874:	d003      	beq.n	800287e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800287a:	f000 b90b 	b.w	8002a94 <xPortSysTickHandler>
 800287e:	bd08      	pop	{r3, pc}

08002880 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002880:	f100 0308 	add.w	r3, r0, #8
 8002884:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002886:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800288e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002890:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002892:	6003      	str	r3, [r0, #0]
 8002894:	4770      	bx	lr

08002896 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002896:	2300      	movs	r3, #0
 8002898:	6103      	str	r3, [r0, #16]
 800289a:	4770      	bx	lr

0800289c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800289c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800289e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028a8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80028aa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028ac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80028ae:	3301      	adds	r3, #1
 80028b0:	6003      	str	r3, [r0, #0]
 80028b2:	4770      	bx	lr

080028b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028b6:	1c53      	adds	r3, r2, #1
{
 80028b8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80028ba:	d10a      	bne.n	80028d2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028bc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028c4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80028c6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80028c8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028ca:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80028cc:	3301      	adds	r3, #1
 80028ce:	6003      	str	r3, [r0, #0]
 80028d0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d2:	f100 0308 	add.w	r3, r0, #8
 80028d6:	685c      	ldr	r4, [r3, #4]
 80028d8:	6825      	ldr	r5, [r4, #0]
 80028da:	42aa      	cmp	r2, r5
 80028dc:	d3ef      	bcc.n	80028be <vListInsert+0xa>
 80028de:	4623      	mov	r3, r4
 80028e0:	e7f9      	b.n	80028d6 <vListInsert+0x22>

080028e2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e2:	6841      	ldr	r1, [r0, #4]
 80028e4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028e6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ea:	6882      	ldr	r2, [r0, #8]
 80028ec:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f2:	bf08      	it	eq
 80028f4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028f6:	2200      	movs	r2, #0
 80028f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	3801      	subs	r0, #1
 80028fe:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002900:	4770      	bx	lr
	...

08002904 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <prvTaskExitError+0x2c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	d008      	beq.n	800291e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	e7fe      	b.n	800291c <prvTaskExitError+0x18>
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	e7fe      	b.n	800292e <prvTaskExitError+0x2a>
 8002930:	20000008 	.word	0x20000008

08002934 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002934:	4806      	ldr	r0, [pc, #24]	; (8002950 <prvPortStartFirstTask+0x1c>)
 8002936:	6800      	ldr	r0, [r0, #0]
 8002938:	6800      	ldr	r0, [r0, #0]
 800293a:	f380 8808 	msr	MSP, r0
 800293e:	b662      	cpsie	i
 8002940:	b661      	cpsie	f
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	df00      	svc	0
 800294c:	bf00      	nop
 800294e:	0000      	.short	0x0000
 8002950:	e000ed08 	.word	0xe000ed08

08002954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002964 <vPortEnableVFP+0x10>
 8002958:	6801      	ldr	r1, [r0, #0]
 800295a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800295e:	6001      	str	r1, [r0, #0]
 8002960:	4770      	bx	lr
 8002962:	0000      	.short	0x0000
 8002964:	e000ed88 	.word	0xe000ed88

08002968 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <pxPortInitialiseStack+0x28>)
 8002972:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002976:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800297a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800297e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002982:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002986:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800298a:	3844      	subs	r0, #68	; 0x44
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	08002905 	.word	0x08002905
	...

080029a0 <SVC_Handler>:
	__asm volatile (
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <pxCurrentTCBConst2>)
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6808      	ldr	r0, [r1, #0]
 80029a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029aa:	f380 8809 	msr	PSP, r0
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f380 8811 	msr	BASEPRI, r0
 80029ba:	4770      	bx	lr
 80029bc:	f3af 8000 	nop.w

080029c0 <pxCurrentTCBConst2>:
 80029c0:	20000cac 	.word	0x20000cac

080029c4 <vPortEnterCritical>:
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <vPortEnterCritical+0x3c>)
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80029da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80029dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80029de:	d10d      	bne.n	80029fc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <vPortEnterCritical+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80029e8:	d008      	beq.n	80029fc <vPortEnterCritical+0x38>
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	e7fe      	b.n	80029fa <vPortEnterCritical+0x36>
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000008 	.word	0x20000008
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <vPortExitCritical+0x24>)
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	b943      	cbnz	r3, 8002a20 <vPortExitCritical+0x18>
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	e7fe      	b.n	8002a1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002a20:	3b01      	subs	r3, #1
 8002a22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a24:	b90b      	cbnz	r3, 8002a2a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	4770      	bx	lr
 8002a2c:	20000008 	.word	0x20000008

08002a30 <PendSV_Handler>:
	__asm volatile
 8002a30:	f3ef 8009 	mrs	r0, PSP
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <pxCurrentTCBConst>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f01e 0f10 	tst.w	lr, #16
 8002a40:	bf08      	it	eq
 8002a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4a:	6010      	str	r0, [r2, #0]
 8002a4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a54:	f380 8811 	msr	BASEPRI, r0
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f000 fc76 	bl	8003350 <vTaskSwitchContext>
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f380 8811 	msr	BASEPRI, r0
 8002a6c:	bc08      	pop	{r3}
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	6808      	ldr	r0, [r1, #0]
 8002a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a76:	f01e 0f10 	tst.w	lr, #16
 8002a7a:	bf08      	it	eq
 8002a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a80:	f380 8809 	msr	PSP, r0
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst>:
 8002a90:	20000cac 	.word	0x20000cac

08002a94 <xPortSysTickHandler>:
{
 8002a94:	b508      	push	{r3, lr}
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002aa6:	f000 faeb 	bl	8003080 <xTaskIncrementTick>
 8002aaa:	b118      	cbz	r0, 8002ab4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <xPortSysTickHandler+0x28>)
 8002aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	bd08      	pop	{r3, pc}
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <vPortSetupTimerInterrupt+0x1c>)
 8002ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <vPortSetupTimerInterrupt+0x20>)
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <vPortSetupTimerInterrupt+0x24>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	e000e014 	.word	0xe000e014
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <xPortStartScheduler+0xc8>)
 8002aea:	4a32      	ldr	r2, [pc, #200]	; (8002bb4 <xPortStartScheduler+0xcc>)
{
 8002aec:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	4291      	cmp	r1, r2
 8002af2:	d108      	bne.n	8002b06 <xPortStartScheduler+0x1e>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	e7fe      	b.n	8002b04 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <xPortStartScheduler+0xd0>)
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d108      	bne.n	8002b20 <xPortStartScheduler+0x38>
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	e7fe      	b.n	8002b1e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b20:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <xPortStartScheduler+0xd4>)
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b2c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b3e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <xPortStartScheduler+0xdc>)
 8002b42:	2207      	movs	r2, #7
 8002b44:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b46:	2100      	movs	r1, #0
 8002b48:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002b4c:	0600      	lsls	r0, r0, #24
 8002b4e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002b52:	d423      	bmi.n	8002b9c <xPortStartScheduler+0xb4>
 8002b54:	b101      	cbz	r1, 8002b58 <xPortStartScheduler+0x70>
 8002b56:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b5c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002b60:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <xPortStartScheduler+0xd4>)
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <xPortStartScheduler+0xe0>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002b72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002b7a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002b7c:	f7ff ffa0 	bl	8002ac0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <xPortStartScheduler+0xe4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002b86:	f7ff fee5 	bl	8002954 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b8a:	4a11      	ldr	r2, [pc, #68]	; (8002bd0 <xPortStartScheduler+0xe8>)
 8002b8c:	6813      	ldr	r3, [r2, #0]
 8002b8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b92:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002b94:	f7ff fece 	bl	8002934 <prvPortStartFirstTask>
	prvTaskExitError();
 8002b98:	f7ff feb4 	bl	8002904 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002ba0:	0052      	lsls	r2, r2, #1
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f88d 2003 	strb.w	r2, [sp, #3]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4622      	mov	r2, r4
 8002bac:	e7cc      	b.n	8002b48 <xPortStartScheduler+0x60>
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00
 8002bb4:	410fc271 	.word	0x410fc271
 8002bb8:	410fc270 	.word	0x410fc270
 8002bbc:	e000e400 	.word	0xe000e400
 8002bc0:	2000008c 	.word	0x2000008c
 8002bc4:	20000090 	.word	0x20000090
 8002bc8:	e000ed20 	.word	0xe000ed20
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	e000ef34 	.word	0xe000ef34

08002bd4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002bd4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <prvInsertBlockIntoFreeList+0x40>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4282      	cmp	r2, r0
 8002bdc:	d318      	bcc.n	8002c10 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002bde:	685c      	ldr	r4, [r3, #4]
 8002be0:	1919      	adds	r1, r3, r4
 8002be2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002be4:	bf01      	itttt	eq
 8002be6:	6841      	ldreq	r1, [r0, #4]
 8002be8:	4618      	moveq	r0, r3
 8002bea:	1909      	addeq	r1, r1, r4
 8002bec:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002bee:	6844      	ldr	r4, [r0, #4]
 8002bf0:	1901      	adds	r1, r0, r4
 8002bf2:	428a      	cmp	r2, r1
 8002bf4:	d107      	bne.n	8002c06 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <prvInsertBlockIntoFreeList+0x44>)
 8002bf8:	6809      	ldr	r1, [r1, #0]
 8002bfa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002bfc:	bf1f      	itttt	ne
 8002bfe:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c00:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c02:	1909      	addne	r1, r1, r4
 8002c04:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c06:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c08:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c0a:	bf18      	it	ne
 8002c0c:	6018      	strne	r0, [r3, #0]
 8002c0e:	bd10      	pop	{r4, pc}
 8002c10:	4613      	mov	r3, r2
 8002c12:	e7e1      	b.n	8002bd8 <prvInsertBlockIntoFreeList+0x4>
 8002c14:	20000ca4 	.word	0x20000ca4
 8002c18:	20000094 	.word	0x20000094

08002c1c <pvPortMalloc>:
{
 8002c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c20:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002c22:	f000 fa25 	bl	8003070 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002c26:	493e      	ldr	r1, [pc, #248]	; (8002d20 <pvPortMalloc+0x104>)
 8002c28:	4d3e      	ldr	r5, [pc, #248]	; (8002d24 <pvPortMalloc+0x108>)
 8002c2a:	680b      	ldr	r3, [r1, #0]
 8002c2c:	bb0b      	cbnz	r3, 8002c72 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002c2e:	4a3e      	ldr	r2, [pc, #248]	; (8002d28 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c30:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c32:	bf1f      	itttt	ne
 8002c34:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c36:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c3a:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 8002c3e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c40:	bf14      	ite	ne
 8002c42:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c44:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c48:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002c4a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c4c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c50:	4e36      	ldr	r6, [pc, #216]	; (8002d2c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002c52:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c54:	2000      	movs	r0, #0
 8002c56:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c58:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002c5a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c5c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c5e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c60:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c64:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c66:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <pvPortMalloc+0x118>)
 8002c6a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c70:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c72:	682f      	ldr	r7, [r5, #0]
 8002c74:	4227      	tst	r7, r4
 8002c76:	d116      	bne.n	8002ca6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002c78:	2c00      	cmp	r4, #0
 8002c7a:	d041      	beq.n	8002d00 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002c7c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c80:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c82:	bf1c      	itt	ne
 8002c84:	f023 0307 	bicne.w	r3, r3, #7
 8002c88:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c8a:	b163      	cbz	r3, 8002ca6 <pvPortMalloc+0x8a>
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <pvPortMalloc+0x118>)
 8002c8e:	6816      	ldr	r6, [r2, #0]
 8002c90:	42b3      	cmp	r3, r6
 8002c92:	4690      	mov	r8, r2
 8002c94:	d807      	bhi.n	8002ca6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002c96:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <pvPortMalloc+0x110>)
 8002c98:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c9a:	6868      	ldr	r0, [r5, #4]
 8002c9c:	4283      	cmp	r3, r0
 8002c9e:	d804      	bhi.n	8002caa <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002ca0:	6809      	ldr	r1, [r1, #0]
 8002ca2:	428d      	cmp	r5, r1
 8002ca4:	d107      	bne.n	8002cb6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	e02a      	b.n	8002d00 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002caa:	682c      	ldr	r4, [r5, #0]
 8002cac:	2c00      	cmp	r4, #0
 8002cae:	d0f7      	beq.n	8002ca0 <pvPortMalloc+0x84>
 8002cb0:	462a      	mov	r2, r5
 8002cb2:	4625      	mov	r5, r4
 8002cb4:	e7f1      	b.n	8002c9a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cb6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cb8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cba:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002cbc:	1ac2      	subs	r2, r0, r3
 8002cbe:	2a10      	cmp	r2, #16
 8002cc0:	d90f      	bls.n	8002ce2 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002cc2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cc4:	0741      	lsls	r1, r0, #29
 8002cc6:	d008      	beq.n	8002cda <pvPortMalloc+0xbe>
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	e7fe      	b.n	8002cd8 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002cda:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002cdc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002cde:	f7ff ff79 	bl	8002bd4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ce2:	4913      	ldr	r1, [pc, #76]	; (8002d30 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ce4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ce6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ce8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cea:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cec:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002cee:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cf2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002cf6:	bf38      	it	cc
 8002cf8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cfa:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cfc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002cfe:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002d00:	f000 fa50 	bl	80031a4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d04:	0763      	lsls	r3, r4, #29
 8002d06:	d008      	beq.n	8002d1a <pvPortMalloc+0xfe>
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	e7fe      	b.n	8002d18 <pvPortMalloc+0xfc>
}
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d20:	20000094 	.word	0x20000094
 8002d24:	20000c98 	.word	0x20000c98
 8002d28:	20000098 	.word	0x20000098
 8002d2c:	20000ca4 	.word	0x20000ca4
 8002d30:	20000ca0 	.word	0x20000ca0
 8002d34:	20000c9c 	.word	0x20000c9c

08002d38 <vPortFree>:
{
 8002d38:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	b370      	cbz	r0, 8002d9c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <vPortFree+0x68>)
 8002d40:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4213      	tst	r3, r2
 8002d48:	d108      	bne.n	8002d5c <vPortFree+0x24>
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	e7fe      	b.n	8002d5a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d5c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002d60:	b141      	cbz	r1, 8002d74 <vPortFree+0x3c>
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	e7fe      	b.n	8002d72 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d74:	ea23 0302 	bic.w	r3, r3, r2
 8002d78:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002d7c:	f000 f978 	bl	8003070 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d80:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <vPortFree+0x6c>)
 8002d82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002d86:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d88:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d8c:	440b      	add	r3, r1
 8002d8e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d90:	f7ff ff20 	bl	8002bd4 <prvInsertBlockIntoFreeList>
}
 8002d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002d98:	f000 ba04 	b.w	80031a4 <xTaskResumeAll>
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000c98 	.word	0x20000c98
 8002da4:	20000c9c 	.word	0x20000c9c

08002da8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <prvResetNextTaskUnblockTime+0x1c>)
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <prvResetNextTaskUnblockTime+0x20>)
 8002db0:	b919      	cbnz	r1, 8002dba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002db2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002dbe:	68d2      	ldr	r2, [r2, #12]
 8002dc0:	6852      	ldr	r2, [r2, #4]
 8002dc2:	e7f8      	b.n	8002db6 <prvResetNextTaskUnblockTime+0xe>
 8002dc4:	20000cb0 	.word	0x20000cb0
 8002dc8:	20000d88 	.word	0x20000d88

08002dcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dd0:	4e1b      	ldr	r6, [pc, #108]	; (8002e40 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002dd2:	681d      	ldr	r5, [r3, #0]
{
 8002dd4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dd6:	6830      	ldr	r0, [r6, #0]
 8002dd8:	3004      	adds	r0, #4
{
 8002dda:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ddc:	f7ff fd81 	bl	80028e2 <uxListRemove>
 8002de0:	4633      	mov	r3, r6
 8002de2:	b940      	cbnz	r0, 8002df6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002de4:	6831      	ldr	r1, [r6, #0]
 8002de6:	4e17      	ldr	r6, [pc, #92]	; (8002e44 <prvAddCurrentTaskToDelayedList+0x78>)
 8002de8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002dea:	6832      	ldr	r2, [r6, #0]
 8002dec:	2001      	movs	r0, #1
 8002dee:	4088      	lsls	r0, r1
 8002df0:	ea22 0200 	bic.w	r2, r2, r0
 8002df4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002df6:	1c62      	adds	r2, r4, #1
 8002df8:	d107      	bne.n	8002e0a <prvAddCurrentTaskToDelayedList+0x3e>
 8002dfa:	b137      	cbz	r7, 8002e0a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	4812      	ldr	r0, [pc, #72]	; (8002e48 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002e00:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e06:	f7ff bd49 	b.w	800289c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e0a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e0c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002e0e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e10:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002e12:	d907      	bls.n	8002e24 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <prvAddCurrentTaskToDelayedList+0x80>)
 8002e16:	6810      	ldr	r0, [r2, #0]
 8002e18:	6819      	ldr	r1, [r3, #0]
}
 8002e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e1e:	3104      	adds	r1, #4
 8002e20:	f7ff bd48 	b.w	80028b4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <prvAddCurrentTaskToDelayedList+0x84>)
 8002e26:	6810      	ldr	r0, [r2, #0]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	3104      	adds	r1, #4
 8002e2c:	f7ff fd42 	bl	80028b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <prvAddCurrentTaskToDelayedList+0x88>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002e36:	bf38      	it	cc
 8002e38:	601c      	strcc	r4, [r3, #0]
 8002e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3c:	20000dd0 	.word	0x20000dd0
 8002e40:	20000cac 	.word	0x20000cac
 8002e44:	20000d58 	.word	0x20000d58
 8002e48:	20000da8 	.word	0x20000da8
 8002e4c:	20000cb4 	.word	0x20000cb4
 8002e50:	20000cb0 	.word	0x20000cb0
 8002e54:	20000d88 	.word	0x20000d88

08002e58 <xTaskCreate>:
	{
 8002e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e5c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002e60:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e62:	4650      	mov	r0, sl
	{
 8002e64:	460f      	mov	r7, r1
 8002e66:	4699      	mov	r9, r3
 8002e68:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6a:	f7ff fed7 	bl	8002c1c <pvPortMalloc>
			if( pxStack != NULL )
 8002e6e:	4605      	mov	r5, r0
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f000 8096 	beq.w	8002fa2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e76:	2054      	movs	r0, #84	; 0x54
 8002e78:	f7ff fed0 	bl	8002c1c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	f000 808c 	beq.w	8002f9c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e84:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002e88:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e8a:	4455      	add	r5, sl
 8002e8c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e8e:	f025 0a07 	bic.w	sl, r5, #7
 8002e92:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002e96:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e98:	7859      	ldrb	r1, [r3, #1]
 8002e9a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002e9e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002ea2:	b109      	cbz	r1, 8002ea8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ea4:	42bb      	cmp	r3, r7
 8002ea6:	d1f7      	bne.n	8002e98 <xTaskCreate+0x40>
 8002ea8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002eaa:	2d06      	cmp	r5, #6
 8002eac:	bf28      	it	cs
 8002eae:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eb0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eb4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002eb6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002eb8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eba:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ebc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002ec0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ec4:	f7ff fce7 	bl	8002896 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ecc:	f104 0018 	add.w	r0, r4, #24
 8002ed0:	f7ff fce1 	bl	8002896 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ed4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eda:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002edc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ede:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ee2:	464a      	mov	r2, r9
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	4650      	mov	r0, sl
 8002ee8:	f7ff fd3e 	bl	8002968 <pxPortInitialiseStack>
 8002eec:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002eee:	b106      	cbz	r6, 8002ef2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ef0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002ef2:	f7ff fd67 	bl	80029c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002ef8:	4e32      	ldr	r6, [pc, #200]	; (8002fc4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002ff0 <xTaskCreate+0x198>
 8002f00:	3201      	adds	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002f04:	6835      	ldr	r5, [r6, #0]
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	d14e      	bne.n	8002fa8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002f0a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d11d      	bne.n	8002f4e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f12:	eb08 0005 	add.w	r0, r8, r5
 8002f16:	3514      	adds	r5, #20
 8002f18:	f7ff fcb2 	bl	8002880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f1c:	2d8c      	cmp	r5, #140	; 0x8c
 8002f1e:	d1f8      	bne.n	8002f12 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002f20:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002ff4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002f24:	4d28      	ldr	r5, [pc, #160]	; (8002fc8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002f26:	4648      	mov	r0, r9
 8002f28:	f7ff fcaa 	bl	8002880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f7ff fca7 	bl	8002880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f32:	4826      	ldr	r0, [pc, #152]	; (8002fcc <xTaskCreate+0x174>)
 8002f34:	f7ff fca4 	bl	8002880 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002f38:	4825      	ldr	r0, [pc, #148]	; (8002fd0 <xTaskCreate+0x178>)
 8002f3a:	f7ff fca1 	bl	8002880 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002f3e:	4825      	ldr	r0, [pc, #148]	; (8002fd4 <xTaskCreate+0x17c>)
 8002f40:	f7ff fc9e 	bl	8002880 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f44:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <xTaskCreate+0x180>)
 8002f46:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <xTaskCreate+0x184>)
 8002f4c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002f4e:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002f50:	4924      	ldr	r1, [pc, #144]	; (8002fe4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002f52:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f54:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002f56:	3301      	adds	r3, #1
 8002f58:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f5c:	2501      	movs	r5, #1
 8002f5e:	fa05 f302 	lsl.w	r3, r5, r2
 8002f62:	4303      	orrs	r3, r0
 8002f64:	2014      	movs	r0, #20
 8002f66:	600b      	str	r3, [r1, #0]
 8002f68:	fb00 8002 	mla	r0, r0, r2, r8
 8002f6c:	4639      	mov	r1, r7
 8002f6e:	f7ff fc95 	bl	800289c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002f72:	f7ff fd49 	bl	8002a08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <xTaskCreate+0x190>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b163      	cbz	r3, 8002f96 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f7c:	6833      	ldr	r3, [r6, #0]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d207      	bcs.n	8002f96 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <xTaskCreate+0x194>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
	}
 8002f96:	4628      	mov	r0, r5
 8002f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f7ff fecb 	bl	8002d38 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fa2:	f04f 35ff 	mov.w	r5, #4294967295
 8002fa6:	e7f6      	b.n	8002f96 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <xTaskCreate+0x190>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ce      	bne.n	8002f4e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fb0:	6833      	ldr	r3, [r6, #0]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fb6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002fb8:	bf98      	it	ls
 8002fba:	6034      	strls	r4, [r6, #0]
 8002fbc:	e7c7      	b.n	8002f4e <xTaskCreate+0xf6>
 8002fbe:	bf00      	nop
 8002fc0:	20000d44 	.word	0x20000d44
 8002fc4:	20000cac 	.word	0x20000cac
 8002fc8:	20000d70 	.word	0x20000d70
 8002fcc:	20000d90 	.word	0x20000d90
 8002fd0:	20000dbc 	.word	0x20000dbc
 8002fd4:	20000da8 	.word	0x20000da8
 8002fd8:	20000cb0 	.word	0x20000cb0
 8002fdc:	20000cb4 	.word	0x20000cb4
 8002fe0:	20000d54 	.word	0x20000d54
 8002fe4:	20000d58 	.word	0x20000d58
 8002fe8:	20000da4 	.word	0x20000da4
 8002fec:	e000ed04 	.word	0xe000ed04
 8002ff0:	20000cb8 	.word	0x20000cb8
 8002ff4:	20000d5c 	.word	0x20000d5c

08002ff8 <vTaskStartScheduler>:
{
 8002ff8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <vTaskStartScheduler+0x60>)
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	2400      	movs	r4, #0
 8003000:	9400      	str	r4, [sp, #0]
 8003002:	4623      	mov	r3, r4
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	4915      	ldr	r1, [pc, #84]	; (800305c <vTaskStartScheduler+0x64>)
 8003008:	4815      	ldr	r0, [pc, #84]	; (8003060 <vTaskStartScheduler+0x68>)
 800300a:	f7ff ff25 	bl	8002e58 <xTaskCreate>
	if( xReturn == pdPASS )
 800300e:	2801      	cmp	r0, #1
 8003010:	d114      	bne.n	800303c <vTaskStartScheduler+0x44>
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <vTaskStartScheduler+0x6c>)
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <vTaskStartScheduler+0x70>)
 800302c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <vTaskStartScheduler+0x74>)
 8003030:	601c      	str	r4, [r3, #0]
}
 8003032:	b002      	add	sp, #8
 8003034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003038:	f7ff bd56 	b.w	8002ae8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800303c:	3001      	adds	r0, #1
 800303e:	d108      	bne.n	8003052 <vTaskStartScheduler+0x5a>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	e7fe      	b.n	8003050 <vTaskStartScheduler+0x58>
}
 8003052:	b002      	add	sp, #8
 8003054:	bd10      	pop	{r4, pc}
 8003056:	bf00      	nop
 8003058:	20000d84 	.word	0x20000d84
 800305c:	080043b0 	.word	0x080043b0
 8003060:	080032dd 	.word	0x080032dd
 8003064:	20000d88 	.word	0x20000d88
 8003068:	20000da4 	.word	0x20000da4
 800306c:	20000dd0 	.word	0x20000dd0

08003070 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003070:	4a02      	ldr	r2, [pc, #8]	; (800307c <vTaskSuspendAll+0xc>)
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000d50 	.word	0x20000d50

08003080 <xTaskIncrementTick>:
{
 8003080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003084:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <xTaskIncrementTick+0xf8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d153      	bne.n	8003134 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800308c:	4b3b      	ldr	r3, [pc, #236]	; (800317c <xTaskIncrementTick+0xfc>)
 800308e:	681c      	ldr	r4, [r3, #0]
 8003090:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003092:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003094:	b9bc      	cbnz	r4, 80030c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <xTaskIncrementTick+0x100>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	b142      	cbz	r2, 80030b0 <xTaskIncrementTick+0x30>
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	e7fe      	b.n	80030ae <xTaskIncrementTick+0x2e>
 80030b0:	4a34      	ldr	r2, [pc, #208]	; (8003184 <xTaskIncrementTick+0x104>)
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6810      	ldr	r0, [r2, #0]
 80030b6:	6018      	str	r0, [r3, #0]
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	4a33      	ldr	r2, [pc, #204]	; (8003188 <xTaskIncrementTick+0x108>)
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	f7ff fe71 	bl	8002da8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030c6:	4d31      	ldr	r5, [pc, #196]	; (800318c <xTaskIncrementTick+0x10c>)
 80030c8:	4f31      	ldr	r7, [pc, #196]	; (8003190 <xTaskIncrementTick+0x110>)
 80030ca:	682b      	ldr	r3, [r5, #0]
 80030cc:	429c      	cmp	r4, r3
 80030ce:	f04f 0b00 	mov.w	fp, #0
 80030d2:	d33e      	bcc.n	8003152 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003180 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80030d8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80031a0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030dc:	f8d8 2000 	ldr.w	r2, [r8]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	bb72      	cbnz	r2, 8003142 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	602a      	str	r2, [r5, #0]
					break;
 80030ea:	e032      	b.n	8003152 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ec:	f106 0a04 	add.w	sl, r6, #4
 80030f0:	4650      	mov	r0, sl
 80030f2:	f7ff fbf6 	bl	80028e2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80030f8:	b119      	cbz	r1, 8003102 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030fa:	f106 0018 	add.w	r0, r6, #24
 80030fe:	f7ff fbf0 	bl	80028e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003102:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003104:	f8d9 3000 	ldr.w	r3, [r9]
 8003108:	2201      	movs	r2, #1
 800310a:	fa02 f100 	lsl.w	r1, r2, r0
 800310e:	4319      	orrs	r1, r3
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <xTaskIncrementTick+0x114>)
 8003112:	f8c9 1000 	str.w	r1, [r9]
 8003116:	f04f 0e14 	mov.w	lr, #20
 800311a:	4651      	mov	r1, sl
 800311c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003120:	f7ff fbbc 	bl	800289c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003128:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800312a:	4291      	cmp	r1, r2
 800312c:	bf28      	it	cs
 800312e:	f04f 0b01 	movcs.w	fp, #1
 8003132:	e7d3      	b.n	80030dc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <xTaskIncrementTick+0x118>)
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800313c:	f04f 0b00 	mov.w	fp, #0
 8003140:	e011      	b.n	8003166 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003142:	f8d8 2000 	ldr.w	r2, [r8]
 8003146:	68d2      	ldr	r2, [r2, #12]
 8003148:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800314a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800314c:	428c      	cmp	r4, r1
 800314e:	d2cd      	bcs.n	80030ec <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003150:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <xTaskIncrementTick+0x114>)
 8003156:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003158:	2214      	movs	r2, #20
 800315a:	434a      	muls	r2, r1
 800315c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800315e:	2a02      	cmp	r2, #2
 8003160:	bf28      	it	cs
 8003162:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003166:	4a0d      	ldr	r2, [pc, #52]	; (800319c <xTaskIncrementTick+0x11c>)
 8003168:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800316a:	2a00      	cmp	r2, #0
 800316c:	bf18      	it	ne
 800316e:	f04f 0b01 	movne.w	fp, #1
}
 8003172:	4658      	mov	r0, fp
 8003174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003178:	20000d50 	.word	0x20000d50
 800317c:	20000dd0 	.word	0x20000dd0
 8003180:	20000cb0 	.word	0x20000cb0
 8003184:	20000cb4 	.word	0x20000cb4
 8003188:	20000d8c 	.word	0x20000d8c
 800318c:	20000d88 	.word	0x20000d88
 8003190:	20000cac 	.word	0x20000cac
 8003194:	20000cb8 	.word	0x20000cb8
 8003198:	20000d4c 	.word	0x20000d4c
 800319c:	20000dd4 	.word	0x20000dd4
 80031a0:	20000d58 	.word	0x20000d58

080031a4 <xTaskResumeAll>:
{
 80031a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80031a8:	4c31      	ldr	r4, [pc, #196]	; (8003270 <xTaskResumeAll+0xcc>)
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	b943      	cbnz	r3, 80031c0 <xTaskResumeAll+0x1c>
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	e7fe      	b.n	80031be <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80031c0:	f7ff fc00 	bl	80029c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ca:	6824      	ldr	r4, [r4, #0]
 80031cc:	b12c      	cbz	r4, 80031da <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80031ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031d0:	f7ff fc1a 	bl	8002a08 <vPortExitCritical>
}
 80031d4:	4620      	mov	r0, r4
 80031d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <xTaskResumeAll+0xd0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f5      	beq.n	80031ce <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031e2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800328c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80031e6:	4f24      	ldr	r7, [pc, #144]	; (8003278 <xTaskResumeAll+0xd4>)
 80031e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003290 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ec:	f8d9 3000 	ldr.w	r3, [r9]
 80031f0:	b9e3      	cbnz	r3, 800322c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80031f2:	b10c      	cbz	r4, 80031f8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80031f4:	f7ff fdd8 	bl	8002da8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031f8:	4d20      	ldr	r5, [pc, #128]	; (800327c <xTaskResumeAll+0xd8>)
 80031fa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031fc:	b144      	cbz	r4, 8003210 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80031fe:	4e20      	ldr	r6, [pc, #128]	; (8003280 <xTaskResumeAll+0xdc>)
 8003200:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003202:	f7ff ff3d 	bl	8003080 <xTaskIncrementTick>
 8003206:	b100      	cbz	r0, 800320a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003208:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800320a:	3c01      	subs	r4, #1
 800320c:	d1f9      	bne.n	8003202 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800320e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <xTaskResumeAll+0xdc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0da      	beq.n	80031ce <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <xTaskResumeAll+0xe0>)
 800321a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003228:	2401      	movs	r4, #1
 800322a:	e7d1      	b.n	80031d0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800322c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003230:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003232:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003234:	f104 0018 	add.w	r0, r4, #24
 8003238:	f7ff fb53 	bl	80028e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800323c:	4630      	mov	r0, r6
 800323e:	f7ff fb50 	bl	80028e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003242:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	2501      	movs	r5, #1
 8003248:	fa05 f302 	lsl.w	r3, r5, r2
 800324c:	2014      	movs	r0, #20
 800324e:	430b      	orrs	r3, r1
 8003250:	fb00 8002 	mla	r0, r0, r2, r8
 8003254:	4631      	mov	r1, r6
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	f7ff fb20 	bl	800289c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <xTaskResumeAll+0xe4>)
 800325e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003266:	bf24      	itt	cs
 8003268:	4b05      	ldrcs	r3, [pc, #20]	; (8003280 <xTaskResumeAll+0xdc>)
 800326a:	601d      	strcs	r5, [r3, #0]
 800326c:	e7be      	b.n	80031ec <xTaskResumeAll+0x48>
 800326e:	bf00      	nop
 8003270:	20000d50 	.word	0x20000d50
 8003274:	20000d44 	.word	0x20000d44
 8003278:	20000d58 	.word	0x20000d58
 800327c:	20000d4c 	.word	0x20000d4c
 8003280:	20000dd4 	.word	0x20000dd4
 8003284:	e000ed04 	.word	0xe000ed04
 8003288:	20000cac 	.word	0x20000cac
 800328c:	20000d90 	.word	0x20000d90
 8003290:	20000cb8 	.word	0x20000cb8

08003294 <vTaskDelay>:
	{
 8003294:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003296:	b940      	cbnz	r0, 80032aa <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <vTaskDelay+0x40>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <vTaskDelay+0x44>)
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	b141      	cbz	r1, 80032c2 <vTaskDelay+0x2e>
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	e7fe      	b.n	80032c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80032c2:	f7ff fed5 	bl	8003070 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032c6:	f7ff fd81 	bl	8002dcc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80032ca:	f7ff ff6b 	bl	80031a4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d0e2      	beq.n	8003298 <vTaskDelay+0x4>
 80032d2:	bd08      	pop	{r3, pc}
 80032d4:	e000ed04 	.word	0xe000ed04
 80032d8:	20000d50 	.word	0x20000d50

080032dc <prvIdleTask>:
{
 80032dc:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80032de:	4e17      	ldr	r6, [pc, #92]	; (800333c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032e0:	4c17      	ldr	r4, [pc, #92]	; (8003340 <prvIdleTask+0x64>)
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	b963      	cbnz	r3, 8003300 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <prvIdleTask+0x68>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d9f8      	bls.n	80032e0 <prvIdleTask+0x4>
				taskYIELD();
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <prvIdleTask+0x6c>)
 80032f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	e7ef      	b.n	80032e0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003300:	f7ff feb6 	bl	8003070 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003304:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003306:	f7ff ff4d 	bl	80031a4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800330a:	2d00      	cmp	r5, #0
 800330c:	d0e9      	beq.n	80032e2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800330e:	f7ff fb59 	bl	80029c4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003312:	68f3      	ldr	r3, [r6, #12]
 8003314:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003316:	1d28      	adds	r0, r5, #4
 8003318:	f7ff fae3 	bl	80028e2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <prvIdleTask+0x70>)
 800331e:	6813      	ldr	r3, [r2, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	3b01      	subs	r3, #1
 8003328:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800332a:	f7ff fb6d 	bl	8002a08 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800332e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003330:	f7ff fd02 	bl	8002d38 <vPortFree>
			vPortFree( pxTCB );
 8003334:	4628      	mov	r0, r5
 8003336:	f7ff fcff 	bl	8002d38 <vPortFree>
 800333a:	e7d2      	b.n	80032e2 <prvIdleTask+0x6>
 800333c:	20000dbc 	.word	0x20000dbc
 8003340:	20000d48 	.word	0x20000d48
 8003344:	20000cb8 	.word	0x20000cb8
 8003348:	e000ed04 	.word	0xe000ed04
 800334c:	20000d44 	.word	0x20000d44

08003350 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <vTaskSwitchContext+0x60>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <vTaskSwitchContext+0x64>)
{
 8003356:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003358:	b112      	cbz	r2, 8003360 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800335a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003360:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <vTaskSwitchContext+0x68>)
 8003364:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f1c3 031f 	rsb	r3, r3, #31
 8003370:	2214      	movs	r2, #20
 8003372:	4912      	ldr	r1, [pc, #72]	; (80033bc <vTaskSwitchContext+0x6c>)
 8003374:	435a      	muls	r2, r3
 8003376:	1888      	adds	r0, r1, r2
 8003378:	588c      	ldr	r4, [r1, r2]
 800337a:	b944      	cbnz	r4, 800338e <vTaskSwitchContext+0x3e>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	e7fe      	b.n	800338c <vTaskSwitchContext+0x3c>
 800338e:	6844      	ldr	r4, [r0, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	6864      	ldr	r4, [r4, #4]
 8003394:	6044      	str	r4, [r0, #4]
 8003396:	440a      	add	r2, r1
 8003398:	4294      	cmp	r4, r2
 800339a:	bf04      	itt	eq
 800339c:	6862      	ldreq	r2, [r4, #4]
 800339e:	6042      	streq	r2, [r0, #4]
 80033a0:	2214      	movs	r2, #20
 80033a2:	fb02 1303 	mla	r3, r2, r3, r1
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <vTaskSwitchContext+0x70>)
 80033ac:	e7d6      	b.n	800335c <vTaskSwitchContext+0xc>
 80033ae:	bf00      	nop
 80033b0:	20000d50 	.word	0x20000d50
 80033b4:	20000dd4 	.word	0x20000dd4
 80033b8:	20000d58 	.word	0x20000d58
 80033bc:	20000cb8 	.word	0x20000cb8
 80033c0:	20000cac 	.word	0x20000cac

080033c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <xTaskGetSchedulerState+0x18>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	b133      	cbz	r3, 80033d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <xTaskGetSchedulerState+0x1c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80033d0:	bf0c      	ite	eq
 80033d2:	2002      	moveq	r0, #2
 80033d4:	2000      	movne	r0, #0
 80033d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80033d8:	2001      	movs	r0, #1
	}
 80033da:	4770      	bx	lr
 80033dc:	20000da4 	.word	0x20000da4
 80033e0:	20000d50 	.word	0x20000d50

080033e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800341c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80033e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80033ea:	e003      	b.n	80033f4 <LoopCopyDataInit>

080033ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80033ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80033f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80033f2:	3104      	adds	r1, #4

080033f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80033f4:	480b      	ldr	r0, [pc, #44]	; (8003424 <LoopForever+0xa>)
	ldr	r3, =_edata
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <LoopForever+0xe>)
	adds	r2, r0, r1
 80033f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80033fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80033fc:	d3f6      	bcc.n	80033ec <CopyDataInit>
	ldr	r2, =_sbss
 80033fe:	4a0b      	ldr	r2, [pc, #44]	; (800342c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003400:	e002      	b.n	8003408 <LoopFillZerobss>

08003402 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003402:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003404:	f842 3b04 	str.w	r3, [r2], #4

08003408 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <LoopForever+0x16>)
	cmp	r2, r3
 800340a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800340c:	d3f9      	bcc.n	8003402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800340e:	f7fd f949 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003412:	f000 f811 	bl	8003438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003416:	f7fc ff8f 	bl	8000338 <main>

0800341a <LoopForever>:

LoopForever:
    b LoopForever
 800341a:	e7fe      	b.n	800341a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800341c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003420:	08004458 	.word	0x08004458
	ldr	r0, =_sdata
 8003424:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003428:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800342c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003430:	20000efc 	.word	0x20000efc

08003434 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003434:	e7fe      	b.n	8003434 <ADC3_IRQHandler>
	...

08003438 <__libc_init_array>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	4e0d      	ldr	r6, [pc, #52]	; (8003470 <__libc_init_array+0x38>)
 800343c:	4c0d      	ldr	r4, [pc, #52]	; (8003474 <__libc_init_array+0x3c>)
 800343e:	1ba4      	subs	r4, r4, r6
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	2500      	movs	r5, #0
 8003444:	42a5      	cmp	r5, r4
 8003446:	d109      	bne.n	800345c <__libc_init_array+0x24>
 8003448:	4e0b      	ldr	r6, [pc, #44]	; (8003478 <__libc_init_array+0x40>)
 800344a:	4c0c      	ldr	r4, [pc, #48]	; (800347c <__libc_init_array+0x44>)
 800344c:	f000 ff56 	bl	80042fc <_init>
 8003450:	1ba4      	subs	r4, r4, r6
 8003452:	10a4      	asrs	r4, r4, #2
 8003454:	2500      	movs	r5, #0
 8003456:	42a5      	cmp	r5, r4
 8003458:	d105      	bne.n	8003466 <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003460:	4798      	blx	r3
 8003462:	3501      	adds	r5, #1
 8003464:	e7ee      	b.n	8003444 <__libc_init_array+0xc>
 8003466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800346a:	4798      	blx	r3
 800346c:	3501      	adds	r5, #1
 800346e:	e7f2      	b.n	8003456 <__libc_init_array+0x1e>
 8003470:	08004450 	.word	0x08004450
 8003474:	08004450 	.word	0x08004450
 8003478:	08004450 	.word	0x08004450
 800347c:	08004454 	.word	0x08004454

08003480 <iprintf>:
 8003480:	b40f      	push	{r0, r1, r2, r3}
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <iprintf+0x2c>)
 8003484:	b513      	push	{r0, r1, r4, lr}
 8003486:	681c      	ldr	r4, [r3, #0]
 8003488:	b124      	cbz	r4, 8003494 <iprintf+0x14>
 800348a:	69a3      	ldr	r3, [r4, #24]
 800348c:	b913      	cbnz	r3, 8003494 <iprintf+0x14>
 800348e:	4620      	mov	r0, r4
 8003490:	f000 f84e 	bl	8003530 <__sinit>
 8003494:	ab05      	add	r3, sp, #20
 8003496:	9a04      	ldr	r2, [sp, #16]
 8003498:	68a1      	ldr	r1, [r4, #8]
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	4620      	mov	r0, r4
 800349e:	f000 f961 	bl	8003764 <_vfiprintf_r>
 80034a2:	b002      	add	sp, #8
 80034a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a8:	b004      	add	sp, #16
 80034aa:	4770      	bx	lr
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <_cleanup_r>:
 80034b0:	4901      	ldr	r1, [pc, #4]	; (80034b8 <_cleanup_r+0x8>)
 80034b2:	f000 b8a9 	b.w	8003608 <_fwalk_reent>
 80034b6:	bf00      	nop
 80034b8:	08004039 	.word	0x08004039

080034bc <std.isra.0>:
 80034bc:	2300      	movs	r3, #0
 80034be:	b510      	push	{r4, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	6003      	str	r3, [r0, #0]
 80034c4:	6043      	str	r3, [r0, #4]
 80034c6:	6083      	str	r3, [r0, #8]
 80034c8:	8181      	strh	r1, [r0, #12]
 80034ca:	6643      	str	r3, [r0, #100]	; 0x64
 80034cc:	81c2      	strh	r2, [r0, #14]
 80034ce:	6103      	str	r3, [r0, #16]
 80034d0:	6143      	str	r3, [r0, #20]
 80034d2:	6183      	str	r3, [r0, #24]
 80034d4:	4619      	mov	r1, r3
 80034d6:	2208      	movs	r2, #8
 80034d8:	305c      	adds	r0, #92	; 0x5c
 80034da:	f000 f8b3 	bl	8003644 <memset>
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <std.isra.0+0x38>)
 80034e0:	6263      	str	r3, [r4, #36]	; 0x24
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <std.isra.0+0x3c>)
 80034e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <std.isra.0+0x40>)
 80034e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <std.isra.0+0x44>)
 80034ec:	6224      	str	r4, [r4, #32]
 80034ee:	6323      	str	r3, [r4, #48]	; 0x30
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	bf00      	nop
 80034f4:	08003cdd 	.word	0x08003cdd
 80034f8:	08003cff 	.word	0x08003cff
 80034fc:	08003d37 	.word	0x08003d37
 8003500:	08003d5b 	.word	0x08003d5b

08003504 <__sfmoreglue>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	1e4a      	subs	r2, r1, #1
 8003508:	2568      	movs	r5, #104	; 0x68
 800350a:	4355      	muls	r5, r2
 800350c:	460e      	mov	r6, r1
 800350e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003512:	f000 f89f 	bl	8003654 <_malloc_r>
 8003516:	4604      	mov	r4, r0
 8003518:	b140      	cbz	r0, 800352c <__sfmoreglue+0x28>
 800351a:	2100      	movs	r1, #0
 800351c:	e880 0042 	stmia.w	r0, {r1, r6}
 8003520:	300c      	adds	r0, #12
 8003522:	60a0      	str	r0, [r4, #8]
 8003524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003528:	f000 f88c 	bl	8003644 <memset>
 800352c:	4620      	mov	r0, r4
 800352e:	bd70      	pop	{r4, r5, r6, pc}

08003530 <__sinit>:
 8003530:	6983      	ldr	r3, [r0, #24]
 8003532:	b510      	push	{r4, lr}
 8003534:	4604      	mov	r4, r0
 8003536:	bb33      	cbnz	r3, 8003586 <__sinit+0x56>
 8003538:	6483      	str	r3, [r0, #72]	; 0x48
 800353a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800353c:	6503      	str	r3, [r0, #80]	; 0x50
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <__sinit+0x58>)
 8003540:	4a12      	ldr	r2, [pc, #72]	; (800358c <__sinit+0x5c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6282      	str	r2, [r0, #40]	; 0x28
 8003546:	4298      	cmp	r0, r3
 8003548:	bf04      	itt	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	6183      	streq	r3, [r0, #24]
 800354e:	f000 f81f 	bl	8003590 <__sfp>
 8003552:	6060      	str	r0, [r4, #4]
 8003554:	4620      	mov	r0, r4
 8003556:	f000 f81b 	bl	8003590 <__sfp>
 800355a:	60a0      	str	r0, [r4, #8]
 800355c:	4620      	mov	r0, r4
 800355e:	f000 f817 	bl	8003590 <__sfp>
 8003562:	2200      	movs	r2, #0
 8003564:	60e0      	str	r0, [r4, #12]
 8003566:	2104      	movs	r1, #4
 8003568:	6860      	ldr	r0, [r4, #4]
 800356a:	f7ff ffa7 	bl	80034bc <std.isra.0>
 800356e:	2201      	movs	r2, #1
 8003570:	2109      	movs	r1, #9
 8003572:	68a0      	ldr	r0, [r4, #8]
 8003574:	f7ff ffa2 	bl	80034bc <std.isra.0>
 8003578:	2202      	movs	r2, #2
 800357a:	2112      	movs	r1, #18
 800357c:	68e0      	ldr	r0, [r4, #12]
 800357e:	f7ff ff9d 	bl	80034bc <std.isra.0>
 8003582:	2301      	movs	r3, #1
 8003584:	61a3      	str	r3, [r4, #24]
 8003586:	bd10      	pop	{r4, pc}
 8003588:	08004418 	.word	0x08004418
 800358c:	080034b1 	.word	0x080034b1

08003590 <__sfp>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <__sfp+0x74>)
 8003594:	681e      	ldr	r6, [r3, #0]
 8003596:	69b3      	ldr	r3, [r6, #24]
 8003598:	4607      	mov	r7, r0
 800359a:	b913      	cbnz	r3, 80035a2 <__sfp+0x12>
 800359c:	4630      	mov	r0, r6
 800359e:	f7ff ffc7 	bl	8003530 <__sinit>
 80035a2:	3648      	adds	r6, #72	; 0x48
 80035a4:	68b4      	ldr	r4, [r6, #8]
 80035a6:	6873      	ldr	r3, [r6, #4]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	d503      	bpl.n	80035b4 <__sfp+0x24>
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	b133      	cbz	r3, 80035be <__sfp+0x2e>
 80035b0:	6836      	ldr	r6, [r6, #0]
 80035b2:	e7f7      	b.n	80035a4 <__sfp+0x14>
 80035b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035b8:	b16d      	cbz	r5, 80035d6 <__sfp+0x46>
 80035ba:	3468      	adds	r4, #104	; 0x68
 80035bc:	e7f4      	b.n	80035a8 <__sfp+0x18>
 80035be:	2104      	movs	r1, #4
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff ff9f 	bl	8003504 <__sfmoreglue>
 80035c6:	6030      	str	r0, [r6, #0]
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1f1      	bne.n	80035b0 <__sfp+0x20>
 80035cc:	230c      	movs	r3, #12
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	4604      	mov	r4, r0
 80035d2:	4620      	mov	r0, r4
 80035d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035da:	81e3      	strh	r3, [r4, #14]
 80035dc:	2301      	movs	r3, #1
 80035de:	81a3      	strh	r3, [r4, #12]
 80035e0:	6665      	str	r5, [r4, #100]	; 0x64
 80035e2:	6025      	str	r5, [r4, #0]
 80035e4:	60a5      	str	r5, [r4, #8]
 80035e6:	6065      	str	r5, [r4, #4]
 80035e8:	6125      	str	r5, [r4, #16]
 80035ea:	6165      	str	r5, [r4, #20]
 80035ec:	61a5      	str	r5, [r4, #24]
 80035ee:	2208      	movs	r2, #8
 80035f0:	4629      	mov	r1, r5
 80035f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035f6:	f000 f825 	bl	8003644 <memset>
 80035fa:	6365      	str	r5, [r4, #52]	; 0x34
 80035fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80035fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8003600:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003602:	e7e6      	b.n	80035d2 <__sfp+0x42>
 8003604:	08004418 	.word	0x08004418

08003608 <_fwalk_reent>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	4680      	mov	r8, r0
 800360e:	4689      	mov	r9, r1
 8003610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003614:	2600      	movs	r6, #0
 8003616:	b914      	cbnz	r4, 800361e <_fwalk_reent+0x16>
 8003618:	4630      	mov	r0, r6
 800361a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800361e:	68a5      	ldr	r5, [r4, #8]
 8003620:	6867      	ldr	r7, [r4, #4]
 8003622:	3f01      	subs	r7, #1
 8003624:	d501      	bpl.n	800362a <_fwalk_reent+0x22>
 8003626:	6824      	ldr	r4, [r4, #0]
 8003628:	e7f5      	b.n	8003616 <_fwalk_reent+0xe>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d907      	bls.n	8003640 <_fwalk_reent+0x38>
 8003630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003634:	3301      	adds	r3, #1
 8003636:	d003      	beq.n	8003640 <_fwalk_reent+0x38>
 8003638:	4629      	mov	r1, r5
 800363a:	4640      	mov	r0, r8
 800363c:	47c8      	blx	r9
 800363e:	4306      	orrs	r6, r0
 8003640:	3568      	adds	r5, #104	; 0x68
 8003642:	e7ee      	b.n	8003622 <_fwalk_reent+0x1a>

08003644 <memset>:
 8003644:	4402      	add	r2, r0
 8003646:	4603      	mov	r3, r0
 8003648:	4293      	cmp	r3, r2
 800364a:	d100      	bne.n	800364e <memset+0xa>
 800364c:	4770      	bx	lr
 800364e:	f803 1b01 	strb.w	r1, [r3], #1
 8003652:	e7f9      	b.n	8003648 <memset+0x4>

08003654 <_malloc_r>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	1ccd      	adds	r5, r1, #3
 8003658:	f025 0503 	bic.w	r5, r5, #3
 800365c:	3508      	adds	r5, #8
 800365e:	2d0c      	cmp	r5, #12
 8003660:	bf38      	it	cc
 8003662:	250c      	movcc	r5, #12
 8003664:	2d00      	cmp	r5, #0
 8003666:	4606      	mov	r6, r0
 8003668:	db01      	blt.n	800366e <_malloc_r+0x1a>
 800366a:	42a9      	cmp	r1, r5
 800366c:	d903      	bls.n	8003676 <_malloc_r+0x22>
 800366e:	230c      	movs	r3, #12
 8003670:	6033      	str	r3, [r6, #0]
 8003672:	2000      	movs	r0, #0
 8003674:	bd70      	pop	{r4, r5, r6, pc}
 8003676:	f000 fd7f 	bl	8004178 <__malloc_lock>
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <_malloc_r+0xb4>)
 800367c:	6814      	ldr	r4, [r2, #0]
 800367e:	4621      	mov	r1, r4
 8003680:	b991      	cbnz	r1, 80036a8 <_malloc_r+0x54>
 8003682:	4c22      	ldr	r4, [pc, #136]	; (800370c <_malloc_r+0xb8>)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	b91b      	cbnz	r3, 8003690 <_malloc_r+0x3c>
 8003688:	4630      	mov	r0, r6
 800368a:	f000 fb17 	bl	8003cbc <_sbrk_r>
 800368e:	6020      	str	r0, [r4, #0]
 8003690:	4629      	mov	r1, r5
 8003692:	4630      	mov	r0, r6
 8003694:	f000 fb12 	bl	8003cbc <_sbrk_r>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d126      	bne.n	80036ea <_malloc_r+0x96>
 800369c:	230c      	movs	r3, #12
 800369e:	6033      	str	r3, [r6, #0]
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 fd6a 	bl	800417a <__malloc_unlock>
 80036a6:	e7e4      	b.n	8003672 <_malloc_r+0x1e>
 80036a8:	680b      	ldr	r3, [r1, #0]
 80036aa:	1b5b      	subs	r3, r3, r5
 80036ac:	d41a      	bmi.n	80036e4 <_malloc_r+0x90>
 80036ae:	2b0b      	cmp	r3, #11
 80036b0:	d90f      	bls.n	80036d2 <_malloc_r+0x7e>
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	50cd      	str	r5, [r1, r3]
 80036b6:	18cc      	adds	r4, r1, r3
 80036b8:	4630      	mov	r0, r6
 80036ba:	f000 fd5e 	bl	800417a <__malloc_unlock>
 80036be:	f104 000b 	add.w	r0, r4, #11
 80036c2:	1d23      	adds	r3, r4, #4
 80036c4:	f020 0007 	bic.w	r0, r0, #7
 80036c8:	1ac3      	subs	r3, r0, r3
 80036ca:	d01b      	beq.n	8003704 <_malloc_r+0xb0>
 80036cc:	425a      	negs	r2, r3
 80036ce:	50e2      	str	r2, [r4, r3]
 80036d0:	bd70      	pop	{r4, r5, r6, pc}
 80036d2:	428c      	cmp	r4, r1
 80036d4:	bf0d      	iteet	eq
 80036d6:	6863      	ldreq	r3, [r4, #4]
 80036d8:	684b      	ldrne	r3, [r1, #4]
 80036da:	6063      	strne	r3, [r4, #4]
 80036dc:	6013      	streq	r3, [r2, #0]
 80036de:	bf18      	it	ne
 80036e0:	460c      	movne	r4, r1
 80036e2:	e7e9      	b.n	80036b8 <_malloc_r+0x64>
 80036e4:	460c      	mov	r4, r1
 80036e6:	6849      	ldr	r1, [r1, #4]
 80036e8:	e7ca      	b.n	8003680 <_malloc_r+0x2c>
 80036ea:	1cc4      	adds	r4, r0, #3
 80036ec:	f024 0403 	bic.w	r4, r4, #3
 80036f0:	42a0      	cmp	r0, r4
 80036f2:	d005      	beq.n	8003700 <_malloc_r+0xac>
 80036f4:	1a21      	subs	r1, r4, r0
 80036f6:	4630      	mov	r0, r6
 80036f8:	f000 fae0 	bl	8003cbc <_sbrk_r>
 80036fc:	3001      	adds	r0, #1
 80036fe:	d0cd      	beq.n	800369c <_malloc_r+0x48>
 8003700:	6025      	str	r5, [r4, #0]
 8003702:	e7d9      	b.n	80036b8 <_malloc_r+0x64>
 8003704:	bd70      	pop	{r4, r5, r6, pc}
 8003706:	bf00      	nop
 8003708:	20000dd8 	.word	0x20000dd8
 800370c:	20000ddc 	.word	0x20000ddc

08003710 <__sfputc_r>:
 8003710:	6893      	ldr	r3, [r2, #8]
 8003712:	3b01      	subs	r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	b410      	push	{r4}
 8003718:	6093      	str	r3, [r2, #8]
 800371a:	da09      	bge.n	8003730 <__sfputc_r+0x20>
 800371c:	6994      	ldr	r4, [r2, #24]
 800371e:	42a3      	cmp	r3, r4
 8003720:	db02      	blt.n	8003728 <__sfputc_r+0x18>
 8003722:	b2cb      	uxtb	r3, r1
 8003724:	2b0a      	cmp	r3, #10
 8003726:	d103      	bne.n	8003730 <__sfputc_r+0x20>
 8003728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800372c:	f000 bb1a 	b.w	8003d64 <__swbuf_r>
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	1c58      	adds	r0, r3, #1
 8003734:	6010      	str	r0, [r2, #0]
 8003736:	7019      	strb	r1, [r3, #0]
 8003738:	b2c8      	uxtb	r0, r1
 800373a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800373e:	4770      	bx	lr

08003740 <__sfputs_r>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	4606      	mov	r6, r0
 8003744:	460f      	mov	r7, r1
 8003746:	4614      	mov	r4, r2
 8003748:	18d5      	adds	r5, r2, r3
 800374a:	42ac      	cmp	r4, r5
 800374c:	d101      	bne.n	8003752 <__sfputs_r+0x12>
 800374e:	2000      	movs	r0, #0
 8003750:	e007      	b.n	8003762 <__sfputs_r+0x22>
 8003752:	463a      	mov	r2, r7
 8003754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff ffd9 	bl	8003710 <__sfputc_r>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d1f3      	bne.n	800374a <__sfputs_r+0xa>
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003764 <_vfiprintf_r>:
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	b09d      	sub	sp, #116	; 0x74
 800376a:	460c      	mov	r4, r1
 800376c:	4617      	mov	r7, r2
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	4606      	mov	r6, r0
 8003772:	b118      	cbz	r0, 800377c <_vfiprintf_r+0x18>
 8003774:	6983      	ldr	r3, [r0, #24]
 8003776:	b90b      	cbnz	r3, 800377c <_vfiprintf_r+0x18>
 8003778:	f7ff feda 	bl	8003530 <__sinit>
 800377c:	4b7c      	ldr	r3, [pc, #496]	; (8003970 <_vfiprintf_r+0x20c>)
 800377e:	429c      	cmp	r4, r3
 8003780:	d157      	bne.n	8003832 <_vfiprintf_r+0xce>
 8003782:	6874      	ldr	r4, [r6, #4]
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	0718      	lsls	r0, r3, #28
 8003788:	d55d      	bpl.n	8003846 <_vfiprintf_r+0xe2>
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05a      	beq.n	8003846 <_vfiprintf_r+0xe2>
 8003790:	2300      	movs	r3, #0
 8003792:	9309      	str	r3, [sp, #36]	; 0x24
 8003794:	2320      	movs	r3, #32
 8003796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800379a:	2330      	movs	r3, #48	; 0x30
 800379c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037a0:	f04f 0b01 	mov.w	fp, #1
 80037a4:	46b8      	mov	r8, r7
 80037a6:	4645      	mov	r5, r8
 80037a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d155      	bne.n	800385c <_vfiprintf_r+0xf8>
 80037b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80037b4:	d00b      	beq.n	80037ce <_vfiprintf_r+0x6a>
 80037b6:	4653      	mov	r3, sl
 80037b8:	463a      	mov	r2, r7
 80037ba:	4621      	mov	r1, r4
 80037bc:	4630      	mov	r0, r6
 80037be:	f7ff ffbf 	bl	8003740 <__sfputs_r>
 80037c2:	3001      	adds	r0, #1
 80037c4:	f000 80c4 	beq.w	8003950 <_vfiprintf_r+0x1ec>
 80037c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ca:	4453      	add	r3, sl
 80037cc:	9309      	str	r3, [sp, #36]	; 0x24
 80037ce:	f898 3000 	ldrb.w	r3, [r8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80bc 	beq.w	8003950 <_vfiprintf_r+0x1ec>
 80037d8:	2300      	movs	r3, #0
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	9304      	str	r3, [sp, #16]
 80037e0:	9307      	str	r3, [sp, #28]
 80037e2:	9205      	str	r2, [sp, #20]
 80037e4:	9306      	str	r3, [sp, #24]
 80037e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ea:	931a      	str	r3, [sp, #104]	; 0x68
 80037ec:	2205      	movs	r2, #5
 80037ee:	7829      	ldrb	r1, [r5, #0]
 80037f0:	4860      	ldr	r0, [pc, #384]	; (8003974 <_vfiprintf_r+0x210>)
 80037f2:	f7fc fcf5 	bl	80001e0 <memchr>
 80037f6:	f105 0801 	add.w	r8, r5, #1
 80037fa:	9b04      	ldr	r3, [sp, #16]
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d131      	bne.n	8003864 <_vfiprintf_r+0x100>
 8003800:	06d9      	lsls	r1, r3, #27
 8003802:	bf44      	itt	mi
 8003804:	2220      	movmi	r2, #32
 8003806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800380a:	071a      	lsls	r2, r3, #28
 800380c:	bf44      	itt	mi
 800380e:	222b      	movmi	r2, #43	; 0x2b
 8003810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003814:	782a      	ldrb	r2, [r5, #0]
 8003816:	2a2a      	cmp	r2, #42	; 0x2a
 8003818:	d02c      	beq.n	8003874 <_vfiprintf_r+0x110>
 800381a:	9a07      	ldr	r2, [sp, #28]
 800381c:	2100      	movs	r1, #0
 800381e:	200a      	movs	r0, #10
 8003820:	46a8      	mov	r8, r5
 8003822:	3501      	adds	r5, #1
 8003824:	f898 3000 	ldrb.w	r3, [r8]
 8003828:	3b30      	subs	r3, #48	; 0x30
 800382a:	2b09      	cmp	r3, #9
 800382c:	d96d      	bls.n	800390a <_vfiprintf_r+0x1a6>
 800382e:	b371      	cbz	r1, 800388e <_vfiprintf_r+0x12a>
 8003830:	e026      	b.n	8003880 <_vfiprintf_r+0x11c>
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <_vfiprintf_r+0x214>)
 8003834:	429c      	cmp	r4, r3
 8003836:	d101      	bne.n	800383c <_vfiprintf_r+0xd8>
 8003838:	68b4      	ldr	r4, [r6, #8]
 800383a:	e7a3      	b.n	8003784 <_vfiprintf_r+0x20>
 800383c:	4b4f      	ldr	r3, [pc, #316]	; (800397c <_vfiprintf_r+0x218>)
 800383e:	429c      	cmp	r4, r3
 8003840:	bf08      	it	eq
 8003842:	68f4      	ldreq	r4, [r6, #12]
 8003844:	e79e      	b.n	8003784 <_vfiprintf_r+0x20>
 8003846:	4621      	mov	r1, r4
 8003848:	4630      	mov	r0, r6
 800384a:	f000 faef 	bl	8003e2c <__swsetup_r>
 800384e:	2800      	cmp	r0, #0
 8003850:	d09e      	beq.n	8003790 <_vfiprintf_r+0x2c>
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	b01d      	add	sp, #116	; 0x74
 8003858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385c:	2b25      	cmp	r3, #37	; 0x25
 800385e:	d0a7      	beq.n	80037b0 <_vfiprintf_r+0x4c>
 8003860:	46a8      	mov	r8, r5
 8003862:	e7a0      	b.n	80037a6 <_vfiprintf_r+0x42>
 8003864:	4a43      	ldr	r2, [pc, #268]	; (8003974 <_vfiprintf_r+0x210>)
 8003866:	1a80      	subs	r0, r0, r2
 8003868:	fa0b f000 	lsl.w	r0, fp, r0
 800386c:	4318      	orrs	r0, r3
 800386e:	9004      	str	r0, [sp, #16]
 8003870:	4645      	mov	r5, r8
 8003872:	e7bb      	b.n	80037ec <_vfiprintf_r+0x88>
 8003874:	9a03      	ldr	r2, [sp, #12]
 8003876:	1d11      	adds	r1, r2, #4
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	9103      	str	r1, [sp, #12]
 800387c:	2a00      	cmp	r2, #0
 800387e:	db01      	blt.n	8003884 <_vfiprintf_r+0x120>
 8003880:	9207      	str	r2, [sp, #28]
 8003882:	e004      	b.n	800388e <_vfiprintf_r+0x12a>
 8003884:	4252      	negs	r2, r2
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	9207      	str	r2, [sp, #28]
 800388c:	9304      	str	r3, [sp, #16]
 800388e:	f898 3000 	ldrb.w	r3, [r8]
 8003892:	2b2e      	cmp	r3, #46	; 0x2e
 8003894:	d110      	bne.n	80038b8 <_vfiprintf_r+0x154>
 8003896:	f898 3001 	ldrb.w	r3, [r8, #1]
 800389a:	2b2a      	cmp	r3, #42	; 0x2a
 800389c:	f108 0101 	add.w	r1, r8, #1
 80038a0:	d137      	bne.n	8003912 <_vfiprintf_r+0x1ae>
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	1d1a      	adds	r2, r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	9203      	str	r2, [sp, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bfb8      	it	lt
 80038ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80038b2:	f108 0802 	add.w	r8, r8, #2
 80038b6:	9305      	str	r3, [sp, #20]
 80038b8:	4d31      	ldr	r5, [pc, #196]	; (8003980 <_vfiprintf_r+0x21c>)
 80038ba:	f898 1000 	ldrb.w	r1, [r8]
 80038be:	2203      	movs	r2, #3
 80038c0:	4628      	mov	r0, r5
 80038c2:	f7fc fc8d 	bl	80001e0 <memchr>
 80038c6:	b140      	cbz	r0, 80038da <_vfiprintf_r+0x176>
 80038c8:	2340      	movs	r3, #64	; 0x40
 80038ca:	1b40      	subs	r0, r0, r5
 80038cc:	fa03 f000 	lsl.w	r0, r3, r0
 80038d0:	9b04      	ldr	r3, [sp, #16]
 80038d2:	4303      	orrs	r3, r0
 80038d4:	9304      	str	r3, [sp, #16]
 80038d6:	f108 0801 	add.w	r8, r8, #1
 80038da:	f898 1000 	ldrb.w	r1, [r8]
 80038de:	4829      	ldr	r0, [pc, #164]	; (8003984 <_vfiprintf_r+0x220>)
 80038e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038e4:	2206      	movs	r2, #6
 80038e6:	f108 0701 	add.w	r7, r8, #1
 80038ea:	f7fc fc79 	bl	80001e0 <memchr>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d034      	beq.n	800395c <_vfiprintf_r+0x1f8>
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <_vfiprintf_r+0x224>)
 80038f4:	bb03      	cbnz	r3, 8003938 <_vfiprintf_r+0x1d4>
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	3307      	adds	r3, #7
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	3308      	adds	r3, #8
 8003900:	9303      	str	r3, [sp, #12]
 8003902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003904:	444b      	add	r3, r9
 8003906:	9309      	str	r3, [sp, #36]	; 0x24
 8003908:	e74c      	b.n	80037a4 <_vfiprintf_r+0x40>
 800390a:	fb00 3202 	mla	r2, r0, r2, r3
 800390e:	2101      	movs	r1, #1
 8003910:	e786      	b.n	8003820 <_vfiprintf_r+0xbc>
 8003912:	2300      	movs	r3, #0
 8003914:	9305      	str	r3, [sp, #20]
 8003916:	4618      	mov	r0, r3
 8003918:	250a      	movs	r5, #10
 800391a:	4688      	mov	r8, r1
 800391c:	3101      	adds	r1, #1
 800391e:	f898 2000 	ldrb.w	r2, [r8]
 8003922:	3a30      	subs	r2, #48	; 0x30
 8003924:	2a09      	cmp	r2, #9
 8003926:	d903      	bls.n	8003930 <_vfiprintf_r+0x1cc>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0c5      	beq.n	80038b8 <_vfiprintf_r+0x154>
 800392c:	9005      	str	r0, [sp, #20]
 800392e:	e7c3      	b.n	80038b8 <_vfiprintf_r+0x154>
 8003930:	fb05 2000 	mla	r0, r5, r0, r2
 8003934:	2301      	movs	r3, #1
 8003936:	e7f0      	b.n	800391a <_vfiprintf_r+0x1b6>
 8003938:	ab03      	add	r3, sp, #12
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4622      	mov	r2, r4
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <_vfiprintf_r+0x228>)
 8003940:	a904      	add	r1, sp, #16
 8003942:	4630      	mov	r0, r6
 8003944:	f3af 8000 	nop.w
 8003948:	f1b0 3fff 	cmp.w	r0, #4294967295
 800394c:	4681      	mov	r9, r0
 800394e:	d1d8      	bne.n	8003902 <_vfiprintf_r+0x19e>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	065b      	lsls	r3, r3, #25
 8003954:	f53f af7d 	bmi.w	8003852 <_vfiprintf_r+0xee>
 8003958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800395a:	e77c      	b.n	8003856 <_vfiprintf_r+0xf2>
 800395c:	ab03      	add	r3, sp, #12
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	4622      	mov	r2, r4
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <_vfiprintf_r+0x228>)
 8003964:	a904      	add	r1, sp, #16
 8003966:	4630      	mov	r0, r6
 8003968:	f000 f888 	bl	8003a7c <_printf_i>
 800396c:	e7ec      	b.n	8003948 <_vfiprintf_r+0x1e4>
 800396e:	bf00      	nop
 8003970:	080043d8 	.word	0x080043d8
 8003974:	0800441c 	.word	0x0800441c
 8003978:	080043f8 	.word	0x080043f8
 800397c:	080043b8 	.word	0x080043b8
 8003980:	08004422 	.word	0x08004422
 8003984:	08004426 	.word	0x08004426
 8003988:	00000000 	.word	0x00000000
 800398c:	08003741 	.word	0x08003741

08003990 <_printf_common>:
 8003990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	4691      	mov	r9, r2
 8003996:	461f      	mov	r7, r3
 8003998:	688a      	ldr	r2, [r1, #8]
 800399a:	690b      	ldr	r3, [r1, #16]
 800399c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	bfb8      	it	lt
 80039a4:	4613      	movlt	r3, r2
 80039a6:	f8c9 3000 	str.w	r3, [r9]
 80039aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039ae:	4606      	mov	r6, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	b112      	cbz	r2, 80039ba <_printf_common+0x2a>
 80039b4:	3301      	adds	r3, #1
 80039b6:	f8c9 3000 	str.w	r3, [r9]
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	0699      	lsls	r1, r3, #26
 80039be:	bf42      	ittt	mi
 80039c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039c4:	3302      	addmi	r3, #2
 80039c6:	f8c9 3000 	strmi.w	r3, [r9]
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	f015 0506 	ands.w	r5, r5, #6
 80039d0:	d107      	bne.n	80039e2 <_printf_common+0x52>
 80039d2:	f104 0a19 	add.w	sl, r4, #25
 80039d6:	68e3      	ldr	r3, [r4, #12]
 80039d8:	f8d9 2000 	ldr.w	r2, [r9]
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	429d      	cmp	r5, r3
 80039e0:	db29      	blt.n	8003a36 <_printf_common+0xa6>
 80039e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	3300      	adds	r3, #0
 80039ea:	bf18      	it	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	0692      	lsls	r2, r2, #26
 80039f0:	d42e      	bmi.n	8003a50 <_printf_common+0xc0>
 80039f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039f6:	4639      	mov	r1, r7
 80039f8:	4630      	mov	r0, r6
 80039fa:	47c0      	blx	r8
 80039fc:	3001      	adds	r0, #1
 80039fe:	d021      	beq.n	8003a44 <_printf_common+0xb4>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	68e5      	ldr	r5, [r4, #12]
 8003a04:	f8d9 2000 	ldr.w	r2, [r9]
 8003a08:	f003 0306 	and.w	r3, r3, #6
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	bf08      	it	eq
 8003a10:	1aad      	subeq	r5, r5, r2
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	6922      	ldr	r2, [r4, #16]
 8003a16:	bf0c      	ite	eq
 8003a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a1c:	2500      	movne	r5, #0
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	bfc4      	itt	gt
 8003a22:	1a9b      	subgt	r3, r3, r2
 8003a24:	18ed      	addgt	r5, r5, r3
 8003a26:	f04f 0900 	mov.w	r9, #0
 8003a2a:	341a      	adds	r4, #26
 8003a2c:	454d      	cmp	r5, r9
 8003a2e:	d11b      	bne.n	8003a68 <_printf_common+0xd8>
 8003a30:	2000      	movs	r0, #0
 8003a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a36:	2301      	movs	r3, #1
 8003a38:	4652      	mov	r2, sl
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	47c0      	blx	r8
 8003a40:	3001      	adds	r0, #1
 8003a42:	d103      	bne.n	8003a4c <_printf_common+0xbc>
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	e7c2      	b.n	80039d6 <_printf_common+0x46>
 8003a50:	18e1      	adds	r1, r4, r3
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	2030      	movs	r0, #48	; 0x30
 8003a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a5a:	4422      	add	r2, r4
 8003a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a64:	3302      	adds	r3, #2
 8003a66:	e7c4      	b.n	80039f2 <_printf_common+0x62>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	47c0      	blx	r8
 8003a72:	3001      	adds	r0, #1
 8003a74:	d0e6      	beq.n	8003a44 <_printf_common+0xb4>
 8003a76:	f109 0901 	add.w	r9, r9, #1
 8003a7a:	e7d7      	b.n	8003a2c <_printf_common+0x9c>

08003a7c <_printf_i>:
 8003a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a80:	4617      	mov	r7, r2
 8003a82:	7e0a      	ldrb	r2, [r1, #24]
 8003a84:	b085      	sub	sp, #20
 8003a86:	2a6e      	cmp	r2, #110	; 0x6e
 8003a88:	4698      	mov	r8, r3
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a90:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003a94:	f000 80bc 	beq.w	8003c10 <_printf_i+0x194>
 8003a98:	d81a      	bhi.n	8003ad0 <_printf_i+0x54>
 8003a9a:	2a63      	cmp	r2, #99	; 0x63
 8003a9c:	d02e      	beq.n	8003afc <_printf_i+0x80>
 8003a9e:	d80a      	bhi.n	8003ab6 <_printf_i+0x3a>
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	f000 80c8 	beq.w	8003c36 <_printf_i+0x1ba>
 8003aa6:	2a58      	cmp	r2, #88	; 0x58
 8003aa8:	f000 808a 	beq.w	8003bc0 <_printf_i+0x144>
 8003aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003ab4:	e02a      	b.n	8003b0c <_printf_i+0x90>
 8003ab6:	2a64      	cmp	r2, #100	; 0x64
 8003ab8:	d001      	beq.n	8003abe <_printf_i+0x42>
 8003aba:	2a69      	cmp	r2, #105	; 0x69
 8003abc:	d1f6      	bne.n	8003aac <_printf_i+0x30>
 8003abe:	6821      	ldr	r1, [r4, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ac6:	d023      	beq.n	8003b10 <_printf_i+0x94>
 8003ac8:	1d11      	adds	r1, r2, #4
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	e027      	b.n	8003b20 <_printf_i+0xa4>
 8003ad0:	2a73      	cmp	r2, #115	; 0x73
 8003ad2:	f000 80b4 	beq.w	8003c3e <_printf_i+0x1c2>
 8003ad6:	d808      	bhi.n	8003aea <_printf_i+0x6e>
 8003ad8:	2a6f      	cmp	r2, #111	; 0x6f
 8003ada:	d02a      	beq.n	8003b32 <_printf_i+0xb6>
 8003adc:	2a70      	cmp	r2, #112	; 0x70
 8003ade:	d1e5      	bne.n	8003aac <_printf_i+0x30>
 8003ae0:	680a      	ldr	r2, [r1, #0]
 8003ae2:	f042 0220 	orr.w	r2, r2, #32
 8003ae6:	600a      	str	r2, [r1, #0]
 8003ae8:	e003      	b.n	8003af2 <_printf_i+0x76>
 8003aea:	2a75      	cmp	r2, #117	; 0x75
 8003aec:	d021      	beq.n	8003b32 <_printf_i+0xb6>
 8003aee:	2a78      	cmp	r2, #120	; 0x78
 8003af0:	d1dc      	bne.n	8003aac <_printf_i+0x30>
 8003af2:	2278      	movs	r2, #120	; 0x78
 8003af4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003af8:	496e      	ldr	r1, [pc, #440]	; (8003cb4 <_printf_i+0x238>)
 8003afa:	e064      	b.n	8003bc6 <_printf_i+0x14a>
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003b02:	1d11      	adds	r1, r2, #4
 8003b04:	6019      	str	r1, [r3, #0]
 8003b06:	6813      	ldr	r3, [r2, #0]
 8003b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0a3      	b.n	8003c58 <_printf_i+0x1dc>
 8003b10:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003b14:	f102 0104 	add.w	r1, r2, #4
 8003b18:	6019      	str	r1, [r3, #0]
 8003b1a:	d0d7      	beq.n	8003acc <_printf_i+0x50>
 8003b1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da03      	bge.n	8003b2c <_printf_i+0xb0>
 8003b24:	222d      	movs	r2, #45	; 0x2d
 8003b26:	425b      	negs	r3, r3
 8003b28:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b2c:	4962      	ldr	r1, [pc, #392]	; (8003cb8 <_printf_i+0x23c>)
 8003b2e:	220a      	movs	r2, #10
 8003b30:	e017      	b.n	8003b62 <_printf_i+0xe6>
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b3a:	d003      	beq.n	8003b44 <_printf_i+0xc8>
 8003b3c:	1d08      	adds	r0, r1, #4
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	680b      	ldr	r3, [r1, #0]
 8003b42:	e006      	b.n	8003b52 <_printf_i+0xd6>
 8003b44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b48:	f101 0004 	add.w	r0, r1, #4
 8003b4c:	6018      	str	r0, [r3, #0]
 8003b4e:	d0f7      	beq.n	8003b40 <_printf_i+0xc4>
 8003b50:	880b      	ldrh	r3, [r1, #0]
 8003b52:	4959      	ldr	r1, [pc, #356]	; (8003cb8 <_printf_i+0x23c>)
 8003b54:	2a6f      	cmp	r2, #111	; 0x6f
 8003b56:	bf14      	ite	ne
 8003b58:	220a      	movne	r2, #10
 8003b5a:	2208      	moveq	r2, #8
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003b62:	6865      	ldr	r5, [r4, #4]
 8003b64:	60a5      	str	r5, [r4, #8]
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	f2c0 809c 	blt.w	8003ca4 <_printf_i+0x228>
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	f020 0004 	bic.w	r0, r0, #4
 8003b72:	6020      	str	r0, [r4, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d13f      	bne.n	8003bf8 <_printf_i+0x17c>
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	f040 8095 	bne.w	8003ca8 <_printf_i+0x22c>
 8003b7e:	4675      	mov	r5, lr
 8003b80:	2a08      	cmp	r2, #8
 8003b82:	d10b      	bne.n	8003b9c <_printf_i+0x120>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	07da      	lsls	r2, r3, #31
 8003b88:	d508      	bpl.n	8003b9c <_printf_i+0x120>
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	bfde      	ittt	le
 8003b92:	2330      	movle	r3, #48	; 0x30
 8003b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b9c:	ebae 0305 	sub.w	r3, lr, r5
 8003ba0:	6123      	str	r3, [r4, #16]
 8003ba2:	f8cd 8000 	str.w	r8, [sp]
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	aa03      	add	r2, sp, #12
 8003baa:	4621      	mov	r1, r4
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7ff feef 	bl	8003990 <_printf_common>
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d155      	bne.n	8003c62 <_printf_i+0x1e6>
 8003bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bba:	b005      	add	sp, #20
 8003bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bc0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003bc4:	493c      	ldr	r1, [pc, #240]	; (8003cb8 <_printf_i+0x23c>)
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bce:	f100 0504 	add.w	r5, r0, #4
 8003bd2:	601d      	str	r5, [r3, #0]
 8003bd4:	d001      	beq.n	8003bda <_printf_i+0x15e>
 8003bd6:	6803      	ldr	r3, [r0, #0]
 8003bd8:	e002      	b.n	8003be0 <_printf_i+0x164>
 8003bda:	0655      	lsls	r5, r2, #25
 8003bdc:	d5fb      	bpl.n	8003bd6 <_printf_i+0x15a>
 8003bde:	8803      	ldrh	r3, [r0, #0]
 8003be0:	07d0      	lsls	r0, r2, #31
 8003be2:	bf44      	itt	mi
 8003be4:	f042 0220 	orrmi.w	r2, r2, #32
 8003be8:	6022      	strmi	r2, [r4, #0]
 8003bea:	b91b      	cbnz	r3, 8003bf4 <_printf_i+0x178>
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	f022 0220 	bic.w	r2, r2, #32
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	e7b1      	b.n	8003b5c <_printf_i+0xe0>
 8003bf8:	4675      	mov	r5, lr
 8003bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8003bfe:	fb02 3310 	mls	r3, r2, r0, r3
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d1f5      	bne.n	8003bfa <_printf_i+0x17e>
 8003c0e:	e7b7      	b.n	8003b80 <_printf_i+0x104>
 8003c10:	6808      	ldr	r0, [r1, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	6949      	ldr	r1, [r1, #20]
 8003c16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c1a:	d004      	beq.n	8003c26 <_printf_i+0x1aa>
 8003c1c:	1d10      	adds	r0, r2, #4
 8003c1e:	6018      	str	r0, [r3, #0]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	6019      	str	r1, [r3, #0]
 8003c24:	e007      	b.n	8003c36 <_printf_i+0x1ba>
 8003c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c2a:	f102 0004 	add.w	r0, r2, #4
 8003c2e:	6018      	str	r0, [r3, #0]
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	d0f6      	beq.n	8003c22 <_printf_i+0x1a6>
 8003c34:	8019      	strh	r1, [r3, #0]
 8003c36:	2300      	movs	r3, #0
 8003c38:	6123      	str	r3, [r4, #16]
 8003c3a:	4675      	mov	r5, lr
 8003c3c:	e7b1      	b.n	8003ba2 <_printf_i+0x126>
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	1d11      	adds	r1, r2, #4
 8003c42:	6019      	str	r1, [r3, #0]
 8003c44:	6815      	ldr	r5, [r2, #0]
 8003c46:	6862      	ldr	r2, [r4, #4]
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f7fc fac8 	bl	80001e0 <memchr>
 8003c50:	b108      	cbz	r0, 8003c56 <_printf_i+0x1da>
 8003c52:	1b40      	subs	r0, r0, r5
 8003c54:	6060      	str	r0, [r4, #4]
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	6123      	str	r3, [r4, #16]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c60:	e79f      	b.n	8003ba2 <_printf_i+0x126>
 8003c62:	6923      	ldr	r3, [r4, #16]
 8003c64:	462a      	mov	r2, r5
 8003c66:	4639      	mov	r1, r7
 8003c68:	4630      	mov	r0, r6
 8003c6a:	47c0      	blx	r8
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d0a2      	beq.n	8003bb6 <_printf_i+0x13a>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	079b      	lsls	r3, r3, #30
 8003c74:	d507      	bpl.n	8003c86 <_printf_i+0x20a>
 8003c76:	2500      	movs	r5, #0
 8003c78:	f104 0919 	add.w	r9, r4, #25
 8003c7c:	68e3      	ldr	r3, [r4, #12]
 8003c7e:	9a03      	ldr	r2, [sp, #12]
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	429d      	cmp	r5, r3
 8003c84:	db05      	blt.n	8003c92 <_printf_i+0x216>
 8003c86:	68e0      	ldr	r0, [r4, #12]
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	4298      	cmp	r0, r3
 8003c8c:	bfb8      	it	lt
 8003c8e:	4618      	movlt	r0, r3
 8003c90:	e793      	b.n	8003bba <_printf_i+0x13e>
 8003c92:	2301      	movs	r3, #1
 8003c94:	464a      	mov	r2, r9
 8003c96:	4639      	mov	r1, r7
 8003c98:	4630      	mov	r0, r6
 8003c9a:	47c0      	blx	r8
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d08a      	beq.n	8003bb6 <_printf_i+0x13a>
 8003ca0:	3501      	adds	r5, #1
 8003ca2:	e7eb      	b.n	8003c7c <_printf_i+0x200>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1a7      	bne.n	8003bf8 <_printf_i+0x17c>
 8003ca8:	780b      	ldrb	r3, [r1, #0]
 8003caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb2:	e765      	b.n	8003b80 <_printf_i+0x104>
 8003cb4:	0800443e 	.word	0x0800443e
 8003cb8:	0800442d 	.word	0x0800442d

08003cbc <_sbrk_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4c06      	ldr	r4, [pc, #24]	; (8003cd8 <_sbrk_r+0x1c>)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	6023      	str	r3, [r4, #0]
 8003cc8:	f000 fb02 	bl	80042d0 <_sbrk>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_sbrk_r+0x1a>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_sbrk_r+0x1a>
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	20000ef8 	.word	0x20000ef8

08003cdc <__sread>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	460c      	mov	r4, r1
 8003ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce4:	f000 fa98 	bl	8004218 <_read_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	bfab      	itete	ge
 8003cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cee:	89a3      	ldrhlt	r3, [r4, #12]
 8003cf0:	181b      	addge	r3, r3, r0
 8003cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cf6:	bfac      	ite	ge
 8003cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cfa:	81a3      	strhlt	r3, [r4, #12]
 8003cfc:	bd10      	pop	{r4, pc}

08003cfe <__swrite>:
 8003cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	461f      	mov	r7, r3
 8003d04:	898b      	ldrh	r3, [r1, #12]
 8003d06:	05db      	lsls	r3, r3, #23
 8003d08:	4605      	mov	r5, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	d505      	bpl.n	8003d1c <__swrite+0x1e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	2200      	movs	r2, #0
 8003d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d18:	f000 f9b8 	bl	800408c <_lseek_r>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	4632      	mov	r2, r6
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d32:	f000 b869 	b.w	8003e08 <_write_r>

08003d36 <__sseek>:
 8003d36:	b510      	push	{r4, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3e:	f000 f9a5 	bl	800408c <_lseek_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	bf15      	itete	ne
 8003d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d52:	81a3      	strheq	r3, [r4, #12]
 8003d54:	bf18      	it	ne
 8003d56:	81a3      	strhne	r3, [r4, #12]
 8003d58:	bd10      	pop	{r4, pc}

08003d5a <__sclose>:
 8003d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5e:	f000 b8d3 	b.w	8003f08 <_close_r>
	...

08003d64 <__swbuf_r>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	460e      	mov	r6, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	b118      	cbz	r0, 8003d76 <__swbuf_r+0x12>
 8003d6e:	6983      	ldr	r3, [r0, #24]
 8003d70:	b90b      	cbnz	r3, 8003d76 <__swbuf_r+0x12>
 8003d72:	f7ff fbdd 	bl	8003530 <__sinit>
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <__swbuf_r+0x98>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	d12a      	bne.n	8003dd2 <__swbuf_r+0x6e>
 8003d7c:	686c      	ldr	r4, [r5, #4]
 8003d7e:	69a3      	ldr	r3, [r4, #24]
 8003d80:	60a3      	str	r3, [r4, #8]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	071a      	lsls	r2, r3, #28
 8003d86:	d52e      	bpl.n	8003de6 <__swbuf_r+0x82>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	b363      	cbz	r3, 8003de6 <__swbuf_r+0x82>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	1ac0      	subs	r0, r0, r3
 8003d92:	6963      	ldr	r3, [r4, #20]
 8003d94:	b2f6      	uxtb	r6, r6
 8003d96:	4298      	cmp	r0, r3
 8003d98:	4637      	mov	r7, r6
 8003d9a:	db04      	blt.n	8003da6 <__swbuf_r+0x42>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f94a 	bl	8004038 <_fflush_r>
 8003da4:	bb28      	cbnz	r0, 8003df2 <__swbuf_r+0x8e>
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	6022      	str	r2, [r4, #0]
 8003db2:	701e      	strb	r6, [r3, #0]
 8003db4:	6963      	ldr	r3, [r4, #20]
 8003db6:	3001      	adds	r0, #1
 8003db8:	4298      	cmp	r0, r3
 8003dba:	d004      	beq.n	8003dc6 <__swbuf_r+0x62>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	07db      	lsls	r3, r3, #31
 8003dc0:	d519      	bpl.n	8003df6 <__swbuf_r+0x92>
 8003dc2:	2e0a      	cmp	r6, #10
 8003dc4:	d117      	bne.n	8003df6 <__swbuf_r+0x92>
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 f935 	bl	8004038 <_fflush_r>
 8003dce:	b190      	cbz	r0, 8003df6 <__swbuf_r+0x92>
 8003dd0:	e00f      	b.n	8003df2 <__swbuf_r+0x8e>
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <__swbuf_r+0x9c>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d101      	bne.n	8003ddc <__swbuf_r+0x78>
 8003dd8:	68ac      	ldr	r4, [r5, #8]
 8003dda:	e7d0      	b.n	8003d7e <__swbuf_r+0x1a>
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <__swbuf_r+0xa0>)
 8003dde:	429c      	cmp	r4, r3
 8003de0:	bf08      	it	eq
 8003de2:	68ec      	ldreq	r4, [r5, #12]
 8003de4:	e7cb      	b.n	8003d7e <__swbuf_r+0x1a>
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 f81f 	bl	8003e2c <__swsetup_r>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0cc      	beq.n	8003d8c <__swbuf_r+0x28>
 8003df2:	f04f 37ff 	mov.w	r7, #4294967295
 8003df6:	4638      	mov	r0, r7
 8003df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	080043d8 	.word	0x080043d8
 8003e00:	080043f8 	.word	0x080043f8
 8003e04:	080043b8 	.word	0x080043b8

08003e08 <_write_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4c07      	ldr	r4, [pc, #28]	; (8003e28 <_write_r+0x20>)
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	4608      	mov	r0, r1
 8003e10:	4611      	mov	r1, r2
 8003e12:	2200      	movs	r2, #0
 8003e14:	6022      	str	r2, [r4, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 fa68 	bl	80042ec <_write>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_write_r+0x1e>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_write_r+0x1e>
 8003e24:	602b      	str	r3, [r5, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000ef8 	.word	0x20000ef8

08003e2c <__swsetup_r>:
 8003e2c:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <__swsetup_r+0xcc>)
 8003e2e:	b570      	push	{r4, r5, r6, lr}
 8003e30:	681d      	ldr	r5, [r3, #0]
 8003e32:	4606      	mov	r6, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	b125      	cbz	r5, 8003e42 <__swsetup_r+0x16>
 8003e38:	69ab      	ldr	r3, [r5, #24]
 8003e3a:	b913      	cbnz	r3, 8003e42 <__swsetup_r+0x16>
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f7ff fb77 	bl	8003530 <__sinit>
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <__swsetup_r+0xd0>)
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d10f      	bne.n	8003e68 <__swsetup_r+0x3c>
 8003e48:	686c      	ldr	r4, [r5, #4]
 8003e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	0715      	lsls	r5, r2, #28
 8003e52:	d42c      	bmi.n	8003eae <__swsetup_r+0x82>
 8003e54:	06d0      	lsls	r0, r2, #27
 8003e56:	d411      	bmi.n	8003e7c <__swsetup_r+0x50>
 8003e58:	2209      	movs	r2, #9
 8003e5a:	6032      	str	r2, [r6, #0]
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	81a3      	strh	r3, [r4, #12]
 8003e62:	f04f 30ff 	mov.w	r0, #4294967295
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <__swsetup_r+0xd4>)
 8003e6a:	429c      	cmp	r4, r3
 8003e6c:	d101      	bne.n	8003e72 <__swsetup_r+0x46>
 8003e6e:	68ac      	ldr	r4, [r5, #8]
 8003e70:	e7eb      	b.n	8003e4a <__swsetup_r+0x1e>
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <__swsetup_r+0xd8>)
 8003e74:	429c      	cmp	r4, r3
 8003e76:	bf08      	it	eq
 8003e78:	68ec      	ldreq	r4, [r5, #12]
 8003e7a:	e7e6      	b.n	8003e4a <__swsetup_r+0x1e>
 8003e7c:	0751      	lsls	r1, r2, #29
 8003e7e:	d512      	bpl.n	8003ea6 <__swsetup_r+0x7a>
 8003e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e82:	b141      	cbz	r1, 8003e96 <__swsetup_r+0x6a>
 8003e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	d002      	beq.n	8003e92 <__swsetup_r+0x66>
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	f000 f975 	bl	800417c <_free_r>
 8003e92:	2300      	movs	r3, #0
 8003e94:	6363      	str	r3, [r4, #52]	; 0x34
 8003e96:	89a3      	ldrh	r3, [r4, #12]
 8003e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e9c:	81a3      	strh	r3, [r4, #12]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	6063      	str	r3, [r4, #4]
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	f043 0308 	orr.w	r3, r3, #8
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	b94b      	cbnz	r3, 8003ec6 <__swsetup_r+0x9a>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ebc:	d003      	beq.n	8003ec6 <__swsetup_r+0x9a>
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f000 f919 	bl	80040f8 <__smakebuf_r>
 8003ec6:	89a2      	ldrh	r2, [r4, #12]
 8003ec8:	f012 0301 	ands.w	r3, r2, #1
 8003ecc:	d00c      	beq.n	8003ee8 <__swsetup_r+0xbc>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	6963      	ldr	r3, [r4, #20]
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	61a3      	str	r3, [r4, #24]
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	b953      	cbnz	r3, 8003ef2 <__swsetup_r+0xc6>
 8003edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ee4:	d1ba      	bne.n	8003e5c <__swsetup_r+0x30>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	0792      	lsls	r2, r2, #30
 8003eea:	bf58      	it	pl
 8003eec:	6963      	ldrpl	r3, [r4, #20]
 8003eee:	60a3      	str	r3, [r4, #8]
 8003ef0:	e7f2      	b.n	8003ed8 <__swsetup_r+0xac>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	e7f7      	b.n	8003ee6 <__swsetup_r+0xba>
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	080043d8 	.word	0x080043d8
 8003f00:	080043f8 	.word	0x080043f8
 8003f04:	080043b8 	.word	0x080043b8

08003f08 <_close_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4c06      	ldr	r4, [pc, #24]	; (8003f24 <_close_r+0x1c>)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4605      	mov	r5, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	f000 f9b4 	bl	8004280 <_close>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d102      	bne.n	8003f22 <_close_r+0x1a>
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	b103      	cbz	r3, 8003f22 <_close_r+0x1a>
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	20000ef8 	.word	0x20000ef8

08003f28 <__sflush_r>:
 8003f28:	898a      	ldrh	r2, [r1, #12]
 8003f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2e:	4605      	mov	r5, r0
 8003f30:	0710      	lsls	r0, r2, #28
 8003f32:	460c      	mov	r4, r1
 8003f34:	d45a      	bmi.n	8003fec <__sflush_r+0xc4>
 8003f36:	684b      	ldr	r3, [r1, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dc05      	bgt.n	8003f48 <__sflush_r+0x20>
 8003f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dc02      	bgt.n	8003f48 <__sflush_r+0x20>
 8003f42:	2000      	movs	r0, #0
 8003f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	d0f9      	beq.n	8003f42 <__sflush_r+0x1a>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f54:	682f      	ldr	r7, [r5, #0]
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	d033      	beq.n	8003fc2 <__sflush_r+0x9a>
 8003f5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	075a      	lsls	r2, r3, #29
 8003f60:	d505      	bpl.n	8003f6e <__sflush_r+0x46>
 8003f62:	6863      	ldr	r3, [r4, #4]
 8003f64:	1ac0      	subs	r0, r0, r3
 8003f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f68:	b10b      	cbz	r3, 8003f6e <__sflush_r+0x46>
 8003f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f6c:	1ac0      	subs	r0, r0, r3
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4602      	mov	r2, r0
 8003f72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f74:	6a21      	ldr	r1, [r4, #32]
 8003f76:	4628      	mov	r0, r5
 8003f78:	47b0      	blx	r6
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	d106      	bne.n	8003f8e <__sflush_r+0x66>
 8003f80:	6829      	ldr	r1, [r5, #0]
 8003f82:	291d      	cmp	r1, #29
 8003f84:	d84b      	bhi.n	800401e <__sflush_r+0xf6>
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <__sflush_r+0x10c>)
 8003f88:	40ca      	lsrs	r2, r1
 8003f8a:	07d6      	lsls	r6, r2, #31
 8003f8c:	d547      	bpl.n	800401e <__sflush_r+0xf6>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	6062      	str	r2, [r4, #4]
 8003f92:	04d9      	lsls	r1, r3, #19
 8003f94:	6922      	ldr	r2, [r4, #16]
 8003f96:	6022      	str	r2, [r4, #0]
 8003f98:	d504      	bpl.n	8003fa4 <__sflush_r+0x7c>
 8003f9a:	1c42      	adds	r2, r0, #1
 8003f9c:	d101      	bne.n	8003fa2 <__sflush_r+0x7a>
 8003f9e:	682b      	ldr	r3, [r5, #0]
 8003fa0:	b903      	cbnz	r3, 8003fa4 <__sflush_r+0x7c>
 8003fa2:	6560      	str	r0, [r4, #84]	; 0x54
 8003fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fa6:	602f      	str	r7, [r5, #0]
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	d0ca      	beq.n	8003f42 <__sflush_r+0x1a>
 8003fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	d002      	beq.n	8003fba <__sflush_r+0x92>
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f000 f8e1 	bl	800417c <_free_r>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	6360      	str	r0, [r4, #52]	; 0x34
 8003fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc2:	6a21      	ldr	r1, [r4, #32]
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	47b0      	blx	r6
 8003fca:	1c41      	adds	r1, r0, #1
 8003fcc:	d1c6      	bne.n	8003f5c <__sflush_r+0x34>
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0c3      	beq.n	8003f5c <__sflush_r+0x34>
 8003fd4:	2b1d      	cmp	r3, #29
 8003fd6:	d001      	beq.n	8003fdc <__sflush_r+0xb4>
 8003fd8:	2b16      	cmp	r3, #22
 8003fda:	d101      	bne.n	8003fe0 <__sflush_r+0xb8>
 8003fdc:	602f      	str	r7, [r5, #0]
 8003fde:	e7b0      	b.n	8003f42 <__sflush_r+0x1a>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fec:	690f      	ldr	r7, [r1, #16]
 8003fee:	2f00      	cmp	r7, #0
 8003ff0:	d0a7      	beq.n	8003f42 <__sflush_r+0x1a>
 8003ff2:	0793      	lsls	r3, r2, #30
 8003ff4:	680e      	ldr	r6, [r1, #0]
 8003ff6:	bf08      	it	eq
 8003ff8:	694b      	ldreq	r3, [r1, #20]
 8003ffa:	600f      	str	r7, [r1, #0]
 8003ffc:	bf18      	it	ne
 8003ffe:	2300      	movne	r3, #0
 8004000:	eba6 0807 	sub.w	r8, r6, r7
 8004004:	608b      	str	r3, [r1, #8]
 8004006:	f1b8 0f00 	cmp.w	r8, #0
 800400a:	dd9a      	ble.n	8003f42 <__sflush_r+0x1a>
 800400c:	4643      	mov	r3, r8
 800400e:	463a      	mov	r2, r7
 8004010:	6a21      	ldr	r1, [r4, #32]
 8004012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004014:	4628      	mov	r0, r5
 8004016:	47b0      	blx	r6
 8004018:	2800      	cmp	r0, #0
 800401a:	dc07      	bgt.n	800402c <__sflush_r+0x104>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800402c:	4407      	add	r7, r0
 800402e:	eba8 0800 	sub.w	r8, r8, r0
 8004032:	e7e8      	b.n	8004006 <__sflush_r+0xde>
 8004034:	20400001 	.word	0x20400001

08004038 <_fflush_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	690b      	ldr	r3, [r1, #16]
 800403c:	4605      	mov	r5, r0
 800403e:	460c      	mov	r4, r1
 8004040:	b1db      	cbz	r3, 800407a <_fflush_r+0x42>
 8004042:	b118      	cbz	r0, 800404c <_fflush_r+0x14>
 8004044:	6983      	ldr	r3, [r0, #24]
 8004046:	b90b      	cbnz	r3, 800404c <_fflush_r+0x14>
 8004048:	f7ff fa72 	bl	8003530 <__sinit>
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <_fflush_r+0x48>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d109      	bne.n	8004066 <_fflush_r+0x2e>
 8004052:	686c      	ldr	r4, [r5, #4]
 8004054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004058:	b17b      	cbz	r3, 800407a <_fflush_r+0x42>
 800405a:	4621      	mov	r1, r4
 800405c:	4628      	mov	r0, r5
 800405e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004062:	f7ff bf61 	b.w	8003f28 <__sflush_r>
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <_fflush_r+0x4c>)
 8004068:	429c      	cmp	r4, r3
 800406a:	d101      	bne.n	8004070 <_fflush_r+0x38>
 800406c:	68ac      	ldr	r4, [r5, #8]
 800406e:	e7f1      	b.n	8004054 <_fflush_r+0x1c>
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <_fflush_r+0x50>)
 8004072:	429c      	cmp	r4, r3
 8004074:	bf08      	it	eq
 8004076:	68ec      	ldreq	r4, [r5, #12]
 8004078:	e7ec      	b.n	8004054 <_fflush_r+0x1c>
 800407a:	2000      	movs	r0, #0
 800407c:	bd38      	pop	{r3, r4, r5, pc}
 800407e:	bf00      	nop
 8004080:	080043d8 	.word	0x080043d8
 8004084:	080043f8 	.word	0x080043f8
 8004088:	080043b8 	.word	0x080043b8

0800408c <_lseek_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4c07      	ldr	r4, [pc, #28]	; (80040ac <_lseek_r+0x20>)
 8004090:	4605      	mov	r5, r0
 8004092:	4608      	mov	r0, r1
 8004094:	4611      	mov	r1, r2
 8004096:	2200      	movs	r2, #0
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f000 f908 	bl	80042b0 <_lseek>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_lseek_r+0x1e>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_lseek_r+0x1e>
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20000ef8 	.word	0x20000ef8

080040b0 <__swhatbuf_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	460e      	mov	r6, r1
 80040b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b8:	2900      	cmp	r1, #0
 80040ba:	b090      	sub	sp, #64	; 0x40
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	da07      	bge.n	80040d2 <__swhatbuf_r+0x22>
 80040c2:	2300      	movs	r3, #0
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	89b3      	ldrh	r3, [r6, #12]
 80040c8:	061a      	lsls	r2, r3, #24
 80040ca:	d410      	bmi.n	80040ee <__swhatbuf_r+0x3e>
 80040cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d0:	e00e      	b.n	80040f0 <__swhatbuf_r+0x40>
 80040d2:	aa01      	add	r2, sp, #4
 80040d4:	f000 f8b2 	bl	800423c <_fstat_r>
 80040d8:	2800      	cmp	r0, #0
 80040da:	dbf2      	blt.n	80040c2 <__swhatbuf_r+0x12>
 80040dc:	9a02      	ldr	r2, [sp, #8]
 80040de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040e6:	425a      	negs	r2, r3
 80040e8:	415a      	adcs	r2, r3
 80040ea:	602a      	str	r2, [r5, #0]
 80040ec:	e7ee      	b.n	80040cc <__swhatbuf_r+0x1c>
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	2000      	movs	r0, #0
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	b010      	add	sp, #64	; 0x40
 80040f6:	bd70      	pop	{r4, r5, r6, pc}

080040f8 <__smakebuf_r>:
 80040f8:	898b      	ldrh	r3, [r1, #12]
 80040fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040fc:	079d      	lsls	r5, r3, #30
 80040fe:	4606      	mov	r6, r0
 8004100:	460c      	mov	r4, r1
 8004102:	d507      	bpl.n	8004114 <__smakebuf_r+0x1c>
 8004104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	2301      	movs	r3, #1
 800410e:	6163      	str	r3, [r4, #20]
 8004110:	b002      	add	sp, #8
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	ab01      	add	r3, sp, #4
 8004116:	466a      	mov	r2, sp
 8004118:	f7ff ffca 	bl	80040b0 <__swhatbuf_r>
 800411c:	9900      	ldr	r1, [sp, #0]
 800411e:	4605      	mov	r5, r0
 8004120:	4630      	mov	r0, r6
 8004122:	f7ff fa97 	bl	8003654 <_malloc_r>
 8004126:	b948      	cbnz	r0, 800413c <__smakebuf_r+0x44>
 8004128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412c:	059a      	lsls	r2, r3, #22
 800412e:	d4ef      	bmi.n	8004110 <__smakebuf_r+0x18>
 8004130:	f023 0303 	bic.w	r3, r3, #3
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	81a3      	strh	r3, [r4, #12]
 800413a:	e7e3      	b.n	8004104 <__smakebuf_r+0xc>
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <__smakebuf_r+0x7c>)
 800413e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	6020      	str	r0, [r4, #0]
 8004144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	9b00      	ldr	r3, [sp, #0]
 800414c:	6163      	str	r3, [r4, #20]
 800414e:	9b01      	ldr	r3, [sp, #4]
 8004150:	6120      	str	r0, [r4, #16]
 8004152:	b15b      	cbz	r3, 800416c <__smakebuf_r+0x74>
 8004154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004158:	4630      	mov	r0, r6
 800415a:	f000 f881 	bl	8004260 <_isatty_r>
 800415e:	b128      	cbz	r0, 800416c <__smakebuf_r+0x74>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	431d      	orrs	r5, r3
 8004170:	81a5      	strh	r5, [r4, #12]
 8004172:	e7cd      	b.n	8004110 <__smakebuf_r+0x18>
 8004174:	080034b1 	.word	0x080034b1

08004178 <__malloc_lock>:
 8004178:	4770      	bx	lr

0800417a <__malloc_unlock>:
 800417a:	4770      	bx	lr

0800417c <_free_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4605      	mov	r5, r0
 8004180:	2900      	cmp	r1, #0
 8004182:	d045      	beq.n	8004210 <_free_r+0x94>
 8004184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004188:	1f0c      	subs	r4, r1, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	bfb8      	it	lt
 800418e:	18e4      	addlt	r4, r4, r3
 8004190:	f7ff fff2 	bl	8004178 <__malloc_lock>
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <_free_r+0x98>)
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	4610      	mov	r0, r2
 800419a:	b933      	cbnz	r3, 80041aa <_free_r+0x2e>
 800419c:	6063      	str	r3, [r4, #4]
 800419e:	6014      	str	r4, [r2, #0]
 80041a0:	4628      	mov	r0, r5
 80041a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a6:	f7ff bfe8 	b.w	800417a <__malloc_unlock>
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	d90c      	bls.n	80041c8 <_free_r+0x4c>
 80041ae:	6821      	ldr	r1, [r4, #0]
 80041b0:	1862      	adds	r2, r4, r1
 80041b2:	4293      	cmp	r3, r2
 80041b4:	bf04      	itt	eq
 80041b6:	681a      	ldreq	r2, [r3, #0]
 80041b8:	685b      	ldreq	r3, [r3, #4]
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	bf04      	itt	eq
 80041be:	1852      	addeq	r2, r2, r1
 80041c0:	6022      	streq	r2, [r4, #0]
 80041c2:	6004      	str	r4, [r0, #0]
 80041c4:	e7ec      	b.n	80041a0 <_free_r+0x24>
 80041c6:	4613      	mov	r3, r2
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	b10a      	cbz	r2, 80041d0 <_free_r+0x54>
 80041cc:	42a2      	cmp	r2, r4
 80041ce:	d9fa      	bls.n	80041c6 <_free_r+0x4a>
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	1858      	adds	r0, r3, r1
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d10b      	bne.n	80041f0 <_free_r+0x74>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	4401      	add	r1, r0
 80041dc:	1858      	adds	r0, r3, r1
 80041de:	4282      	cmp	r2, r0
 80041e0:	6019      	str	r1, [r3, #0]
 80041e2:	d1dd      	bne.n	80041a0 <_free_r+0x24>
 80041e4:	6810      	ldr	r0, [r2, #0]
 80041e6:	6852      	ldr	r2, [r2, #4]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	4401      	add	r1, r0
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	e7d7      	b.n	80041a0 <_free_r+0x24>
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x7c>
 80041f2:	230c      	movs	r3, #12
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	e7d3      	b.n	80041a0 <_free_r+0x24>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	1821      	adds	r1, r4, r0
 80041fc:	428a      	cmp	r2, r1
 80041fe:	bf04      	itt	eq
 8004200:	6811      	ldreq	r1, [r2, #0]
 8004202:	6852      	ldreq	r2, [r2, #4]
 8004204:	6062      	str	r2, [r4, #4]
 8004206:	bf04      	itt	eq
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	605c      	str	r4, [r3, #4]
 800420e:	e7c7      	b.n	80041a0 <_free_r+0x24>
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	20000dd8 	.word	0x20000dd8

08004218 <_read_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4c07      	ldr	r4, [pc, #28]	; (8004238 <_read_r+0x20>)
 800421c:	4605      	mov	r5, r0
 800421e:	4608      	mov	r0, r1
 8004220:	4611      	mov	r1, r2
 8004222:	2200      	movs	r2, #0
 8004224:	6022      	str	r2, [r4, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f000 f84a 	bl	80042c0 <_read>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_read_r+0x1e>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	b103      	cbz	r3, 8004236 <_read_r+0x1e>
 8004234:	602b      	str	r3, [r5, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	20000ef8 	.word	0x20000ef8

0800423c <_fstat_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4c07      	ldr	r4, [pc, #28]	; (800425c <_fstat_r+0x20>)
 8004240:	2300      	movs	r3, #0
 8004242:	4605      	mov	r5, r0
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	f000 f821 	bl	8004290 <_fstat>
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	d102      	bne.n	8004258 <_fstat_r+0x1c>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	b103      	cbz	r3, 8004258 <_fstat_r+0x1c>
 8004256:	602b      	str	r3, [r5, #0]
 8004258:	bd38      	pop	{r3, r4, r5, pc}
 800425a:	bf00      	nop
 800425c:	20000ef8 	.word	0x20000ef8

08004260 <_isatty_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4c06      	ldr	r4, [pc, #24]	; (800427c <_isatty_r+0x1c>)
 8004264:	2300      	movs	r3, #0
 8004266:	4605      	mov	r5, r0
 8004268:	4608      	mov	r0, r1
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	f000 f818 	bl	80042a0 <_isatty>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d102      	bne.n	800427a <_isatty_r+0x1a>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	b103      	cbz	r3, 800427a <_isatty_r+0x1a>
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	20000ef8 	.word	0x20000ef8

08004280 <_close>:
 8004280:	4b02      	ldr	r3, [pc, #8]	; (800428c <_close+0xc>)
 8004282:	2258      	movs	r2, #88	; 0x58
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	f04f 30ff 	mov.w	r0, #4294967295
 800428a:	4770      	bx	lr
 800428c:	20000ef8 	.word	0x20000ef8

08004290 <_fstat>:
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <_fstat+0xc>)
 8004292:	2258      	movs	r2, #88	; 0x58
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	4770      	bx	lr
 800429c:	20000ef8 	.word	0x20000ef8

080042a0 <_isatty>:
 80042a0:	4b02      	ldr	r3, [pc, #8]	; (80042ac <_isatty+0xc>)
 80042a2:	2258      	movs	r2, #88	; 0x58
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	2000      	movs	r0, #0
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000ef8 	.word	0x20000ef8

080042b0 <_lseek>:
 80042b0:	4b02      	ldr	r3, [pc, #8]	; (80042bc <_lseek+0xc>)
 80042b2:	2258      	movs	r2, #88	; 0x58
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	4770      	bx	lr
 80042bc:	20000ef8 	.word	0x20000ef8

080042c0 <_read>:
 80042c0:	4b02      	ldr	r3, [pc, #8]	; (80042cc <_read+0xc>)
 80042c2:	2258      	movs	r2, #88	; 0x58
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ca:	4770      	bx	lr
 80042cc:	20000ef8 	.word	0x20000ef8

080042d0 <_sbrk>:
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <_sbrk+0x14>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	4602      	mov	r2, r0
 80042d6:	b909      	cbnz	r1, 80042dc <_sbrk+0xc>
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <_sbrk+0x18>)
 80042da:	6019      	str	r1, [r3, #0]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	4402      	add	r2, r0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	4770      	bx	lr
 80042e4:	20000de0 	.word	0x20000de0
 80042e8:	20000efc 	.word	0x20000efc

080042ec <_write>:
 80042ec:	4b02      	ldr	r3, [pc, #8]	; (80042f8 <_write+0xc>)
 80042ee:	2258      	movs	r2, #88	; 0x58
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f04f 30ff 	mov.w	r0, #4294967295
 80042f6:	4770      	bx	lr
 80042f8:	20000ef8 	.word	0x20000ef8

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
