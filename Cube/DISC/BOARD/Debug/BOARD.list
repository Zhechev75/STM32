
BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080041d8  080041d8  000141d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08004220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          000007b8  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000848  20000848  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027225  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000048a8  00000000  00000000  000472e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d7de  00000000  00000000  0004bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00059370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001530  00000000  00000000  0005a310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000993d  00000000  00000000  0005b840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000064bc  00000000  00000000  0006517d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006b639  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002fe8  00000000  00000000  0006b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041c0 	.word	0x080041c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080041c0 	.word	0x080041c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <i2c1_Transmit>:
{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14);
}

void i2c1_Transmit(uint8_t i2cData)
{
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	aa04      	add	r2, sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, 0x3F << 1, &i2cData, 1, 100);
 80004dc:	2364      	movs	r3, #100	; 0x64
{
 80004de:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Master_Transmit(&hi2c1, 0x3F << 1, &i2cData, 1, 100);
 80004e2:	217e      	movs	r1, #126	; 0x7e
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <i2c1_Transmit+0x28>)
 80004e8:	2301      	movs	r3, #1
 80004ea:	f001 fb2d 	bl	8001b48 <HAL_I2C_Master_Transmit>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <i2c1_Transmit+0x2c>)
 80004f4:	f000 fda3 	bl	800103e <HAL_GPIO_TogglePin>
}
 80004f8:	b005      	add	sp, #20
 80004fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80004fe:	bf00      	nop
 8000500:	200000bc 	.word	0x200000bc
 8000504:	40020c00 	.word	0x40020c00

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b510      	push	{r4, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <SystemClock_Config+0xa8>)
 800050e:	2100      	movs	r1, #0
 8000510:	9101      	str	r1, [sp, #4]
 8000512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000514:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000518:	641a      	str	r2, [r3, #64]	; 0x40
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <SystemClock_Config+0xac>)
 8000526:	9102      	str	r1, [sp, #8]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053a:	2301      	movs	r3, #1
 800053c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000542:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000548:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800054a:	2308      	movs	r3, #8
 800054c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800054e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000554:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000558:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f002 f890 	bl	8002684 <HAL_RCC_OscConfig>
 8000564:	b100      	cbz	r0, 8000568 <SystemClock_Config+0x60>
 8000566:	e7fe      	b.n	8000566 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800056c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000572:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000574:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800057a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800057e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000580:	f002 fa30 	bl	80029e4 <HAL_RCC_ClockConfig>
 8000584:	4604      	mov	r4, r0
 8000586:	b100      	cbz	r0, 800058a <SystemClock_Config+0x82>
 8000588:	e7fe      	b.n	8000588 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800058a:	f002 fac5 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 800058e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000592:	fbb0 f0f3 	udiv	r0, r0, r3
 8000596:	f000 fc33 	bl	8000e00 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800059a:	2004      	movs	r0, #4
 800059c:	f000 fc46 	bl	8000e2c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80005a0:	4622      	mov	r2, r4
 80005a2:	4621      	mov	r1, r4
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 fbea 	bl	8000d80 <HAL_NVIC_SetPriority>
}
 80005ac:	b014      	add	sp, #80	; 0x50
 80005ae:	bd10      	pop	{r4, pc}
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <main>:
{
 80005b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005bc:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	2400      	movs	r4, #0
  HAL_Init();
 80005c0:	f000 fb8c 	bl	8000cdc <HAL_Init>
  SystemClock_Config();
 80005c4:	f7ff ffa0 	bl	8000508 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c8:	4b8b      	ldr	r3, [pc, #556]	; (80007f8 <main+0x240>)
 80005ca:	9401      	str	r4, [sp, #4]
 80005cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005ce:	488b      	ldr	r0, [pc, #556]	; (80007fc <main+0x244>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005d0:	4f8b      	ldr	r7, [pc, #556]	; (8000800 <main+0x248>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	f042 0210 	orr.w	r2, r2, #16
 80005d6:	631a      	str	r2, [r3, #48]	; 0x30
 80005d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005da:	f002 0210 	and.w	r2, r2, #16
 80005de:	9201      	str	r2, [sp, #4]
 80005e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	9402      	str	r4, [sp, #8]
 80005e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e6:	f042 0204 	orr.w	r2, r2, #4
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
 80005ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ee:	f002 0204 	and.w	r2, r2, #4
 80005f2:	9202      	str	r2, [sp, #8]
 80005f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	9403      	str	r4, [sp, #12]
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
 8000600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000602:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000606:	9203      	str	r2, [sp, #12]
 8000608:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	9404      	str	r4, [sp, #16]
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	f042 0201 	orr.w	r2, r2, #1
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
 8000614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000616:	f002 0201 	and.w	r2, r2, #1
 800061a:	9204      	str	r2, [sp, #16]
 800061c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	9405      	str	r4, [sp, #20]
 8000620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000622:	f042 0202 	orr.w	r2, r2, #2
 8000626:	631a      	str	r2, [r3, #48]	; 0x30
 8000628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062a:	f002 0202 	and.w	r2, r2, #2
 800062e:	9205      	str	r2, [sp, #20]
 8000630:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	9406      	str	r4, [sp, #24]
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f042 0208 	orr.w	r2, r2, #8
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000642:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000646:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800064a:	f000 fcf3 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	4611      	mov	r1, r2
 8000652:	486c      	ldr	r0, [pc, #432]	; (8000804 <main+0x24c>)
 8000654:	f000 fcee 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000658:	4622      	mov	r2, r4
 800065a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800065e:	486a      	ldr	r0, [pc, #424]	; (8000808 <main+0x250>)
 8000660:	f000 fce8 	bl	8001034 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000666:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000668:	a907      	add	r1, sp, #28
 800066a:	4864      	ldr	r0, [pc, #400]	; (80007fc <main+0x244>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800066c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000674:	f000 fbfe 	bl	8000e74 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000678:	a907      	add	r1, sp, #28
 800067a:	4862      	ldr	r0, [pc, #392]	; (8000804 <main+0x24c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000680:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000684:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000688:	f000 fbf4 	bl	8000e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800068c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800068e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000692:	485c      	ldr	r0, [pc, #368]	; (8000804 <main+0x24c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800069a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069e:	f000 fbe9 	bl	8000e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	a907      	add	r1, sp, #28
 80006a4:	4859      	ldr	r0, [pc, #356]	; (800080c <main+0x254>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	9409      	str	r4, [sp, #36]	; 0x24
  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a8:	f04f 0806 	mov.w	r8, #6
  GPIO_InitStruct.Pin = B1_Pin;
 80006ac:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f000 fbe0 	bl	8000e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006b4:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006b6:	a907      	add	r1, sp, #28
 80006b8:	4854      	ldr	r0, [pc, #336]	; (800080c <main+0x254>)
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006c2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f000 fbd5 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006ca:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	a907      	add	r1, sp, #28
 80006ce:	4850      	ldr	r0, [pc, #320]	; (8000810 <main+0x258>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f000 fbcd 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006de:	a907      	add	r1, sp, #28
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <main+0x258>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ea:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f000 fbc1 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006f2:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f6:	a907      	add	r1, sp, #28
 80006f8:	4843      	ldr	r0, [pc, #268]	; (8000808 <main+0x250>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000702:	f000 fbb7 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000706:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070a:	a907      	add	r1, sp, #28
 800070c:	483d      	ldr	r0, [pc, #244]	; (8000804 <main+0x24c>)
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800070e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000716:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f000 fbab 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800071e:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000720:	a907      	add	r1, sp, #28
 8000722:	4839      	ldr	r0, [pc, #228]	; (8000808 <main+0x250>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000724:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800072a:	f000 fba3 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800072e:	a907      	add	r1, sp, #28
 8000730:	4832      	ldr	r0, [pc, #200]	; (80007fc <main+0x244>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000734:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000736:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000738:	f000 fb9c 	bl	8000e74 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800073c:	4835      	ldr	r0, [pc, #212]	; (8000814 <main+0x25c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4a36      	ldr	r2, [pc, #216]	; (8000818 <main+0x260>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000740:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000746:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800074e:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000750:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000752:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000754:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000758:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000760:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000762:	f002 f9ef 	bl	8002b44 <HAL_SPI_Init>
 8000766:	4604      	mov	r4, r0
 8000768:	b100      	cbz	r0, 800076c <main+0x1b4>
 800076a:	e7fe      	b.n	800076a <main+0x1b2>
  MX_USB_HOST_Init();
 800076c:	f000 f97e 	bl	8000a6c <MX_USB_HOST_Init>
  hi2c1.Instance = I2C1;
 8000770:	482a      	ldr	r0, [pc, #168]	; (800081c <main+0x264>)
  hi2c1.Init.ClockSpeed = 100000;
 8000772:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <main+0x268>)
 8000774:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <main+0x26c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000776:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000778:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	f001 f96e 	bl	8001a6c <HAL_I2C_Init>
 8000790:	b100      	cbz	r0, 8000794 <main+0x1dc>
 8000792:	e7fe      	b.n	8000792 <main+0x1da>
  htim6.Instance = TIM6;
 8000794:	4c24      	ldr	r4, [pc, #144]	; (8000828 <main+0x270>)
  htim6.Init.Prescaler = 42000;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <main+0x274>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	60a0      	str	r0, [r4, #8]
  htim6.Init.Prescaler = 42000;
 800079a:	f24a 4610 	movw	r6, #42000	; 0xa410
 800079e:	e884 0048 	stmia.w	r4, {r3, r6}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007a2:	4620      	mov	r0, r4
  htim6.Init.Period = 1000;
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007aa:	f002 fb13 	bl	8002dd4 <HAL_TIM_Base_Init>
 80007ae:	b100      	cbz	r0, 80007b2 <main+0x1fa>
 80007b0:	e7fe      	b.n	80007b0 <main+0x1f8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007b6:	a907      	add	r1, sp, #28
 80007b8:	4620      	mov	r0, r4
 80007ba:	f002 fb25 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	b100      	cbz	r0, 80007c2 <main+0x20a>
 80007c0:	e7fe      	b.n	80007c0 <main+0x208>
  htim7.Instance = TIM7;
 80007c2:	4c1b      	ldr	r4, [pc, #108]	; (8000830 <main+0x278>)
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <main+0x27c>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007c8:	4620      	mov	r0, r4
  htim7.Init.Prescaler = 42000;
 80007ca:	e884 0048 	stmia.w	r4, {r3, r6}
  htim7.Init.Period = 2;
 80007ce:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007d0:	f002 fb00 	bl	8002dd4 <HAL_TIM_Base_Init>
 80007d4:	b100      	cbz	r0, 80007d8 <main+0x220>
 80007d6:	e7fe      	b.n	80007d6 <main+0x21e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007dc:	a907      	add	r1, sp, #28
 80007de:	4620      	mov	r0, r4
 80007e0:	f002 fb12 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	b100      	cbz	r0, 80007e8 <main+0x230>
 80007e6:	e7fe      	b.n	80007e6 <main+0x22e>
	  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f000 faa2 	bl	8000d34 <HAL_Delay>
	  i2c1_Transmit(Send);
 80007f0:	20aa      	movs	r0, #170	; 0xaa
 80007f2:	f7ff fe71 	bl	80004d8 <i2c1_Transmit>
 80007f6:	e7f7      	b.n	80007e8 <main+0x230>
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021000 	.word	0x40021000
 8000800:	10120000 	.word	0x10120000
 8000804:	40020800 	.word	0x40020800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40020000 	.word	0x40020000
 8000810:	40020400 	.word	0x40020400
 8000814:	2000014c 	.word	0x2000014c
 8000818:	40013000 	.word	0x40013000
 800081c:	200000bc 	.word	0x200000bc
 8000820:	40005400 	.word	0x40005400
 8000824:	000186a0 	.word	0x000186a0
 8000828:	20000110 	.word	0x20000110
 800082c:	40001000 	.word	0x40001000
 8000830:	200001a4 	.word	0x200001a4
 8000834:	40001400 	.word	0x40001400

08000838 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000838:	e7fe      	b.n	8000838 <_Error_Handler>

0800083a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800083c:	2007      	movs	r0, #7
 800083e:	f000 fa8d 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	4611      	mov	r1, r2
 8000846:	f06f 000b 	mvn.w	r0, #11
 800084a:	f000 fa99 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	4611      	mov	r1, r2
 8000852:	f06f 000a 	mvn.w	r0, #10
 8000856:	f000 fa93 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	4611      	mov	r1, r2
 800085e:	f06f 0009 	mvn.w	r0, #9
 8000862:	f000 fa8d 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	4611      	mov	r1, r2
 800086a:	f06f 0004 	mvn.w	r0, #4
 800086e:	f000 fa87 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	4611      	mov	r1, r2
 8000876:	f06f 0003 	mvn.w	r0, #3
 800087a:	f000 fa81 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	4611      	mov	r1, r2
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f000 fa7b 	bl	8000d80 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	4611      	mov	r1, r2
 800088e:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000896:	f000 ba73 	b.w	8000d80 <HAL_NVIC_SetPriority>
	...

0800089c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800089c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800089e:	6802      	ldr	r2, [r0, #0]
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_I2C_MspInit+0x64>)
 80008a2:	429a      	cmp	r2, r3
{
 80008a4:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 80008a6:	d129      	bne.n	80008fc <HAL_I2C_MspInit+0x60>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a8:	23c0      	movs	r3, #192	; 0xc0
 80008aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ac:	2312      	movs	r3, #18
 80008ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b4:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	eb0d 0103 	add.w	r1, sp, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f000 fad7 	bl	8000e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_I2C_MspInit+0x6c>)
 80008c8:	9400      	str	r4, [sp, #0]
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80008d0:	641a      	str	r2, [r3, #64]	; 0x40
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008d8:	4622      	mov	r2, r4
 80008da:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008dc:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008de:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008e2:	f000 fa4d 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008e6:	201f      	movs	r0, #31
 80008e8:	f000 fa7e 	bl	8000de8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008ec:	2020      	movs	r0, #32
 80008ee:	4622      	mov	r2, r4
 80008f0:	4621      	mov	r1, r4
 80008f2:	f000 fa45 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008f6:	2020      	movs	r0, #32
 80008f8:	f000 fa76 	bl	8000de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008fc:	b006      	add	sp, #24
 80008fe:	bd10      	pop	{r4, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	40020400 	.word	0x40020400
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800090c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800090e:	6802      	ldr	r2, [r0, #0]
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_SPI_MspInit+0x40>)
 8000912:	429a      	cmp	r2, r3
 8000914:	d117      	bne.n	8000946 <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_SPI_MspInit+0x44>)
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000920:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000924:	6451      	str	r1, [r2, #68]	; 0x44
 8000926:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	9303      	str	r3, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800092a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800092e:	9200      	str	r2, [sp, #0]
 8000930:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000934:	22e0      	movs	r2, #224	; 0xe0
 8000936:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000938:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000940:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f000 fa97 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000946:	b007      	add	sp, #28
 8000948:	f85d fb04 	ldr.w	pc, [sp], #4
 800094c:	40013000 	.word	0x40013000
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000958:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_TIM_Base_MspInit+0x58>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d115      	bne.n	800098e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000962:	2200      	movs	r2, #0
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_TIM_Base_MspInit+0x5c>)
 8000966:	9200      	str	r2, [sp, #0]
 8000968:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800096a:	f041 0110 	orr.w	r1, r1, #16
 800096e:	6419      	str	r1, [r3, #64]	; 0x40
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000978:	2036      	movs	r0, #54	; 0x36
 800097a:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800097c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800097e:	f000 f9ff 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000982:	2036      	movs	r0, #54	; 0x36
 8000984:	f000 fa30 	bl	8000de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000988:	b003      	add	sp, #12
 800098a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_TIM_Base_MspInit+0x60>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d1f9      	bne.n	8000988 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_TIM_Base_MspInit+0x5c>)
 800099a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099c:	f042 0220 	orr.w	r2, r2, #32
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	9b01      	ldr	r3, [sp, #4]
}
 80009ac:	e7ec      	b.n	8000988 <HAL_TIM_Base_MspInit+0x30>
 80009ae:	bf00      	nop
 80009b0:	40001000 	.word	0x40001000
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40001400 	.word	0x40001400

080009bc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80009bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f9a7 	bl	8000d10 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80009c6:	f000 ba3e 	b.w	8000e46 <HAL_SYSTICK_IRQHandler>
	...

080009cc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009cc:	4801      	ldr	r0, [pc, #4]	; (80009d4 <I2C1_EV_IRQHandler+0x8>)
 80009ce:	f001 ba2f 	b.w	8001e30 <HAL_I2C_EV_IRQHandler>
 80009d2:	bf00      	nop
 80009d4:	200000bc 	.word	0x200000bc

080009d8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009d8:	4801      	ldr	r0, [pc, #4]	; (80009e0 <I2C1_ER_IRQHandler+0x8>)
 80009da:	f001 bd93 	b.w	8002504 <HAL_I2C_ER_IRQHandler>
 80009de:	bf00      	nop
 80009e0:	200000bc 	.word	0x200000bc

080009e4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e4:	4801      	ldr	r0, [pc, #4]	; (80009ec <TIM6_DAC_IRQHandler+0x8>)
 80009e6:	f002 b8ef 	b.w	8002bc8 <HAL_TIM_IRQHandler>
 80009ea:	bf00      	nop
 80009ec:	20000110 	.word	0x20000110

080009f0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009f0:	4801      	ldr	r0, [pc, #4]	; (80009f8 <OTG_FS_IRQHandler+0x8>)
 80009f2:	f000 bc27 	b.w	8001244 <HAL_HCD_IRQHandler>
 80009f6:	bf00      	nop
 80009f8:	200005a8 	.word	0x200005a8

080009fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	490f      	ldr	r1, [pc, #60]	; (8000a3c <SystemInit+0x40>)
 80009fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <SystemInit+0x44>)
 8000a0c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a0e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000a10:	f042 0201 	orr.w	r2, r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a16:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a22:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <SystemInit+0x48>)
 8000a26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a2e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a30:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a36:	608b      	str	r3, [r1, #8]
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	24003010 	.word	0x24003010

08000a48 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8000a48:	2904      	cmp	r1, #4
 8000a4a:	d00a      	beq.n	8000a62 <USBH_UserProcess+0x1a>
 8000a4c:	2905      	cmp	r1, #5
 8000a4e:	d004      	beq.n	8000a5a <USBH_UserProcess+0x12>
 8000a50:	2902      	cmp	r1, #2
 8000a52:	d105      	bne.n	8000a60 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <USBH_UserProcess+0x20>)
 8000a56:	7019      	strb	r1, [r3, #0]
  break;
 8000a58:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8000a5a:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <USBH_UserProcess+0x20>)
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	2201      	movs	r2, #1
 8000a64:	e7fa      	b.n	8000a5c <USBH_UserProcess+0x14>
 8000a66:	bf00      	nop
 8000a68:	200000ac 	.word	0x200000ac

08000a6c <MX_USB_HOST_Init>:
{
 8000a6c:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8000a6e:	4c07      	ldr	r4, [pc, #28]	; (8000a8c <MX_USB_HOST_Init+0x20>)
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <MX_USB_HOST_Init+0x24>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	4620      	mov	r0, r4
 8000a76:	f003 f883 	bl	8003b80 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	4905      	ldr	r1, [pc, #20]	; (8000a94 <MX_USB_HOST_Init+0x28>)
 8000a7e:	f003 f896 	bl	8003bae <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 8000a82:	4620      	mov	r0, r4
}
 8000a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8000a88:	f003 b8c4 	b.w	8003c14 <USBH_Start>
 8000a8c:	200001e0 	.word	0x200001e0
 8000a90:	08000a49 	.word	0x08000a49
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8000a98:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8000a9a:	6803      	ldr	r3, [r0, #0]
 8000a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8000aa0:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 8000aa2:	d12d      	bne.n	8000b00 <HAL_HCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	a901      	add	r1, sp, #4
 8000aac:	4815      	ldr	r0, [pc, #84]	; (8000b04 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000aae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f000 f9de 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ab8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000abc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac4:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f000 f9d1 	bl	8000e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_HCD_MspInit+0x70>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ada:	635a      	str	r2, [r3, #52]	; 0x34
 8000adc:	9400      	str	r4, [sp, #0]
 8000ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ae4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aec:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000aee:	2043      	movs	r0, #67	; 0x43
 8000af0:	4622      	mov	r2, r4
 8000af2:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000af4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000af6:	f000 f943 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000afa:	2043      	movs	r0, #67	; 0x43
 8000afc:	f000 f974 	bl	8000de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000b00:	b006      	add	sp, #24
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8000b0c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8000b10:	f003 b88d 	b.w	8003c2e <USBH_LL_IncTimer>

08000b14 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8000b14:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8000b18:	f003 b897 	b.w	8003c4a <USBH_LL_Connect>

08000b1c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8000b1c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8000b20:	f003 b8a6 	b.w	8003c70 <USBH_LL_Disconnect>

08000b24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8000b24:	4770      	bx	lr
	...

08000b28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8000b28:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8000b2a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000b2e:	2b01      	cmp	r3, #1
{
 8000b30:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8000b32:	d11e      	bne.n	8000b72 <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 8000b36:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b3e:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000b40:	2308      	movs	r3, #8
 8000b42:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000b48:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b4a:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8000b4c:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b50:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000b52:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b54:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000b56:	f000 fab9 	bl	80010cc <HAL_HCD_Init>
 8000b5a:	b118      	cbz	r0, 8000b64 <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b5c:	21e2      	movs	r1, #226	; 0xe2
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <USBH_LL_Init+0x54>)
 8000b60:	f7ff fe6a 	bl	8000838 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <USBH_LL_Init+0x50>)
 8000b66:	f000 feae 	bl	80018c6 <HAL_HCD_GetCurrentFrame>
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f003 f85b 	bl	8003c28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8000b72:	2000      	movs	r0, #0
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	bf00      	nop
 8000b78:	200005a8 	.word	0x200005a8
 8000b7c:	080041f4 	.word	0x080041f4

08000b80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8000b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8000b82:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000b86:	f000 fe6b 	bl	8001860 <HAL_HCD_Start>
 8000b8a:	2803      	cmp	r0, #3
 8000b8c:	bf9a      	itte	ls
 8000b8e:	4b02      	ldrls	r3, [pc, #8]	; (8000b98 <USBH_LL_Start+0x18>)
 8000b90:	5c18      	ldrbls	r0, [r3, r0]
 8000b92:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8000b94:	bd08      	pop	{r3, pc}
 8000b96:	bf00      	nop
 8000b98:	080041f0 	.word	0x080041f0

08000b9c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8000b9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8000b9e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000ba2:	f000 fe73 	bl	800188c <HAL_HCD_Stop>
 8000ba6:	2803      	cmp	r0, #3
 8000ba8:	bf9a      	itte	ls
 8000baa:	4b02      	ldrls	r3, [pc, #8]	; (8000bb4 <USBH_LL_Stop+0x18>)
 8000bac:	5c18      	ldrbls	r0, [r3, r0]
 8000bae:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8000bb0:	bd08      	pop	{r3, pc}
 8000bb2:	bf00      	nop
 8000bb4:	080041f0 	.word	0x080041f0

08000bb8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8000bb8:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000bbc:	f000 be7e 	b.w	80018bc <HAL_HCD_HC_GetXferCount>

08000bc0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8000bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8000bc2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000bc6:	9402      	str	r4, [sp, #8]
 8000bc8:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8000bcc:	9401      	str	r4, [sp, #4]
 8000bce:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000bd2:	9400      	str	r4, [sp, #0]
 8000bd4:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000bd8:	f000 fa35 	bl	8001046 <HAL_HCD_HC_Init>
 8000bdc:	2803      	cmp	r0, #3
 8000bde:	bf9a      	itte	ls
 8000be0:	4b02      	ldrls	r3, [pc, #8]	; (8000bec <USBH_LL_OpenPipe+0x2c>)
 8000be2:	5c18      	ldrbls	r0, [r3, r0]
 8000be4:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8000be6:	b004      	add	sp, #16
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	bf00      	nop
 8000bec:	080041f0 	.word	0x080041f0

08000bf0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8000bf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8000bf2:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000bf6:	f000 fa57 	bl	80010a8 <HAL_HCD_HC_Halt>
 8000bfa:	2803      	cmp	r0, #3
 8000bfc:	bf9a      	itte	ls
 8000bfe:	4b02      	ldrls	r3, [pc, #8]	; (8000c08 <USBH_LL_ClosePipe+0x18>)
 8000c00:	5c18      	ldrbls	r0, [r3, r0]
 8000c02:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8000c04:	bd08      	pop	{r3, pc}
 8000c06:	bf00      	nop
 8000c08:	080041f0 	.word	0x080041f0

08000c0c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8000c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8000c0e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8000c12:	9403      	str	r4, [sp, #12]
 8000c14:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000c18:	9402      	str	r4, [sp, #8]
 8000c1a:	9c07      	ldr	r4, [sp, #28]
 8000c1c:	9401      	str	r4, [sp, #4]
 8000c1e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000c22:	9400      	str	r4, [sp, #0]
 8000c24:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000c28:	f000 fa8c 	bl	8001144 <HAL_HCD_HC_SubmitRequest>
 8000c2c:	2803      	cmp	r0, #3
 8000c2e:	bf9a      	itte	ls
 8000c30:	4b02      	ldrls	r3, [pc, #8]	; (8000c3c <USBH_LL_SubmitURB+0x30>)
 8000c32:	5c18      	ldrbls	r0, [r3, r0]
 8000c34:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8000c36:	b004      	add	sp, #16
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	bf00      	nop
 8000c3c:	080041f0 	.word	0x080041f0

08000c40 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8000c40:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8000c44:	f000 be34 	b.w	80018b0 <HAL_HCD_HC_GetURBState>

08000c48 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8000c48:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8000c4a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d102      	bne.n	8000c58 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8000c52:	4608      	mov	r0, r1
 8000c54:	f000 f814 	bl	8000c80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8000c58:	20c8      	movs	r0, #200	; 0xc8
 8000c5a:	f000 f86b 	bl	8000d34 <HAL_Delay>
  return USBH_OK;
}
 8000c5e:	2000      	movs	r0, #0
 8000c60:	bd08      	pop	{r3, pc}

08000c62 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8000c62:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 8000c66:	2328      	movs	r3, #40	; 0x28
 8000c68:	fb03 0101 	mla	r1, r3, r1, r0
 8000c6c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8000c70:	b11b      	cbz	r3, 8000c7a <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8000c72:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8000c7a:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8000c7e:	e7fa      	b.n	8000c76 <USBH_LL_SetToggle+0x14>

08000c80 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8000c80:	fab0 f280 	clz	r2, r0
 8000c84:	0952      	lsrs	r2, r2, #5
 8000c86:	2101      	movs	r1, #1
 8000c88:	4801      	ldr	r0, [pc, #4]	; (8000c90 <MX_DriverVbusFS+0x10>)
 8000c8a:	f000 b9d3 	b.w	8001034 <HAL_GPIO_WritePin>
 8000c8e:	bf00      	nop
 8000c90:	40020800 	.word	0x40020800

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_InitTick+0x3c>)
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_InitTick+0x40>)
{
 8000c9a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	7818      	ldrb	r0, [r3, #0]
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ca6:	6810      	ldr	r0, [r2, #0]
 8000ca8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cac:	f000 f8a8 	bl	8000e00 <HAL_SYSTICK_Config>
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	b958      	cbnz	r0, 8000ccc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	2d0f      	cmp	r5, #15
 8000cb6:	d809      	bhi.n	8000ccc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	4602      	mov	r2, r0
 8000cba:	4629      	mov	r1, r5
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f85e 	bl	8000d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <HAL_InitTick+0x44>)
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	601d      	str	r5, [r3, #0]
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ccc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000008 	.word	0x20000008

08000cdc <HAL_Init>:
{
 8000cdc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x30>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ce6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cf6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f82f 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ffc8 	bl	8000c94 <HAL_InitTick>
  HAL_MspInit();
 8000d04:	f7ff fd99 	bl	800083a <HAL_MspInit>
}
 8000d08:	2000      	movs	r0, #0
 8000d0a:	bd08      	pop	{r3, pc}
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x10>)
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_IncTick+0x14>)
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000840 	.word	0x20000840
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <HAL_GetTick+0x8>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000840 	.word	0x20000840

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff fff6 	bl	8000d28 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	bf1c      	itt	ne
 8000d40:	4b05      	ldrne	r3, [pc, #20]	; (8000d58 <HAL_Delay+0x24>)
 8000d42:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d46:	bf18      	it	ne
 8000d48:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	f7ff ffed 	bl	8000d28 <HAL_GetTick>
 8000d4e:	1b40      	subs	r0, r0, r5
 8000d50:	4284      	cmp	r4, r0
 8000d52:	d8fa      	bhi.n	8000d4a <HAL_Delay+0x16>
  {
  }
}
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d5e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d64:	041b      	lsls	r3, r3, #16
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d6c:	0200      	lsls	r0, r0, #8
 8000d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d76:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d78:	60d3      	str	r3, [r2, #12]
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b530      	push	{r4, r5, lr}
 8000d84:	68dc      	ldr	r4, [r3, #12]
 8000d86:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	bf28      	it	cs
 8000d94:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 0501 	mov.w	r5, #1
 8000d9c:	fa05 f303 	lsl.w	r3, r5, r3
 8000da0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da4:	bf8c      	ite	hi
 8000da6:	3c03      	subhi	r4, #3
 8000da8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000daa:	4019      	ands	r1, r3
 8000dac:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dae:	fa05 f404 	lsl.w	r4, r5, r4
 8000db2:	3c01      	subs	r4, #1
 8000db4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000db6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	ea42 0201 	orr.w	r2, r2, r1
 8000dbc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	bfaf      	iteee	ge
 8000dc2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	f000 000f 	andlt.w	r0, r0, #15
 8000dca:	4b06      	ldrlt	r3, [pc, #24]	; (8000de4 <HAL_NVIC_SetPriority+0x64>)
 8000dcc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	bfa5      	ittet	ge
 8000dd0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000dd4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ddc:	bd30      	pop	{r4, r5, pc}
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	e000ed14 	.word	0xe000ed14

08000de8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000de8:	0942      	lsrs	r2, r0, #5
 8000dea:	2301      	movs	r3, #1
 8000dec:	f000 001f 	and.w	r0, r0, #31
 8000df0:	fa03 f000 	lsl.w	r0, r3, r0
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <HAL_NVIC_EnableIRQ+0x14>)
 8000df6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	3801      	subs	r0, #1
 8000e02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e06:	d20a      	bcs.n	8000e1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	21f0      	movs	r1, #240	; 0xf0
 8000e10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e2e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e30:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e32:	bf0c      	ite	eq
 8000e34:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e38:	f022 0204 	bicne.w	r2, r2, #4
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4770      	bx	lr
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e44:	4770      	bx	lr

08000e46 <HAL_SYSTICK_IRQHandler>:
{
 8000e46:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e48:	f7ff fffc 	bl	8000e44 <HAL_SYSTICK_Callback>
 8000e4c:	bd08      	pop	{r3, pc}

08000e4e <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d003      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e5e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e60:	2305      	movs	r3, #5
 8000e62:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000e6e:	2000      	movs	r0, #0
}
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e78:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800102c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e80:	4a68      	ldr	r2, [pc, #416]	; (8001024 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e82:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001030 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e88:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e8a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e90:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e94:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e98:	45b6      	cmp	lr, r6
 8000e9a:	f040 80ae 	bne.w	8000ffa <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9e:	684c      	ldr	r4, [r1, #4]
 8000ea0:	f024 0710 	bic.w	r7, r4, #16
 8000ea4:	2f02      	cmp	r7, #2
 8000ea6:	d116      	bne.n	8000ed6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000eac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ebc:	f04f 0c0f 	mov.w	ip, #15
 8000ec0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ec4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	690d      	ldr	r5, [r1, #16]
 8000eca:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ece:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ed6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000edc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee0:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ee4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eee:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000efa:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efe:	d811      	bhi.n	8000f24 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000f00:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f02:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	68cf      	ldr	r7, [r1, #12]
 8000f08:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f0c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f10:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f12:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f18:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f1c:	409f      	lsls	r7, r3
 8000f1e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f22:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f24:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f28:	688f      	ldr	r7, [r1, #8]
 8000f2a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f2e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f30:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f32:	00e5      	lsls	r5, r4, #3
 8000f34:	d561      	bpl.n	8000ffa <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	f04f 0b00 	mov.w	fp, #0
 8000f3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f3e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	4d39      	ldr	r5, [pc, #228]	; (8001028 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f48:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f4c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f50:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f54:	9703      	str	r7, [sp, #12]
 8000f56:	9f03      	ldr	r7, [sp, #12]
 8000f58:	f023 0703 	bic.w	r7, r3, #3
 8000f5c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f60:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f64:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f68:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f70:	f04f 0e0f 	mov.w	lr, #15
 8000f74:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f78:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f7a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	d043      	beq.n	8001008 <HAL_GPIO_Init+0x194>
 8000f80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f84:	42a8      	cmp	r0, r5
 8000f86:	d041      	beq.n	800100c <HAL_GPIO_Init+0x198>
 8000f88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f8c:	42a8      	cmp	r0, r5
 8000f8e:	d03f      	beq.n	8001010 <HAL_GPIO_Init+0x19c>
 8000f90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f94:	42a8      	cmp	r0, r5
 8000f96:	d03d      	beq.n	8001014 <HAL_GPIO_Init+0x1a0>
 8000f98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9c:	42a8      	cmp	r0, r5
 8000f9e:	d03b      	beq.n	8001018 <HAL_GPIO_Init+0x1a4>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d03b      	beq.n	800101c <HAL_GPIO_Init+0x1a8>
 8000fa4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000fa8:	42a8      	cmp	r0, r5
 8000faa:	d039      	beq.n	8001020 <HAL_GPIO_Init+0x1ac>
 8000fac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fb0:	42a8      	cmp	r0, r5
 8000fb2:	bf14      	ite	ne
 8000fb4:	2508      	movne	r5, #8
 8000fb6:	2507      	moveq	r5, #7
 8000fb8:	fa05 f50c 	lsl.w	r5, r5, ip
 8000fbc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000fc2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000fca:	bf0c      	ite	eq
 8000fcc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fce:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000fd0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000fd2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	bf0c      	ite	eq
 8000fda:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fdc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000fde:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	bf0c      	ite	eq
 8000fe8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fea:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000fec:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000fee:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	bf54      	ite	pl
 8000ff4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ff6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ff8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	f47f af44 	bne.w	8000e8a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001002:	b005      	add	sp, #20
 8001004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001008:	465d      	mov	r5, fp
 800100a:	e7d5      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 800100c:	2501      	movs	r5, #1
 800100e:	e7d3      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 8001010:	2502      	movs	r5, #2
 8001012:	e7d1      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 8001014:	2503      	movs	r5, #3
 8001016:	e7cf      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 8001018:	2504      	movs	r5, #4
 800101a:	e7cd      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 800101c:	2505      	movs	r5, #5
 800101e:	e7cb      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 8001020:	2506      	movs	r5, #6
 8001022:	e7c9      	b.n	8000fb8 <HAL_GPIO_Init+0x144>
 8001024:	40013c00 	.word	0x40013c00
 8001028:	40020000 	.word	0x40020000
 800102c:	40023800 	.word	0x40023800
 8001030:	40021400 	.word	0x40021400

08001034 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001034:	b10a      	cbz	r2, 800103a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001036:	6181      	str	r1, [r0, #24]
 8001038:	4770      	bx	lr
 800103a:	0409      	lsls	r1, r1, #16
 800103c:	e7fb      	b.n	8001036 <HAL_GPIO_WritePin+0x2>

0800103e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800103e:	6943      	ldr	r3, [r0, #20]
 8001040:	4059      	eors	r1, r3
 8001042:	6141      	str	r1, [r0, #20]
 8001044:	4770      	bx	lr

08001046 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001046:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800104a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 800104c:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8001050:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8001054:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8001058:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 800105c:	2801      	cmp	r0, #1
 800105e:	d021      	beq.n	80010a4 <HAL_HCD_HC_Init+0x5e>
 8001060:	2001      	movs	r0, #1
 8001062:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001066:	2028      	movs	r0, #40	; 0x28
 8001068:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 800106c:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8001070:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001072:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001076:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800107a:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 800107e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8001082:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8001086:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800108a:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 800108e:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 8001092:	6820      	ldr	r0, [r4, #0]
 8001094:	f002 f850 	bl	8003138 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8001098:	2300      	movs	r3, #0
 800109a:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 800109e:	b004      	add	sp, #16
 80010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 80010a4:	2002      	movs	r0, #2
 80010a6:	e7fa      	b.n	800109e <HAL_HCD_HC_Init+0x58>

080010a8 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80010a8:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80010ac:	2b01      	cmp	r3, #1
{
 80010ae:	b510      	push	{r4, lr}
 80010b0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 80010b2:	d009      	beq.n	80010c8 <HAL_HCD_HC_Halt+0x20>
 80010b4:	2301      	movs	r3, #1
 80010b6:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	f002 f9f5 	bl	80034aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 80010c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 80010c8:	2002      	movs	r0, #2
}
 80010ca:	bd10      	pop	{r4, pc}

080010cc <HAL_HCD_Init>:
{ 
 80010cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 80010d0:	4607      	mov	r7, r0
{ 
 80010d2:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 80010d4:	b3a0      	cbz	r0, 8001140 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010d6:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 80010d8:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010da:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 80010de:	f7ff fcdb 	bl	8000a98 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80010e2:	f854 0b10 	ldr.w	r0, [r4], #16
 80010e6:	f001 fef3 	bl	8002ed0 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	466d      	mov	r5, sp
 80010ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80010fc:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001100:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001102:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f001 fea2 	bl	8002e50 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 800110c:	f856 0b10 	ldr.w	r0, [r6], #16
 8001110:	2101      	movs	r1, #1
 8001112:	f001 fee3 	bl	8002edc <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8001116:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001118:	466d      	mov	r5, sp
 800111a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800111e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001120:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001124:	e885 0003 	stmia.w	r5, {r0, r1}
 8001128:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f001 ff51 	bl	8002fd4 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8001138:	2000      	movs	r0, #0
}
 800113a:	b00a      	add	sp, #40	; 0x28
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001140:	2001      	movs	r0, #1
 8001142:	e7fa      	b.n	800113a <HAL_HCD_Init+0x6e>

08001144 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8001146:	2628      	movs	r6, #40	; 0x28
 8001148:	fb06 0601 	mla	r6, r6, r1, r0
{
 800114c:	f89d e014 	ldrb.w	lr, [sp, #20]
 8001150:	9d06      	ldr	r5, [sp, #24]
 8001152:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8001156:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 800115a:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 800115e:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 8001162:	f1be 0f00 	cmp.w	lr, #0
 8001166:	d10e      	bne.n	8001186 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001168:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 800116c:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800116e:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8001172:	d04a      	beq.n	800120a <HAL_HCD_HC_SubmitRequest+0xc6>
 8001174:	4573      	cmp	r3, lr
 8001176:	d055      	beq.n	8001224 <HAL_HCD_HC_SubmitRequest+0xe0>
 8001178:	2b01      	cmp	r3, #1
 800117a:	d12f      	bne.n	80011dc <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800117c:	2328      	movs	r3, #40	; 0x28
 800117e:	fb03 0301 	mla	r3, r3, r1, r0
 8001182:	2200      	movs	r2, #0
 8001184:	e055      	b.n	8001232 <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001186:	f04f 0c02 	mov.w	ip, #2
 800118a:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 800118e:	2b03      	cmp	r3, #3
 8001190:	d824      	bhi.n	80011dc <HAL_HCD_HC_SubmitRequest+0x98>
 8001192:	a601      	add	r6, pc, #4	; (adr r6, 8001198 <HAL_HCD_HC_SubmitRequest+0x54>)
 8001194:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8001198:	080011a9 	.word	0x080011a9
 800119c:	0800117d 	.word	0x0800117d
 80011a0:	0800120b 	.word	0x0800120b
 80011a4:	08001225 	.word	0x08001225
    if((token == 1) && (direction == 0)) /*send data */
 80011a8:	f1be 0f01 	cmp.w	lr, #1
 80011ac:	d116      	bne.n	80011dc <HAL_HCD_HC_SubmitRequest+0x98>
 80011ae:	b9aa      	cbnz	r2, 80011dc <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 80011b0:	b924      	cbnz	r4, 80011bc <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 80011b2:	2328      	movs	r3, #40	; 0x28
 80011b4:	fb03 0301 	mla	r3, r3, r1, r0
 80011b8:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 80011bc:	2328      	movs	r3, #40	; 0x28
 80011be:	fb03 0201 	mla	r2, r3, r1, r0
 80011c2:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 80011c6:	b9f6      	cbnz	r6, 8001206 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011c8:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80011cc:	fb03 0301 	mla	r3, r3, r1, r0
 80011d0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80011d4:	2a02      	cmp	r2, #2
 80011d6:	d001      	beq.n	80011dc <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 80011d8:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011dc:	2628      	movs	r6, #40	; 0x28
 80011de:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 80011e2:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 80011e4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 80011e8:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011ea:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80011ec:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 80011ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 80011f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80011f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 80011f8:	3138      	adds	r1, #56	; 0x38
 80011fa:	7c02      	ldrb	r2, [r0, #16]
 80011fc:	6800      	ldr	r0, [r0, #0]
}
 80011fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001202:	f002 b805 	b.w	8003210 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001206:	2602      	movs	r6, #2
 8001208:	e7de      	b.n	80011c8 <HAL_HCD_HC_SubmitRequest+0x84>
 800120a:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800120c:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001210:	b992      	cbnz	r2, 8001238 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001212:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8001216:	b91e      	cbnz	r6, 8001220 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 800121c:	2328      	movs	r3, #40	; 0x28
 800121e:	e7d5      	b.n	80011cc <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001220:	2202      	movs	r2, #2
 8001222:	e7f9      	b.n	8001218 <HAL_HCD_HC_SubmitRequest+0xd4>
 8001224:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001226:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 800122a:	b92a      	cbnz	r2, 8001238 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800122c:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8001230:	b936      	cbnz	r6, 8001240 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8001236:	e7d1      	b.n	80011dc <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001238:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800123c:	2a00      	cmp	r2, #0
 800123e:	d0f8      	beq.n	8001232 <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001240:	2202      	movs	r2, #2
 8001242:	e7f6      	b.n	8001232 <HAL_HCD_HC_SubmitRequest+0xee>

08001244 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001248:	6806      	ldr	r6, [r0, #0]
{
 800124a:	b087      	sub	sp, #28
 800124c:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800124e:	4630      	mov	r0, r6
 8001250:	f001 fea4 	bl	8002f9c <USB_GetMode>
 8001254:	2801      	cmp	r0, #1
 8001256:	f040 80ec 	bne.w	8001432 <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 800125a:	6820      	ldr	r0, [r4, #0]
 800125c:	f001 fe9a 	bl	8002f94 <USB_ReadInterrupts>
 8001260:	2800      	cmp	r0, #0
 8001262:	f000 80e6 	beq.w	8001432 <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001266:	6820      	ldr	r0, [r4, #0]
 8001268:	f001 fe94 	bl	8002f94 <USB_ReadInterrupts>
 800126c:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800126e:	bf48      	it	mi
 8001270:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001272:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001274:	bf44      	itt	mi
 8001276:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800127a:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800127c:	f001 fe8a 	bl	8002f94 <USB_ReadInterrupts>
 8001280:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001282:	bf48      	it	mi
 8001284:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001286:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001288:	bf44      	itt	mi
 800128a:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800128e:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001290:	f001 fe80 	bl	8002f94 <USB_ReadInterrupts>
 8001294:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001296:	bf48      	it	mi
 8001298:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800129a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800129c:	bf44      	itt	mi
 800129e:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80012a2:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80012a4:	f001 fe76 	bl	8002f94 <USB_ReadInterrupts>
 80012a8:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80012aa:	bf48      	it	mi
 80012ac:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80012ae:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80012b0:	bf44      	itt	mi
 80012b2:	2202      	movmi	r2, #2
 80012b4:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80012b6:	f001 fe6d 	bl	8002f94 <USB_ReadInterrupts>
 80012ba:	0085      	lsls	r5, r0, #2
 80012bc:	d510      	bpl.n	80012e0 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80012be:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80012c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80012c6:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fc26 	bl	8000b1c <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80012d0:	2101      	movs	r1, #1
 80012d2:	6820      	ldr	r0, [r4, #0]
 80012d4:	f001 fef0 	bl	80030b8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012de:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80012e0:	6820      	ldr	r0, [r4, #0]
 80012e2:	f001 fe57 	bl	8002f94 <USB_ReadInterrupts>
 80012e6:	01c0      	lsls	r0, r0, #7
 80012e8:	d540      	bpl.n	800136c <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 80012ea:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80012ec:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012f0:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80012f2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012f6:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80012f8:	9b05      	ldr	r3, [sp, #20]
 80012fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80012fe:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001300:	9b04      	ldr	r3, [sp, #16]
 8001302:	0799      	lsls	r1, r3, #30
 8001304:	d50d      	bpl.n	8001322 <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001306:	9b04      	ldr	r3, [sp, #16]
 8001308:	07da      	lsls	r2, r3, #31
 800130a:	d506      	bpl.n	800131a <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800130c:	69ab      	ldr	r3, [r5, #24]
 800130e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001312:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fbfd 	bl	8000b14 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800131a:	9b05      	ldr	r3, [sp, #20]
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001322:	9b04      	ldr	r3, [sp, #16]
 8001324:	071b      	lsls	r3, r3, #28
 8001326:	d517      	bpl.n	8001358 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001328:	9b05      	ldr	r3, [sp, #20]
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001330:	9b04      	ldr	r3, [sp, #16]
 8001332:	075f      	lsls	r7, r3, #29
 8001334:	f140 8088 	bpl.w	8001448 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001338:	69a1      	ldr	r1, [r4, #24]
 800133a:	2902      	cmp	r1, #2
 800133c:	d17c      	bne.n	8001438 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 800133e:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001340:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001342:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 800134a:	bf18      	it	ne
 800134c:	2101      	movne	r1, #1
 800134e:	f001 feb3 	bl	80030b8 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fbde 	bl	8000b14 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001358:	9b04      	ldr	r3, [sp, #16]
 800135a:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800135c:	bf42      	ittt	mi
 800135e:	9b05      	ldrmi	r3, [sp, #20]
 8001360:	f043 0320 	orrmi.w	r3, r3, #32
 8001364:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001366:	9b05      	ldr	r3, [sp, #20]
 8001368:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800136c:	6820      	ldr	r0, [r4, #0]
 800136e:	f001 fe11 	bl	8002f94 <USB_ReadInterrupts>
 8001372:	0701      	lsls	r1, r0, #28
 8001374:	d505      	bpl.n	8001382 <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff fbc8 	bl	8000b0c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	2208      	movs	r2, #8
 8001380:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	f001 fe06 	bl	8002f94 <USB_ReadInterrupts>
 8001388:	0182      	lsls	r2, r0, #6
 800138a:	d514      	bpl.n	80013b6 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	f002 f87d 	bl	800348c <USB_HC_ReadInterrupt>
 8001392:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8001396:	9002      	str	r0, [sp, #8]
 8001398:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800139a:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 800139e:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 80013a2:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80013a4:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80013a8:	68a3      	ldr	r3, [r4, #8]
 80013aa:	459b      	cmp	fp, r3
 80013ac:	d358      	bcc.n	8001460 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013b4:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	f001 fdec 	bl	8002f94 <USB_ReadInterrupts>
 80013bc:	06c3      	lsls	r3, r0, #27
 80013be:	d538      	bpl.n	8001432 <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c0:	6825      	ldr	r5, [r4, #0]
 80013c2:	69ab      	ldr	r3, [r5, #24]
 80013c4:	f023 0310 	bic.w	r3, r3, #16
 80013c8:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 80013ca:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80013cc:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d129      	bne.n	8001428 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 80013d4:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80013d8:	f1b8 0f00 	cmp.w	r8, #0
 80013dc:	d024      	beq.n	8001428 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 80013de:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80013e2:	2628      	movs	r6, #40	; 0x28
 80013e4:	fb06 4607 	mla	r6, r6, r7, r4
 80013e8:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80013ea:	b1e9      	cbz	r1, 8001428 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80013ec:	4642      	mov	r2, r8
 80013ee:	4628      	mov	r0, r5
 80013f0:	f001 fdc2 	bl	8002f78 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 80013f4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80013f6:	4443      	add	r3, r8
 80013f8:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 80013fa:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 80013fe:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001400:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001404:	4443      	add	r3, r8
 8001406:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001408:	692a      	ldr	r2, [r5, #16]
 800140a:	4bb7      	ldr	r3, [pc, #732]	; (80016e8 <HAL_HCD_IRQHandler+0x4a4>)
 800140c:	4013      	ands	r3, r2
 800140e:	b15b      	cbz	r3, 8001428 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8001410:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001412:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 800141a:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 800141c:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001420:	f083 0301 	eor.w	r3, r3, #1
 8001424:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001428:	6822      	ldr	r2, [r4, #0]
 800142a:	6993      	ldr	r3, [r2, #24]
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	6193      	str	r3, [r2, #24]
}
 8001432:	b007      	add	sp, #28
 8001434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001438:	68e3      	ldr	r3, [r4, #12]
 800143a:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 800143c:	bf04      	itt	eq
 800143e:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001442:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001446:	e784      	b.n	8001352 <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001448:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 800144c:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800144e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001452:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001456:	6993      	ldr	r3, [r2, #24]
 8001458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	e77b      	b.n	8001358 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8001460:	9a02      	ldr	r2, [sp, #8]
 8001462:	fa0a f30b 	lsl.w	r3, sl, fp
 8001466:	4213      	tst	r3, r2
 8001468:	f000 8086 	beq.w	8001578 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001476:	fa5f f58b 	uxtb.w	r5, fp
 800147a:	f000 810a 	beq.w	8001692 <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800147e:	016a      	lsls	r2, r5, #5
 8001480:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8001484:	eb02 0608 	add.w	r6, r2, r8
 8001488:	68b1      	ldr	r1, [r6, #8]
 800148a:	074b      	lsls	r3, r1, #29
 800148c:	d513      	bpl.n	80014b6 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800148e:	2104      	movs	r1, #4
 8001490:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001492:	68f1      	ldr	r1, [r6, #12]
 8001494:	f041 0102 	orr.w	r1, r1, #2
 8001498:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800149a:	68b1      	ldr	r1, [r6, #8]
 800149c:	058b      	lsls	r3, r1, #22
 800149e:	d53d      	bpl.n	800151c <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014a0:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80014a2:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80014aa:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 80014ac:	f001 fffd 	bl	80034aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80014b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b4:	e12b      	b.n	800170e <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80014b6:	68b1      	ldr	r1, [r6, #8]
 80014b8:	0689      	lsls	r1, r1, #26
 80014ba:	d502      	bpl.n	80014c2 <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80014bc:	2120      	movs	r1, #32
 80014be:	60b1      	str	r1, [r6, #8]
 80014c0:	e7eb      	b.n	800149a <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80014c2:	68b1      	ldr	r1, [r6, #8]
 80014c4:	070b      	lsls	r3, r1, #28
 80014c6:	d513      	bpl.n	80014f0 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80014c8:	68f1      	ldr	r1, [r6, #12]
 80014ca:	9203      	str	r2, [sp, #12]
 80014cc:	f041 0102 	orr.w	r1, r1, #2
 80014d0:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80014d2:	fb07 4105 	mla	r1, r7, r5, r4
 80014d6:	f04f 0e05 	mov.w	lr, #5
 80014da:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80014de:	2110      	movs	r1, #16
 80014e0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 80014e2:	2108      	movs	r1, #8
 80014e4:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 80014e6:	4629      	mov	r1, r5
 80014e8:	f001 ffdf 	bl	80034aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80014ec:	9a03      	ldr	r2, [sp, #12]
 80014ee:	e7d4      	b.n	800149a <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80014f0:	68b1      	ldr	r1, [r6, #8]
 80014f2:	0549      	lsls	r1, r1, #21
 80014f4:	d5d1      	bpl.n	800149a <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80014f6:	68f1      	ldr	r1, [r6, #12]
 80014f8:	9203      	str	r2, [sp, #12]
 80014fa:	f041 0102 	orr.w	r1, r1, #2
 80014fe:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001500:	4629      	mov	r1, r5
 8001502:	f001 ffd2 	bl	80034aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001506:	2110      	movs	r1, #16
 8001508:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800150a:	fb07 4105 	mla	r1, r7, r5, r4
 800150e:	2008      	movs	r0, #8
 8001510:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001518:	60b1      	str	r1, [r6, #8]
 800151a:	e7e7      	b.n	80014ec <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800151c:	68b1      	ldr	r1, [r6, #8]
 800151e:	07c8      	lsls	r0, r1, #31
 8001520:	d540      	bpl.n	80015a4 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8001522:	6921      	ldr	r1, [r4, #16]
 8001524:	b149      	cbz	r1, 800153a <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001526:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800152a:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800152c:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001530:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001534:	1a09      	subs	r1, r1, r0
 8001536:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 800153a:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 800153e:	2000      	movs	r0, #0
 8001540:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8001542:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001546:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800154a:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 800154e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8001552:	d117      	bne.n	8001584 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001554:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001556:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800155e:	4629      	mov	r1, r5
 8001560:	f001 ffa3 	bl	80034aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001564:	2310      	movs	r3, #16
 8001566:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8001568:	fb07 4505 	mla	r5, r7, r5, r4
 800156c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001570:	f083 0301 	eor.w	r3, r3, #1
 8001574:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800157c:	f10b 0b01 	add.w	fp, fp, #1
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	e711      	b.n	80013a8 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001584:	2803      	cmp	r0, #3
 8001586:	d1ef      	bne.n	8001568 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001588:	f852 0008 	ldr.w	r0, [r2, r8]
 800158c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8001590:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001594:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001598:	2201      	movs	r2, #1
 800159a:	4629      	mov	r1, r5
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff fac1 	bl	8000b24 <HAL_HCD_HC_NotifyURBChange_Callback>
 80015a2:	e7e1      	b.n	8001568 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80015a4:	68b1      	ldr	r1, [r6, #8]
 80015a6:	0789      	lsls	r1, r1, #30
 80015a8:	d535      	bpl.n	8001616 <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80015aa:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80015ac:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80015b0:	f021 0102 	bic.w	r1, r1, #2
 80015b4:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80015b6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80015ba:	2901      	cmp	r1, #1
 80015bc:	d10c      	bne.n	80015d8 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80015be:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80015c2:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80015c6:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80015ca:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80015ce:	4629      	mov	r1, r5
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff faa7 	bl	8000b24 <HAL_HCD_HC_NotifyURBChange_Callback>
 80015d6:	e7cf      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80015d8:	2905      	cmp	r1, #5
 80015da:	d0f0      	beq.n	80015be <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80015dc:	2906      	cmp	r1, #6
 80015de:	d001      	beq.n	80015e4 <HAL_HCD_IRQHandler+0x3a0>
 80015e0:	2908      	cmp	r1, #8
 80015e2:	d1ee      	bne.n	80015c2 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80015e4:	fb07 4105 	mla	r1, r7, r5, r4
 80015e8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80015ea:	2803      	cmp	r0, #3
 80015ec:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 80015f0:	bf88      	it	hi
 80015f2:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80015f4:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 80015f6:	bf83      	ittte	hi
 80015f8:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80015fa:	2004      	movhi	r0, #4
 80015fc:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001600:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001604:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001608:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800160c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001610:	f842 1008 	str.w	r1, [r2, r8]
 8001614:	e7d5      	b.n	80015c2 <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001616:	68b1      	ldr	r1, [r6, #8]
 8001618:	060b      	lsls	r3, r1, #24
 800161a:	d511      	bpl.n	8001640 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800161c:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 800161e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001626:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 800162a:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 800162c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800162e:	3201      	adds	r2, #1
 8001630:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8001632:	2206      	movs	r2, #6
 8001634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001638:	f001 ff37 	bl	80034aa <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	e066      	b.n	800170e <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001640:	68b1      	ldr	r1, [r6, #8]
 8001642:	06c8      	lsls	r0, r1, #27
 8001644:	d598      	bpl.n	8001578 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001646:	fb07 4105 	mla	r1, r7, r5, r4
 800164a:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 800164e:	2903      	cmp	r1, #3
 8001650:	d109      	bne.n	8001666 <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001652:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001654:	6820      	ldr	r0, [r4, #0]
 8001656:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001658:	f041 0102 	orr.w	r1, r1, #2
 800165c:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 800165e:	4629      	mov	r1, r5
 8001660:	f001 ff23 	bl	80034aa <USB_HC_Halt>
 8001664:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8001666:	fb07 4505 	mla	r5, r7, r5, r4
 800166a:	2103      	movs	r1, #3
 800166c:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001670:	2110      	movs	r1, #16
 8001672:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001674:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8001678:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 800167c:	f47f af7c 	bne.w	8001578 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001680:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001684:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001688:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800168c:	f842 1008 	str.w	r1, [r2, r8]
 8001690:	e772      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001692:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8001696:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 800169a:	68b3      	ldr	r3, [r6, #8]
 800169c:	0759      	lsls	r1, r3, #29
 800169e:	d506      	bpl.n	80016ae <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80016a0:	2304      	movs	r3, #4
 80016a2:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016a4:	68f3      	ldr	r3, [r6, #12]
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	60f3      	str	r3, [r6, #12]
 80016ac:	e764      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80016ae:	68b3      	ldr	r3, [r6, #8]
 80016b0:	f013 0320 	ands.w	r3, r3, #32
 80016b4:	d01a      	beq.n	80016ec <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80016b6:	2320      	movs	r3, #32
 80016b8:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 80016ba:	fb07 4305 	mla	r3, r7, r5, r4
 80016be:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80016c2:	2a01      	cmp	r2, #1
 80016c4:	f47f af58 	bne.w	8001578 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 80016c8:	2204      	movs	r2, #4
 80016ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80016ce:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 80016d0:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80016d2:	f042 0202 	orr.w	r2, r2, #2
 80016d6:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80016d8:	4629      	mov	r1, r5
 80016da:	f001 fee6 	bl	80034aa <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80016de:	9b03      	ldr	r3, [sp, #12]
 80016e0:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 80016e4:	e748      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
 80016e6:	bf00      	nop
 80016e8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80016ec:	68b2      	ldr	r2, [r6, #8]
 80016ee:	0652      	lsls	r2, r2, #25
 80016f0:	d50f      	bpl.n	8001712 <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 80016f2:	fb07 4205 	mla	r2, r7, r5, r4
 80016f6:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80016fa:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 80016fc:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001706:	4629      	mov	r1, r5
 8001708:	f001 fecf 	bl	80034aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	60b3      	str	r3, [r6, #8]
 8001710:	e732      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001712:	68b2      	ldr	r2, [r6, #8]
 8001714:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8001718:	d005      	beq.n	8001726 <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800171a:	68f3      	ldr	r3, [r6, #12]
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001722:	4629      	mov	r1, r5
 8001724:	e6c2      	b.n	80014ac <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001726:	68b3      	ldr	r3, [r6, #8]
 8001728:	07d9      	lsls	r1, r3, #31
 800172a:	d510      	bpl.n	800174e <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 800172c:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001730:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001732:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001734:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001736:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001738:	f042 0202 	orr.w	r2, r2, #2
 800173c:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800173e:	f001 feb4 	bl	80034aa <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001742:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001744:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001748:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 800174c:	e714      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 800174e:	68b3      	ldr	r3, [r6, #8]
 8001750:	071a      	lsls	r2, r3, #28
 8001752:	d50e      	bpl.n	8001772 <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001754:	2308      	movs	r3, #8
 8001756:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001758:	68f3      	ldr	r3, [r6, #12]
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001760:	4629      	mov	r1, r5
 8001762:	f001 fea2 	bl	80034aa <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001766:	fb07 4505 	mla	r5, r7, r5, r4
 800176a:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800176c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001770:	e702      	b.n	8001578 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001772:	68b3      	ldr	r3, [r6, #8]
 8001774:	06db      	lsls	r3, r3, #27
 8001776:	d511      	bpl.n	800179c <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001778:	fb07 4305 	mla	r3, r7, r5, r4
 800177c:	2200      	movs	r2, #0
 800177e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001780:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001782:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001784:	f042 0202 	orr.w	r2, r2, #2
 8001788:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800178a:	4629      	mov	r1, r5
 800178c:	f001 fe8d 	bl	80034aa <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001790:	9b03      	ldr	r3, [sp, #12]
 8001792:	2203      	movs	r2, #3
 8001794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001798:	2310      	movs	r3, #16
 800179a:	e7b8      	b.n	800170e <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800179c:	68b3      	ldr	r3, [r6, #8]
 800179e:	0619      	lsls	r1, r3, #24
 80017a0:	d50c      	bpl.n	80017bc <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80017a2:	68f3      	ldr	r3, [r6, #12]
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80017aa:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 80017ac:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 80017b0:	f001 fe7b 	bl	80034aa <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 80017b4:	2306      	movs	r3, #6
 80017b6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80017ba:	e73f      	b.n	800163c <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80017bc:	68b1      	ldr	r1, [r6, #8]
 80017be:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 80017c2:	d00f      	beq.n	80017e4 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80017c4:	68f3      	ldr	r3, [r6, #12]
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80017cc:	4629      	mov	r1, r5
 80017ce:	f001 fe6c 	bl	80034aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80017d2:	2310      	movs	r3, #16
 80017d4:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 80017d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017da:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80017dc:	fb07 4505 	mla	r5, r7, r5, r4
 80017e0:	2308      	movs	r3, #8
 80017e2:	e7c3      	b.n	800176c <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80017e4:	68b3      	ldr	r3, [r6, #8]
 80017e6:	079a      	lsls	r2, r3, #30
 80017e8:	f57f aec6 	bpl.w	8001578 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80017ec:	68f3      	ldr	r3, [r6, #12]
 80017ee:	f023 0302 	bic.w	r3, r3, #2
 80017f2:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80017f4:	fb07 4305 	mla	r3, r7, r5, r4
 80017f8:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80017fc:	2a01      	cmp	r2, #1
 80017fe:	d10d      	bne.n	800181c <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001804:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001808:	2a02      	cmp	r2, #2
 800180a:	f47f aeda 	bne.w	80015c2 <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 800180e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001812:	f082 0201 	eor.w	r2, r2, #1
 8001816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800181a:	e6d2      	b.n	80015c2 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 800181c:	2a03      	cmp	r2, #3
 800181e:	d102      	bne.n	8001826 <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001820:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001824:	e6cd      	b.n	80015c2 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001826:	2a04      	cmp	r2, #4
 8001828:	d104      	bne.n	8001834 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800182a:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 800182e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8001832:	e6c6      	b.n	80015c2 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001834:	2a05      	cmp	r2, #5
 8001836:	d102      	bne.n	800183e <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800183c:	e6c1      	b.n	80015c2 <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800183e:	2a06      	cmp	r2, #6
 8001840:	d002      	beq.n	8001848 <HAL_HCD_IRQHandler+0x604>
 8001842:	2a08      	cmp	r2, #8
 8001844:	f47f aebd 	bne.w	80015c2 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001848:	fb07 4305 	mla	r3, r7, r5, r4
 800184c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184e:	1c51      	adds	r1, r2, #1
 8001850:	2a03      	cmp	r2, #3
 8001852:	6599      	str	r1, [r3, #88]	; 0x58
 8001854:	d9e4      	bls.n	8001820 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001856:	2200      	movs	r2, #0
 8001858:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800185a:	2204      	movs	r2, #4
 800185c:	e7ec      	b.n	8001838 <HAL_HCD_IRQHandler+0x5f4>
 800185e:	bf00      	nop

08001860 <HAL_HCD_Start>:
{ 
 8001860:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8001862:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001866:	2b01      	cmp	r3, #1
{ 
 8001868:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 800186a:	d00d      	beq.n	8001888 <HAL_HCD_Start+0x28>
 800186c:	2501      	movs	r5, #1
 800186e:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001872:	6800      	ldr	r0, [r0, #0]
 8001874:	f001 fb26 	bl	8002ec4 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001878:	4629      	mov	r1, r5
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	f001 fc39 	bl	80030f2 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001880:	2000      	movs	r0, #0
 8001882:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001886:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8001888:	2002      	movs	r0, #2
}
 800188a:	bd38      	pop	{r3, r4, r5, pc}

0800188c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 800188c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001890:	2b01      	cmp	r3, #1
{ 
 8001892:	b510      	push	{r4, lr}
 8001894:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001896:	d009      	beq.n	80018ac <HAL_HCD_Stop+0x20>
 8001898:	2301      	movs	r3, #1
 800189a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 800189e:	6800      	ldr	r0, [r0, #0]
 80018a0:	f001 ff28 	bl	80036f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 80018a4:	2000      	movs	r0, #0
 80018a6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 80018aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 80018ac:	2002      	movs	r0, #2
}
 80018ae:	bd10      	pop	{r4, pc}

080018b0 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80018b0:	2328      	movs	r3, #40	; 0x28
 80018b2:	fb03 0101 	mla	r1, r3, r1, r0
}
 80018b6:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80018ba:	4770      	bx	lr

080018bc <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 80018bc:	2328      	movs	r3, #40	; 0x28
 80018be:	fb03 0101 	mla	r1, r3, r1, r0
}
 80018c2:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80018c4:	4770      	bx	lr

080018c6 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018c6:	6800      	ldr	r0, [r0, #0]
 80018c8:	f001 bc31 	b.w	800312e <USB_GetCurrentFrame>

080018cc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018cc:	6802      	ldr	r2, [r0, #0]
 80018ce:	6953      	ldr	r3, [r2, #20]
 80018d0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80018d4:	d00d      	beq.n	80018f2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018da:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018dc:	2304      	movs	r3, #4
 80018de:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80018e0:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80018ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	4770      	bx	lr
  }
  return HAL_OK;
 80018f2:	4618      	mov	r0, r3
}
 80018f4:	4770      	bx	lr

080018f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018fa:	4604      	mov	r4, r0
 80018fc:	4617      	mov	r7, r2
 80018fe:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001900:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001904:	b28e      	uxth	r6, r1
 8001906:	6825      	ldr	r5, [r4, #0]
 8001908:	f1b8 0f01 	cmp.w	r8, #1
 800190c:	bf0c      	ite	eq
 800190e:	696b      	ldreq	r3, [r5, #20]
 8001910:	69ab      	ldrne	r3, [r5, #24]
 8001912:	ea36 0303 	bics.w	r3, r6, r3
 8001916:	bf14      	ite	ne
 8001918:	2001      	movne	r0, #1
 800191a:	2000      	moveq	r0, #0
 800191c:	b908      	cbnz	r0, 8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800191e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001922:	696b      	ldr	r3, [r5, #20]
 8001924:	055a      	lsls	r2, r3, #21
 8001926:	d512      	bpl.n	800194e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001930:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001934:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001936:	2304      	movs	r3, #4
 8001938:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800193a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800193c:	2300      	movs	r3, #0
 800193e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001940:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001944:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
 800194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800194e:	1c7b      	adds	r3, r7, #1
 8001950:	d0d9      	beq.n	8001906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001952:	b94f      	cbnz	r7, 8001968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001954:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001956:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001958:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800195a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800195e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001962:	2003      	movs	r0, #3
 8001964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001968:	f7ff f9de 	bl	8000d28 <HAL_GetTick>
 800196c:	eba0 0009 	sub.w	r0, r0, r9
 8001970:	4287      	cmp	r7, r0
 8001972:	d2c8      	bcs.n	8001906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001974:	e7ee      	b.n	8001954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001976 <I2C_WaitOnFlagUntilTimeout>:
{
 8001976:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800197a:	9e08      	ldr	r6, [sp, #32]
 800197c:	4604      	mov	r4, r0
 800197e:	4690      	mov	r8, r2
 8001980:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001982:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001986:	b28d      	uxth	r5, r1
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f1b9 0f01 	cmp.w	r9, #1
 800198e:	bf0c      	ite	eq
 8001990:	695b      	ldreq	r3, [r3, #20]
 8001992:	699b      	ldrne	r3, [r3, #24]
 8001994:	ea35 0303 	bics.w	r3, r5, r3
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	4543      	cmp	r3, r8
 80019a0:	d002      	beq.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80019a2:	2000      	movs	r0, #0
}
 80019a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019a8:	1c7b      	adds	r3, r7, #1
 80019aa:	d0ed      	beq.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019ac:	b95f      	cbnz	r7, 80019c6 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ae:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80019b0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019b2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80019bc:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80019c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019c6:	f7ff f9af 	bl	8000d28 <HAL_GetTick>
 80019ca:	1b80      	subs	r0, r0, r6
 80019cc:	4287      	cmp	r7, r0
 80019ce:	d2db      	bcs.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x12>
 80019d0:	e7ed      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x38>

080019d2 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80019d2:	b570      	push	{r4, r5, r6, lr}
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	061b      	lsls	r3, r3, #24
 80019e0:	d501      	bpl.n	80019e6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff ff70 	bl	80018cc <I2C_IsAcknowledgeFailed>
 80019ec:	b9a8      	cbnz	r0, 8001a1a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80019ee:	1c6a      	adds	r2, r5, #1
 80019f0:	d0f3      	beq.n	80019da <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019f2:	b965      	cbnz	r5, 8001a0e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80019fc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a06:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a0e:	f7ff f98b 	bl	8000d28 <HAL_GetTick>
 8001a12:	1b80      	subs	r0, r0, r6
 8001a14:	4285      	cmp	r5, r0
 8001a16:	d2e0      	bcs.n	80019da <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001a18:	e7ec      	b.n	80019f4 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
}
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}

08001a1e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001a1e:	b570      	push	{r4, r5, r6, lr}
 8001a20:	4604      	mov	r4, r0
 8001a22:	460d      	mov	r5, r1
 8001a24:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	075b      	lsls	r3, r3, #29
 8001a2c:	d501      	bpl.n	8001a32 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff ff4a 	bl	80018cc <I2C_IsAcknowledgeFailed>
 8001a38:	b9a8      	cbnz	r0, 8001a66 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001a3a:	1c6a      	adds	r2, r5, #1
 8001a3c:	d0f3      	beq.n	8001a26 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a3e:	b965      	cbnz	r5, 8001a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001a48:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a52:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a56:	2003      	movs	r0, #3
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a5a:	f7ff f965 	bl	8000d28 <HAL_GetTick>
 8001a5e:	1b80      	subs	r0, r0, r6
 8001a60:	4285      	cmp	r5, r0
 8001a62:	d2e0      	bcs.n	8001a26 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001a64:	e7ec      	b.n	8001a40 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
}
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a6c <HAL_I2C_Init>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001a6e:	4604      	mov	r4, r0
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d062      	beq.n	8001b3a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001a74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a7c:	b91b      	cbnz	r3, 8001a86 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001a7e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001a82:	f7fe ff0b 	bl	800089c <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001a86:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a88:	4e2d      	ldr	r6, [pc, #180]	; (8001b40 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001a8a:	4d2e      	ldr	r5, [pc, #184]	; (8001b44 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a8c:	2324      	movs	r3, #36	; 0x24
 8001a8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a9a:	f001 f843 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a9e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001aa0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001aa2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001aa6:	42b3      	cmp	r3, r6
 8001aa8:	bf84      	itt	hi
 8001aaa:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001aae:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001ab0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ab2:	bf91      	iteee	ls
 8001ab4:	1c69      	addls	r1, r5, #1
 8001ab6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001aba:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001abe:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ac0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ac2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ac4:	d821      	bhi.n	8001b0a <HAL_I2C_Init+0x9e>
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001acc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	bf98      	it	ls
 8001ad4:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad6:	6a21      	ldr	r1, [r4, #32]
 8001ad8:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ada:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001ae0:	68e1      	ldr	r1, [r4, #12]
 8001ae2:	6923      	ldr	r3, [r4, #16]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001ae8:	69a1      	ldr	r1, [r4, #24]
 8001aea:	6963      	ldr	r3, [r4, #20]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001af0:	6813      	ldr	r3, [r2, #0]
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001afa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afc:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b02:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b04:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001b0a:	68a1      	ldr	r1, [r4, #8]
 8001b0c:	b949      	cbnz	r1, 8001b22 <HAL_I2C_Init+0xb6>
 8001b0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b12:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b16:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b1a:	b163      	cbz	r3, 8001b36 <HAL_I2C_Init+0xca>
 8001b1c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001b20:	e7d9      	b.n	8001ad6 <HAL_I2C_Init+0x6a>
 8001b22:	2119      	movs	r1, #25
 8001b24:	434b      	muls	r3, r1
 8001b26:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b2a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b2e:	b113      	cbz	r3, 8001b36 <HAL_I2C_Init+0xca>
 8001b30:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001b34:	e7cf      	b.n	8001ad6 <HAL_I2C_Init+0x6a>
 8001b36:	2001      	movs	r0, #1
 8001b38:	e7cd      	b.n	8001ad6 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1
}
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	bf00      	nop
 8001b40:	000186a0 	.word	0x000186a0
 8001b44:	000f4240 	.word	0x000f4240

08001b48 <HAL_I2C_Master_Transmit>:
{
 8001b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	461f      	mov	r7, r3
 8001b50:	460d      	mov	r5, r1
 8001b52:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001b54:	f7ff f8e8 	bl	8000d28 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b58:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b5c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001b5e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b60:	d004      	beq.n	8001b6c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001b62:	2502      	movs	r5, #2
}
 8001b64:	4628      	mov	r0, r5
 8001b66:	b004      	add	sp, #16
 8001b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b6c:	9000      	str	r0, [sp, #0]
 8001b6e:	2319      	movs	r3, #25
 8001b70:	2201      	movs	r2, #1
 8001b72:	495d      	ldr	r1, [pc, #372]	; (8001ce8 <HAL_I2C_Master_Transmit+0x1a0>)
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff fefe 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d1f1      	bne.n	8001b62 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001b7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d0ed      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x1a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001b92:	bf5e      	ittt	pl
 8001b94:	681a      	ldrpl	r2, [r3, #0]
 8001b96:	f042 0201 	orrpl.w	r2, r2, #1
 8001b9a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ba4:	2221      	movs	r2, #33	; 0x21
 8001ba6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001baa:	2210      	movs	r2, #16
 8001bac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001bb8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bba:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001bbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bbe:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001bc2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bc6:	2a04      	cmp	r2, #4
 8001bc8:	d004      	beq.n	8001bd4 <HAL_I2C_Master_Transmit+0x8c>
 8001bca:	2a01      	cmp	r2, #1
 8001bcc:	d002      	beq.n	8001bd4 <HAL_I2C_Master_Transmit+0x8c>
 8001bce:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001bd2:	d104      	bne.n	8001bde <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e002      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001be0:	2a12      	cmp	r2, #18
 8001be2:	d0f7      	beq.n	8001bd4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001be4:	9600      	str	r6, [sp, #0]
 8001be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001be8:	2200      	movs	r2, #0
 8001bea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fec1 	bl	8001976 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	bb28      	cbnz	r0, 8001c42 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf6:	6923      	ldr	r3, [r4, #16]
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bfe:	d112      	bne.n	8001c26 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c00:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001c04:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c06:	4633      	mov	r3, r6
 8001c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c0a:	4938      	ldr	r1, [pc, #224]	; (8001cec <HAL_I2C_Master_Transmit+0x1a4>)
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff fe72 	bl	80018f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c12:	4605      	mov	r5, r0
 8001c14:	b9a0      	cbnz	r0, 8001c40 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	9003      	str	r0, [sp, #12]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	9203      	str	r2, [sp, #12]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	9303      	str	r3, [sp, #12]
 8001c22:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001c24:	e050      	b.n	8001cc8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c26:	11eb      	asrs	r3, r5, #7
 8001c28:	f003 0306 	and.w	r3, r3, #6
 8001c2c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001c30:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c32:	492f      	ldr	r1, [pc, #188]	; (8001cf0 <HAL_I2C_Master_Transmit+0x1a8>)
 8001c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c36:	4633      	mov	r3, r6
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff fe5c 	bl	80018f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c3e:	b148      	cbz	r0, 8001c54 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001c4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001c50:	2501      	movs	r5, #1
 8001c52:	e787      	b.n	8001b64 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	b2ed      	uxtb	r5, r5
 8001c58:	611d      	str	r5, [r3, #16]
 8001c5a:	e7d4      	b.n	8001c06 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001c5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001c60:	2503      	movs	r5, #3
 8001c62:	e77f      	b.n	8001b64 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	4632      	mov	r2, r6
 8001c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff feb2 	bl	80019d2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c6e:	b140      	cbz	r0, 8001c82 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d1f4      	bne.n	8001c60 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	6813      	ldr	r3, [r2, #0]
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e7e6      	b.n	8001c50 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c84:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8001c86:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c88:	1c4b      	adds	r3, r1, #1
 8001c8a:	6263      	str	r3, [r4, #36]	; 0x24
 8001c8c:	780b      	ldrb	r3, [r1, #0]
 8001c8e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001c90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c98:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001c9a:	1e53      	subs	r3, r2, #1
 8001c9c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c9e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001ca0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ca2:	d50a      	bpl.n	8001cba <HAL_I2C_Master_Transmit+0x172>
 8001ca4:	b14b      	cbz	r3, 8001cba <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ca6:	1c8b      	adds	r3, r1, #2
 8001ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8001caa:	784b      	ldrb	r3, [r1, #1]
 8001cac:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001cae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001cb4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001cb6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001cb8:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cba:	4632      	mov	r2, r6
 8001cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fead 	bl	8001a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d1d3      	bne.n	8001c70 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001cc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ca      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cce:	6821      	ldr	r1, [r4, #0]
 8001cd0:	680a      	ldr	r2, [r1, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001cde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001ce6:	e73d      	b.n	8001b64 <HAL_I2C_Master_Transmit+0x1c>
 8001ce8:	00100002 	.word	0x00100002
 8001cec:	00010002 	.word	0x00010002
 8001cf0:	00010008 	.word	0x00010008

08001cf4 <HAL_I2C_MasterTxCpltCallback>:
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_I2C_MasterRxCpltCallback>:
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_SlaveTxCpltCallback>:
 8001cf8:	4770      	bx	lr

08001cfa <HAL_I2C_SlaveRxCpltCallback>:
 8001cfa:	4770      	bx	lr

08001cfc <HAL_I2C_AddrCallback>:
{
 8001cfc:	4770      	bx	lr

08001cfe <HAL_I2C_ListenCpltCallback>:
 8001cfe:	4770      	bx	lr

08001d00 <HAL_I2C_MemTxCpltCallback>:
 8001d00:	4770      	bx	lr

08001d02 <HAL_I2C_MemRxCpltCallback>:
 8001d02:	4770      	bx	lr

08001d04 <HAL_I2C_ErrorCallback>:
 8001d04:	4770      	bx	lr

08001d06 <HAL_I2C_AbortCpltCallback>:
{
 8001d06:	4770      	bx	lr

08001d08 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001d08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d0c:	3b29      	subs	r3, #41	; 0x29
 8001d0e:	2b01      	cmp	r3, #1
{
 8001d10:	b510      	push	{r4, lr}
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d16:	d839      	bhi.n	8001d8c <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d1c:	2228      	movs	r2, #40	; 0x28
 8001d1e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d28:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001d30:	d054      	beq.n	8001ddc <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001d32:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001d34:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3a:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001d3c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <I2C_ITError+0x120>)
 8001d44:	d031      	beq.n	8001daa <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d46:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d48:	f7ff f881 	bl	8000e4e <HAL_DMA_Abort_IT>
 8001d4c:	b150      	cbz	r0, 8001d64 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 8001d4e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d50:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001d62:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001d64:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d68:	2b28      	cmp	r3, #40	; 0x28
 8001d6a:	d10e      	bne.n	8001d8a <I2C_ITError+0x82>
 8001d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d6e:	075b      	lsls	r3, r3, #29
 8001d70:	d50b      	bpl.n	8001d8a <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <I2C_ITError+0x124>)
 8001d74:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d7c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d86:	f7ff ffba 	bl	8001cfe <HAL_I2C_ListenCpltCallback>
 8001d8a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8001d8c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001d90:	2a60      	cmp	r2, #96	; 0x60
 8001d92:	d005      	beq.n	8001da0 <I2C_ITError+0x98>
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	bf5c      	itt	pl
 8001d9a:	2220      	movpl	r2, #32
 8001d9c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001da0:	2200      	movs	r2, #0
 8001da2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001da8:	e7bb      	b.n	8001d22 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001daa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001dac:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001dae:	f7ff f84e 	bl	8000e4e <HAL_DMA_Abort_IT>
 8001db2:	2800      	cmp	r0, #0
 8001db4:	d0d6      	beq.n	8001d64 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	6953      	ldr	r3, [r2, #20]
 8001dba:	0658      	lsls	r0, r3, #25
 8001dbc:	d504      	bpl.n	8001dc8 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc0:	6912      	ldr	r2, [r2, #16]
 8001dc2:	1c59      	adds	r1, r3, #1
 8001dc4:	6261      	str	r1, [r4, #36]	; 0x24
 8001dc6:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8001dc8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001dca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001dda:	e7c1      	b.n	8001d60 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001ddc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001de0:	2960      	cmp	r1, #96	; 0x60
 8001de2:	d114      	bne.n	8001e0e <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	2120      	movs	r1, #32
 8001de6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dea:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	0651      	lsls	r1, r2, #25
 8001df0:	d504      	bpl.n	8001dfc <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001df2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	1c51      	adds	r1, r2, #1
 8001df8:	6261      	str	r1, [r4, #36]	; 0x24
 8001dfa:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff ff7d 	bl	8001d06 <HAL_I2C_AbortCpltCallback>
 8001e0c:	e7aa      	b.n	8001d64 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	0652      	lsls	r2, r2, #25
 8001e12:	d504      	bpl.n	8001e1e <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	1c51      	adds	r1, r2, #1
 8001e1a:	6261      	str	r1, [r4, #36]	; 0x24
 8001e1c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff ff70 	bl	8001d04 <HAL_I2C_ErrorCallback>
 8001e24:	e79e      	b.n	8001d64 <I2C_ITError+0x5c>
 8001e26:	bf00      	nop
 8001e28:	08002639 	.word	0x08002639
 8001e2c:	ffff0000 	.word	0xffff0000

08001e30 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e30:	6803      	ldr	r3, [r0, #0]
{
 8001e32:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e34:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e36:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001e38:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8001e3a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001e3e:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e40:	2c10      	cmp	r4, #16
{
 8001e42:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e44:	d002      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1c>
 8001e46:	2c40      	cmp	r4, #64	; 0x40
 8001e48:	f040 8255 	bne.w	80022f6 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001e4c:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001e50:	d066      	beq.n	8001f20 <HAL_I2C_EV_IRQHandler+0xf0>
 8001e52:	0597      	lsls	r7, r2, #22
 8001e54:	d564      	bpl.n	8001f20 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e56:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001e5a:	2c40      	cmp	r4, #64	; 0x40
 8001e5c:	d143      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8001e5e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001e60:	2c00      	cmp	r4, #0
 8001e62:	d13b      	bne.n	8001edc <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e64:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e66:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001e6a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001e6c:	4e98      	ldr	r6, [pc, #608]	; (80020d0 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8001e6e:	4c99      	ldr	r4, [pc, #612]	; (80020d4 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8001e70:	402e      	ands	r6, r5
 8001e72:	400c      	ands	r4, r1
 8001e74:	2e00      	cmp	r6, #0
 8001e76:	f000 819f 	beq.w	80021b8 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001e7a:	4d97      	ldr	r5, [pc, #604]	; (80020d8 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8001e7c:	400d      	ands	r5, r1
 8001e7e:	2d00      	cmp	r5, #0
 8001e80:	f000 8166 	beq.w	8002150 <HAL_I2C_EV_IRQHandler+0x320>
 8001e84:	0555      	lsls	r5, r2, #21
 8001e86:	f140 8163 	bpl.w	8002150 <HAL_I2C_EV_IRQHandler+0x320>
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	f040 8160 	bne.w	8002150 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001e90:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e94:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001e96:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e9a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 8001e9c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8001e9e:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ea0:	2d00      	cmp	r5, #0
 8001ea2:	f040 8105 	bne.w	80020b0 <HAL_I2C_EV_IRQHandler+0x280>
 8001ea6:	2a21      	cmp	r2, #33	; 0x21
 8001ea8:	f040 8104 	bne.w	80020b4 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eac:	2c04      	cmp	r4, #4
 8001eae:	f000 816c 	beq.w	800218a <HAL_I2C_EV_IRQHandler+0x35a>
 8001eb2:	2c08      	cmp	r4, #8
 8001eb4:	f000 8169 	beq.w	800218a <HAL_I2C_EV_IRQHandler+0x35a>
 8001eb8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001ebc:	f000 8165 	beq.w	800218a <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ec6:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ec8:	2311      	movs	r3, #17
 8001eca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed6:	f7ff ff0d 	bl	8001cf4 <HAL_I2C_MasterTxCpltCallback>
 8001eda:	e0f6      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001edc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ede:	f044 0401 	orr.w	r4, r4, #1
 8001ee2:	b2e4      	uxtb	r4, r4
 8001ee4:	e7c1      	b.n	8001e6a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee6:	6904      	ldr	r4, [r0, #16]
 8001ee8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001eec:	d105      	bne.n	8001efa <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001eee:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001ef2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ef4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001ef6:	d1f2      	bne.n	8001ede <HAL_I2C_EV_IRQHandler+0xae>
 8001ef8:	e7b5      	b.n	8001e66 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8001efa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001efc:	b934      	cbnz	r4, 8001f0c <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001efe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f00:	11e4      	asrs	r4, r4, #7
 8001f02:	f004 0406 	and.w	r4, r4, #6
 8001f06:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001f0a:	e7ae      	b.n	8001e6a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001f0c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001f0e:	2c01      	cmp	r4, #1
 8001f10:	d1ac      	bne.n	8001e6c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f14:	11e4      	asrs	r4, r4, #7
 8001f16:	f004 0406 	and.w	r4, r4, #6
 8001f1a:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001f1e:	e7a4      	b.n	8001e6a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001f20:	4c6e      	ldr	r4, [pc, #440]	; (80020dc <HAL_I2C_EV_IRQHandler+0x2ac>)
 8001f22:	400c      	ands	r4, r1
 8001f24:	b11c      	cbz	r4, 8001f2e <HAL_I2C_EV_IRQHandler+0xfe>
 8001f26:	0596      	lsls	r6, r2, #22
 8001f28:	d501      	bpl.n	8001f2e <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001f2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f2c:	e7d9      	b.n	8001ee2 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001f2e:	4c6c      	ldr	r4, [pc, #432]	; (80020e0 <HAL_I2C_EV_IRQHandler+0x2b0>)
 8001f30:	400c      	ands	r4, r1
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d09a      	beq.n	8001e6c <HAL_I2C_EV_IRQHandler+0x3c>
 8001f36:	0594      	lsls	r4, r2, #22
 8001f38:	d598      	bpl.n	8001e6c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8001f3a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001f40:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f44:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001f48:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8001f4a:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f4c:	f040 80a8 	bne.w	80020a0 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001f50:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001f52:	b947      	cbnz	r7, 8001f66 <HAL_I2C_EV_IRQHandler+0x136>
 8001f54:	2c40      	cmp	r4, #64	; 0x40
 8001f56:	d106      	bne.n	8001f66 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f58:	9701      	str	r7, [sp, #4]
 8001f5a:	695c      	ldr	r4, [r3, #20]
 8001f5c:	9401      	str	r4, [sp, #4]
 8001f5e:	699c      	ldr	r4, [r3, #24]
 8001f60:	9401      	str	r4, [sp, #4]
 8001f62:	9c01      	ldr	r4, [sp, #4]
 8001f64:	e782      	b.n	8001e6c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001f66:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001f68:	b98c      	cbnz	r4, 8001f8e <HAL_I2C_EV_IRQHandler+0x15e>
 8001f6a:	6907      	ldr	r7, [r0, #16]
 8001f6c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001f70:	d10d      	bne.n	8001f8e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f72:	9402      	str	r4, [sp, #8]
 8001f74:	695c      	ldr	r4, [r3, #20]
 8001f76:	9402      	str	r4, [sp, #8]
 8001f78:	699c      	ldr	r4, [r3, #24]
 8001f7a:	9402      	str	r4, [sp, #8]
 8001f7c:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001f84:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001f86:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001f88:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8001f8a:	6504      	str	r4, [r0, #80]	; 0x50
 8001f8c:	e76e      	b.n	8001e6c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001f8e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001f90:	b2a4      	uxth	r4, r4
 8001f92:	b954      	cbnz	r4, 8001faa <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f94:	9403      	str	r4, [sp, #12]
 8001f96:	695c      	ldr	r4, [r3, #20]
 8001f98:	9403      	str	r4, [sp, #12]
 8001f9a:	699c      	ldr	r4, [r3, #24]
 8001f9c:	9403      	str	r4, [sp, #12]
 8001f9e:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fa0:	681c      	ldr	r4, [r3, #0]
 8001fa2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001fa6:	601c      	str	r4, [r3, #0]
 8001fa8:	e019      	b.n	8001fde <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8001faa:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001fac:	b2a4      	uxth	r4, r4
 8001fae:	2c01      	cmp	r4, #1
 8001fb0:	d142      	bne.n	8002038 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001fb2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fb8:	681c      	ldr	r4, [r3, #0]
 8001fba:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001fbe:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001fc0:	685c      	ldr	r4, [r3, #4]
 8001fc2:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fc8:	681c      	ldr	r4, [r3, #0]
 8001fca:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001fce:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd0:	2400      	movs	r4, #0
 8001fd2:	9404      	str	r4, [sp, #16]
 8001fd4:	695c      	ldr	r4, [r3, #20]
 8001fd6:	9404      	str	r4, [sp, #16]
 8001fd8:	699c      	ldr	r4, [r3, #24]
 8001fda:	9404      	str	r4, [sp, #16]
 8001fdc:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 8001fde:	2400      	movs	r4, #0
 8001fe0:	e7d3      	b.n	8001f8a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe2:	9405      	str	r4, [sp, #20]
 8001fe4:	695c      	ldr	r4, [r3, #20]
 8001fe6:	9405      	str	r4, [sp, #20]
 8001fe8:	699c      	ldr	r4, [r3, #24]
 8001fea:	9405      	str	r4, [sp, #20]
 8001fec:	9c05      	ldr	r4, [sp, #20]
 8001fee:	e7d7      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001ff0:	2e04      	cmp	r6, #4
 8001ff2:	d015      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x1f0>
 8001ff4:	2e08      	cmp	r6, #8
 8001ff6:	d013      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001ff8:	f1be 0f12 	cmp.w	lr, #18
 8001ffc:	d010      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001ffe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002000:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	bf14      	ite	ne
 8002006:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800200a:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 800200e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002010:	2400      	movs	r4, #0
 8002012:	9406      	str	r4, [sp, #24]
 8002014:	695c      	ldr	r4, [r3, #20]
 8002016:	9406      	str	r4, [sp, #24]
 8002018:	699c      	ldr	r4, [r3, #24]
 800201a:	9406      	str	r4, [sp, #24]
 800201c:	9c06      	ldr	r4, [sp, #24]
 800201e:	e7de      	b.n	8001fde <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002020:	681c      	ldr	r4, [r3, #0]
 8002022:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002026:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002028:	2400      	movs	r4, #0
 800202a:	9407      	str	r4, [sp, #28]
 800202c:	695c      	ldr	r4, [r3, #20]
 800202e:	9407      	str	r4, [sp, #28]
 8002030:	699c      	ldr	r4, [r3, #24]
 8002032:	9407      	str	r4, [sp, #28]
 8002034:	9c07      	ldr	r4, [sp, #28]
 8002036:	e7b3      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8002038:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800203a:	b2a4      	uxth	r4, r4
 800203c:	2c02      	cmp	r4, #2
 800203e:	d11c      	bne.n	800207a <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8002040:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002042:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002044:	681c      	ldr	r4, [r3, #0]
 8002046:	bf1d      	ittte	ne
 8002048:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 800204c:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800204e:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002050:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002054:	bf18      	it	ne
 8002056:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800205a:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800205c:	685c      	ldr	r4, [r3, #4]
 800205e:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002060:	bf42      	ittt	mi
 8002062:	685c      	ldrmi	r4, [r3, #4]
 8002064:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8002068:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2400      	movs	r4, #0
 800206c:	9408      	str	r4, [sp, #32]
 800206e:	695c      	ldr	r4, [r3, #20]
 8002070:	9408      	str	r4, [sp, #32]
 8002072:	699c      	ldr	r4, [r3, #24]
 8002074:	9408      	str	r4, [sp, #32]
 8002076:	9c08      	ldr	r4, [sp, #32]
 8002078:	e7b1      	b.n	8001fde <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800207a:	681c      	ldr	r4, [r3, #0]
 800207c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002080:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002082:	685c      	ldr	r4, [r3, #4]
 8002084:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002086:	bf42      	ittt	mi
 8002088:	685c      	ldrmi	r4, [r3, #4]
 800208a:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800208e:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002090:	2400      	movs	r4, #0
 8002092:	9409      	str	r4, [sp, #36]	; 0x24
 8002094:	695c      	ldr	r4, [r3, #20]
 8002096:	9409      	str	r4, [sp, #36]	; 0x24
 8002098:	699c      	ldr	r4, [r3, #24]
 800209a:	9409      	str	r4, [sp, #36]	; 0x24
 800209c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800209e:	e79e      	b.n	8001fde <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a0:	2400      	movs	r4, #0
 80020a2:	940a      	str	r4, [sp, #40]	; 0x28
 80020a4:	695c      	ldr	r4, [r3, #20]
 80020a6:	940a      	str	r4, [sp, #40]	; 0x28
 80020a8:	699c      	ldr	r4, [r3, #24]
 80020aa:	940a      	str	r4, [sp, #40]	; 0x28
 80020ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80020ae:	e6dd      	b.n	8001e6c <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020b0:	2a21      	cmp	r2, #33	; 0x21
 80020b2:	d003      	beq.n	80020bc <HAL_I2C_EV_IRQHandler+0x28c>
 80020b4:	2940      	cmp	r1, #64	; 0x40
 80020b6:	d108      	bne.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020b8:	2a22      	cmp	r2, #34	; 0x22
 80020ba:	d106      	bne.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 80020bc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80020be:	b292      	uxth	r2, r2
 80020c0:	b982      	cbnz	r2, 80020e4 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c8:	605a      	str	r2, [r3, #4]
}
 80020ca:	b00d      	add	sp, #52	; 0x34
 80020cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00100004 	.word	0x00100004
 80020d4:	00010004 	.word	0x00010004
 80020d8:	00010080 	.word	0x00010080
 80020dc:	00010008 	.word	0x00010008
 80020e0:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80020e8:	2a40      	cmp	r2, #64	; 0x40
 80020ea:	d127      	bne.n	800213c <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 80020ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80020ee:	b97a      	cbnz	r2, 8002110 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020f0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80020f2:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020f4:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020f6:	d105      	bne.n	8002104 <HAL_I2C_EV_IRQHandler+0x2d4>
 80020f8:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020fa:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 80020fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020fe:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8002100:	6503      	str	r3, [r0, #80]	; 0x50
 8002102:	e7e2      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002104:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002108:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 800210a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800210c:	3301      	adds	r3, #1
 800210e:	e7f7      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 8002110:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002112:	2a01      	cmp	r2, #1
 8002114:	d102      	bne.n	800211c <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002116:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	e7f5      	b.n	8002108 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 800211c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800211e:	2a02      	cmp	r2, #2
 8002120:	d1d3      	bne.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002122:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002126:	2a22      	cmp	r2, #34	; 0x22
 8002128:	d104      	bne.n	8002134 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e7ca      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002134:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002138:	2a21      	cmp	r2, #33	; 0x21
 800213a:	d1c6      	bne.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800213c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800213e:	1c51      	adds	r1, r2, #1
 8002140:	6241      	str	r1, [r0, #36]	; 0x24
 8002142:	7812      	ldrb	r2, [r2, #0]
 8002144:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002146:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002148:	3b01      	subs	r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800214e:	e7bc      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002150:	2c00      	cmp	r4, #0
 8002152:	d0ba      	beq.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 8002154:	0594      	lsls	r4, r2, #22
 8002156:	d5b8      	bpl.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002158:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800215a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800215e:	2a21      	cmp	r2, #33	; 0x21
 8002160:	d1b3      	bne.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 8002162:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002164:	b292      	uxth	r2, r2
 8002166:	2a00      	cmp	r2, #0
 8002168:	d1e8      	bne.n	800213c <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800216a:	2904      	cmp	r1, #4
 800216c:	d00d      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x35a>
 800216e:	2908      	cmp	r1, #8
 8002170:	d00b      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x35a>
 8002172:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002176:	d008      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800217e:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002180:	2311      	movs	r3, #17
 8002182:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8002188:	e6a2      	b.n	8001ed0 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002190:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002198:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800219c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800219e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80021ac:	2a40      	cmp	r2, #64	; 0x40
 80021ae:	f47f ae92 	bne.w	8001ed6 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80021b2:	f7ff fda5 	bl	8001d00 <HAL_I2C_MemTxCpltCallback>
 80021b6:	e788      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80021b8:	4d90      	ldr	r5, [pc, #576]	; (80023fc <HAL_I2C_EV_IRQHandler+0x5cc>)
 80021ba:	400d      	ands	r5, r1
 80021bc:	2d00      	cmp	r5, #0
 80021be:	d041      	beq.n	8002244 <HAL_I2C_EV_IRQHandler+0x414>
 80021c0:	0551      	lsls	r1, r2, #21
 80021c2:	d53f      	bpl.n	8002244 <HAL_I2C_EV_IRQHandler+0x414>
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d13d      	bne.n	8002244 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021c8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80021cc:	2a22      	cmp	r2, #34	; 0x22
 80021ce:	f47f af7c 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 80021d2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80021d4:	b292      	uxth	r2, r2
    if(tmp > 3U)
 80021d6:	2a03      	cmp	r2, #3
 80021d8:	d913      	bls.n	8002202 <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	1c51      	adds	r1, r2, #1
 80021e0:	6241      	str	r1, [r0, #36]	; 0x24
 80021e2:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80021e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 80021ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	f47f af6a 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021f6:	6802      	ldr	r2, [r0, #0]
 80021f8:	6853      	ldr	r3, [r2, #4]
 80021fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021fe:	6053      	str	r3, [r2, #4]
 8002200:	e763      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 8002202:	2a01      	cmp	r2, #1
 8002204:	f63f af61 	bhi.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002216:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002218:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	1c51      	adds	r1, r2, #1
 800221e:	6241      	str	r1, [r0, #36]	; 0x24
 8002220:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002222:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002224:	3b01      	subs	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800222a:	2320      	movs	r3, #32
 800222c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8002230:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002232:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800223a:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800223c:	d158      	bne.n	80022f0 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800223e:	f7ff fd60 	bl	8001d02 <HAL_I2C_MemRxCpltCallback>
 8002242:	e742      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002244:	2c00      	cmp	r4, #0
 8002246:	f43f af40 	beq.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 800224a:	0597      	lsls	r7, r2, #22
 800224c:	f57f af3d 	bpl.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002250:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8002252:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002254:	b292      	uxth	r2, r2
 8002256:	2a04      	cmp	r2, #4
 8002258:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800225a:	d108      	bne.n	800226e <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002262:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002264:	1c51      	adds	r1, r2, #1
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	6241      	str	r1, [r0, #36]	; 0x24
 800226a:	7013      	strb	r3, [r2, #0]
 800226c:	e76b      	b.n	8002146 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 800226e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002270:	b2a4      	uxth	r4, r4
 8002272:	2c03      	cmp	r4, #3
 8002274:	d108      	bne.n	8002288 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800227c:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002284:	6019      	str	r1, [r3, #0]
 8002286:	e7ed      	b.n	8002264 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 8002288:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800228a:	b2a4      	uxth	r4, r4
 800228c:	2c02      	cmp	r4, #2
 800228e:	d1e9      	bne.n	8002264 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8002290:	3901      	subs	r1, #1
 8002292:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	bf9d      	ittte	ls
 8002298:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 800229c:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800229e:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022a0:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022a4:	bf98      	it	ls
 80022a6:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022aa:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	1c51      	adds	r1, r2, #1
 80022b0:	6241      	str	r1, [r0, #36]	; 0x24
 80022b2:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80022b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	6242      	str	r2, [r0, #36]	; 0x24
 80022c2:	6802      	ldr	r2, [r0, #0]
 80022c4:	6912      	ldr	r2, [r2, #16]
 80022c6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80022c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022ca:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022d2:	6853      	ldr	r3, [r2, #4]
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022da:	2320      	movs	r3, #32
 80022dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80022e4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ec:	2a40      	cmp	r2, #64	; 0x40
 80022ee:	e7a5      	b.n	800223c <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022f0:	f7ff fd01 	bl	8001cf6 <HAL_I2C_MasterRxCpltCallback>
 80022f4:	e6e9      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022f6:	4c42      	ldr	r4, [pc, #264]	; (8002400 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80022f8:	400c      	ands	r4, r1
 80022fa:	b174      	cbz	r4, 800231a <HAL_I2C_EV_IRQHandler+0x4ea>
 80022fc:	0596      	lsls	r6, r2, #22
 80022fe:	d50c      	bpl.n	800231a <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002300:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002302:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002304:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002308:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800230a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 800230e:	bf54      	ite	pl
 8002310:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8002312:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002314:	f7ff fcf2 	bl	8001cfc <HAL_I2C_AddrCallback>
 8002318:	e6d7      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800231a:	4c3a      	ldr	r4, [pc, #232]	; (8002404 <HAL_I2C_EV_IRQHandler+0x5d4>)
 800231c:	400c      	ands	r4, r1
 800231e:	2c00      	cmp	r4, #0
 8002320:	d074      	beq.n	800240c <HAL_I2C_EV_IRQHandler+0x5dc>
 8002322:	0594      	lsls	r4, r2, #22
 8002324:	d572      	bpl.n	800240c <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8002326:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002330:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002332:	2100      	movs	r1, #0
 8002334:	910b      	str	r1, [sp, #44]	; 0x2c
 8002336:	6959      	ldr	r1, [r3, #20]
 8002338:	910b      	str	r1, [sp, #44]	; 0x2c
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	f041 0101 	orr.w	r1, r1, #1
 8002340:	6019      	str	r1, [r3, #0]
 8002342:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800234a:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 8002350:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002352:	d50c      	bpl.n	800236e <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002354:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002358:	2922      	cmp	r1, #34	; 0x22
 800235a:	d003      	beq.n	8002364 <HAL_I2C_EV_IRQHandler+0x534>
 800235c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002360:	292a      	cmp	r1, #42	; 0x2a
 8002362:	d129      	bne.n	80023b8 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002364:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002366:	6809      	ldr	r1, [r1, #0]
 8002368:	6849      	ldr	r1, [r1, #4]
 800236a:	b289      	uxth	r1, r1
 800236c:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800236e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002370:	b289      	uxth	r1, r1
 8002372:	b1e1      	cbz	r1, 80023ae <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002374:	6959      	ldr	r1, [r3, #20]
 8002376:	074f      	lsls	r7, r1, #29
 8002378:	d508      	bpl.n	800238c <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800237a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	1c4c      	adds	r4, r1, #1
 8002380:	6244      	str	r4, [r0, #36]	; 0x24
 8002382:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002384:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002386:	3b01      	subs	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800238c:	6801      	ldr	r1, [r0, #0]
 800238e:	694b      	ldr	r3, [r1, #20]
 8002390:	065e      	lsls	r6, r3, #25
 8002392:	d508      	bpl.n	80023a6 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002396:	6909      	ldr	r1, [r1, #16]
 8002398:	1c5c      	adds	r4, r3, #1
 800239a:	6244      	str	r4, [r0, #36]	; 0x24
 800239c:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 800239e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023b0:	b123      	cbz	r3, 80023bc <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 80023b2:	f7ff fca9 	bl	8001d08 <I2C_ITError>
 80023b6:	e688      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80023b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023ba:	e7d4      	b.n	8002366 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80023bc:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80023c0:	2902      	cmp	r1, #2
 80023c2:	d80a      	bhi.n	80023da <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80023c6:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80023ca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80023d4:	f7ff fc93 	bl	8001cfe <HAL_I2C_ListenCpltCallback>
 80023d8:	e677      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023dc:	2b22      	cmp	r3, #34	; 0x22
 80023de:	d002      	beq.n	80023e6 <HAL_I2C_EV_IRQHandler+0x5b6>
 80023e0:	2a22      	cmp	r2, #34	; 0x22
 80023e2:	f47f ae72 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023e6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80023ea:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023f4:	f7ff fc81 	bl	8001cfa <HAL_I2C_SlaveRxCpltCallback>
 80023f8:	e667      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 80023fa:	bf00      	nop
 80023fc:	00010040 	.word	0x00010040
 8002400:	00010002 	.word	0x00010002
 8002404:	00010010 	.word	0x00010010
 8002408:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800240c:	4e39      	ldr	r6, [pc, #228]	; (80024f4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 800240e:	4c3a      	ldr	r4, [pc, #232]	; (80024f8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8002410:	402e      	ands	r6, r5
 8002412:	400c      	ands	r4, r1
 8002414:	2e00      	cmp	r6, #0
 8002416:	d036      	beq.n	8002486 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002418:	4d38      	ldr	r5, [pc, #224]	; (80024fc <HAL_I2C_EV_IRQHandler+0x6cc>)
 800241a:	400d      	ands	r5, r1
 800241c:	b33d      	cbz	r5, 800246e <HAL_I2C_EV_IRQHandler+0x63e>
 800241e:	0555      	lsls	r5, r2, #21
 8002420:	d525      	bpl.n	800246e <HAL_I2C_EV_IRQHandler+0x63e>
 8002422:	bb24      	cbnz	r4, 800246e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 8002424:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002428:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800242a:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 800242c:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 800242e:	2a00      	cmp	r2, #0
 8002430:	f43f ae4b 	beq.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002434:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002436:	1c54      	adds	r4, r2, #1
 8002438:	6244      	str	r4, [r0, #36]	; 0x24
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800243e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002440:	3a01      	subs	r2, #1
 8002442:	b292      	uxth	r2, r2
 8002444:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002446:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002448:	b292      	uxth	r2, r2
 800244a:	2a00      	cmp	r2, #0
 800244c:	f47f ae3d 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 8002450:	2929      	cmp	r1, #41	; 0x29
 8002452:	f47f ae3a 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800245e:	2321      	movs	r3, #33	; 0x21
 8002460:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002462:	2328      	movs	r3, #40	; 0x28
 8002464:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002468:	f7ff fc46 	bl	8001cf8 <HAL_I2C_SlaveTxCpltCallback>
 800246c:	e62d      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800246e:	2c00      	cmp	r4, #0
 8002470:	f43f ae2b 	beq.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 8002474:	0594      	lsls	r4, r2, #22
 8002476:	f57f ae28 	bpl.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 800247a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800247c:	b292      	uxth	r2, r2
 800247e:	2a00      	cmp	r2, #0
 8002480:	f47f ae5c 	bne.w	800213c <HAL_I2C_EV_IRQHandler+0x30c>
 8002484:	e621      	b.n	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002486:	4d1e      	ldr	r5, [pc, #120]	; (8002500 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8002488:	400d      	ands	r5, r1
 800248a:	b335      	cbz	r5, 80024da <HAL_I2C_EV_IRQHandler+0x6aa>
 800248c:	0551      	lsls	r1, r2, #21
 800248e:	d524      	bpl.n	80024da <HAL_I2C_EV_IRQHandler+0x6aa>
 8002490:	bb1c      	cbnz	r4, 80024da <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8002492:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002496:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002498:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 800249a:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 800249c:	2900      	cmp	r1, #0
 800249e:	f43f ae14 	beq.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	1c4c      	adds	r4, r1, #1
 80024a8:	6244      	str	r4, [r0, #36]	; 0x24
 80024aa:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80024ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f47f ae06 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 80024be:	2a2a      	cmp	r2, #42	; 0x2a
 80024c0:	f47f ae03 	bne.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024c4:	6802      	ldr	r2, [r0, #0]
 80024c6:	6853      	ldr	r3, [r2, #4]
 80024c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024cc:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024ce:	2322      	movs	r3, #34	; 0x22
 80024d0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024d2:	2328      	movs	r3, #40	; 0x28
 80024d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80024d8:	e78c      	b.n	80023f4 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024da:	2c00      	cmp	r4, #0
 80024dc:	f43f adf5 	beq.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
 80024e0:	0592      	lsls	r2, r2, #22
 80024e2:	f57f adf2 	bpl.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80024e6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024e8:	b292      	uxth	r2, r2
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	f43f aded 	beq.w	80020ca <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024f2:	e6b7      	b.n	8002264 <HAL_I2C_EV_IRQHandler+0x434>
 80024f4:	00100004 	.word	0x00100004
 80024f8:	00010004 	.word	0x00010004
 80024fc:	00010080 	.word	0x00010080
 8002500:	00010040 	.word	0x00010040

08002504 <HAL_I2C_ER_IRQHandler>:
{
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002506:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800250a:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800250c:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800250e:	4216      	tst	r6, r2
{
 8002510:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002512:	d008      	beq.n	8002526 <HAL_I2C_ER_IRQHandler+0x22>
 8002514:	05e8      	lsls	r0, r5, #23
 8002516:	d506      	bpl.n	8002526 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002518:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002520:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002524:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002526:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 800252a:	d008      	beq.n	800253e <HAL_I2C_ER_IRQHandler+0x3a>
 800252c:	05e9      	lsls	r1, r5, #23
 800252e:	d506      	bpl.n	800253e <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002530:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002532:	f042 0202 	orr.w	r2, r2, #2
 8002536:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002538:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800253c:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800253e:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 8002542:	d036      	beq.n	80025b2 <HAL_I2C_ER_IRQHandler+0xae>
 8002544:	05ea      	lsls	r2, r5, #23
 8002546:	d534      	bpl.n	80025b2 <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 8002548:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 800254c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800254e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002552:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002554:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8002556:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002558:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800255a:	d158      	bne.n	800260e <HAL_I2C_ER_IRQHandler+0x10a>
 800255c:	2900      	cmp	r1, #0
 800255e:	d156      	bne.n	800260e <HAL_I2C_ER_IRQHandler+0x10a>
 8002560:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002564:	2921      	cmp	r1, #33	; 0x21
 8002566:	d003      	beq.n	8002570 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002568:	2a28      	cmp	r2, #40	; 0x28
 800256a:	d150      	bne.n	800260e <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800256c:	2821      	cmp	r0, #33	; 0x21
 800256e:	d14e      	bne.n	800260e <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 8002570:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002574:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002576:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 8002578:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800257a:	d001      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x7c>
 800257c:	2908      	cmp	r1, #8
 800257e:	d12c      	bne.n	80025da <HAL_I2C_ER_IRQHandler+0xd6>
 8002580:	2a28      	cmp	r2, #40	; 0x28
 8002582:	d12a      	bne.n	80025da <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_I2C_ER_IRQHandler+0x130>)
 8002586:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800258e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002594:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80025a4:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80025ae:	f7ff fba6 	bl	8001cfe <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80025b2:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 80025b6:	d009      	beq.n	80025cc <HAL_I2C_ER_IRQHandler+0xc8>
 80025b8:	05eb      	lsls	r3, r5, #23
 80025ba:	d507      	bpl.n	80025cc <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80025ca:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ce:	b373      	cbz	r3, 800262e <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 80025d0:	4620      	mov	r0, r4
}
 80025d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80025d6:	f7ff bb97 	b.w	8001d08 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025da:	2a21      	cmp	r2, #33	; 0x21
 80025dc:	d123      	bne.n	8002626 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025de:	4915      	ldr	r1, [pc, #84]	; (8002634 <HAL_I2C_ER_IRQHandler+0x130>)
 80025e0:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025e2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	2220      	movs	r2, #32
 80025e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	2200      	movs	r2, #0
 80025ec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025fc:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff fb76 	bl	8001cf8 <HAL_I2C_SlaveTxCpltCallback>
 800260c:	e7d1      	b.n	80025b2 <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800260e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002616:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800261a:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800261c:	bf02      	ittt	eq
 800261e:	681a      	ldreq	r2, [r3, #0]
 8002620:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8002624:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	e7c1      	b.n	80025b2 <HAL_I2C_ER_IRQHandler+0xae>
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002630:	00010100 	.word	0x00010100
 8002634:	ffff0000 	.word	0xffff0000

08002638 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002638:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800263a:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800263c:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800263e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002646:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002648:	2200      	movs	r2, #0
 800264a:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 800264c:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800264e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002650:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002652:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002656:	2960      	cmp	r1, #96	; 0x60
 8002658:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002664:	d107      	bne.n	8002676 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002666:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002670:	f7ff fb49 	bl	8001d06 <HAL_I2C_AbortCpltCallback>
 8002674:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800267e:	f7ff fb41 	bl	8001d04 <HAL_I2C_ErrorCallback>
 8002682:	bd08      	pop	{r3, pc}

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	4604      	mov	r4, r0
 800268a:	b918      	cbnz	r0, 8002694 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800268c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800268e:	b002      	add	sp, #8
 8002690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002694:	6803      	ldr	r3, [r0, #0]
 8002696:	07dd      	lsls	r5, r3, #31
 8002698:	d410      	bmi.n	80026bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	0798      	lsls	r0, r3, #30
 800269e:	d458      	bmi.n	8002752 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	071a      	lsls	r2, r3, #28
 80026a4:	f100 809a 	bmi.w	80027dc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	075b      	lsls	r3, r3, #29
 80026ac:	f100 80b8 	bmi.w	8002820 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	69a2      	ldr	r2, [r4, #24]
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	f040 8119 	bne.w	80028ea <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80026b8:	2000      	movs	r0, #0
 80026ba:	e7e8      	b.n	800268e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026bc:	4ba6      	ldr	r3, [pc, #664]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	f002 020c 	and.w	r2, r2, #12
 80026c4:	2a04      	cmp	r2, #4
 80026c6:	d007      	beq.n	80026d8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ce:	2a08      	cmp	r2, #8
 80026d0:	d10a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0259      	lsls	r1, r3, #9
 80026d6:	d507      	bpl.n	80026e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	4b9f      	ldr	r3, [pc, #636]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	039a      	lsls	r2, r3, #14
 80026de:	d5dc      	bpl.n	800269a <HAL_RCC_OscConfig+0x16>
 80026e0:	6863      	ldr	r3, [r4, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1d9      	bne.n	800269a <HAL_RCC_OscConfig+0x16>
 80026e6:	e7d1      	b.n	800268c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	4d9b      	ldr	r5, [pc, #620]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d111      	bne.n	8002716 <HAL_RCC_OscConfig+0x92>
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026fa:	f7fe fb15 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4d96      	ldr	r5, [pc, #600]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002700:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	682b      	ldr	r3, [r5, #0]
 8002704:	039b      	lsls	r3, r3, #14
 8002706:	d4c8      	bmi.n	800269a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe fb0e 	bl	8000d28 <HAL_GetTick>
 800270c:	1b80      	subs	r0, r0, r6
 800270e:	2864      	cmp	r0, #100	; 0x64
 8002710:	d9f7      	bls.n	8002702 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
 8002714:	e7bb      	b.n	800268e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271a:	d104      	bne.n	8002726 <HAL_RCC_OscConfig+0xa2>
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	e7e5      	b.n	80026f2 <HAL_RCC_OscConfig+0x6e>
 8002726:	682a      	ldr	r2, [r5, #0]
 8002728:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800272c:	602a      	str	r2, [r5, #0]
 800272e:	682a      	ldr	r2, [r5, #0]
 8002730:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002734:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1df      	bne.n	80026fa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800273a:	f7fe faf5 	bl	8000d28 <HAL_GetTick>
 800273e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	039f      	lsls	r7, r3, #14
 8002744:	d5a9      	bpl.n	800269a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002746:	f7fe faef 	bl	8000d28 <HAL_GetTick>
 800274a:	1b80      	subs	r0, r0, r6
 800274c:	2864      	cmp	r0, #100	; 0x64
 800274e:	d9f7      	bls.n	8002740 <HAL_RCC_OscConfig+0xbc>
 8002750:	e7df      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	f012 0f0c 	tst.w	r2, #12
 800275a:	d007      	beq.n	800276c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002762:	2a08      	cmp	r2, #8
 8002764:	d111      	bne.n	800278a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	025e      	lsls	r6, r3, #9
 800276a:	d40e      	bmi.n	800278a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276c:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	0795      	lsls	r5, r2, #30
 8002772:	d502      	bpl.n	800277a <HAL_RCC_OscConfig+0xf6>
 8002774:	68e2      	ldr	r2, [r4, #12]
 8002776:	2a01      	cmp	r2, #1
 8002778:	d188      	bne.n	800268c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	6921      	ldr	r1, [r4, #16]
 800277e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002782:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002786:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002788:	e78a      	b.n	80026a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800278a:	68e2      	ldr	r2, [r4, #12]
 800278c:	4b73      	ldr	r3, [pc, #460]	; (800295c <HAL_RCC_OscConfig+0x2d8>)
 800278e:	b1b2      	cbz	r2, 80027be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002794:	f7fe fac8 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4d6f      	ldr	r5, [pc, #444]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800279a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	0798      	lsls	r0, r3, #30
 80027a0:	d507      	bpl.n	80027b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	682b      	ldr	r3, [r5, #0]
 80027a4:	6922      	ldr	r2, [r4, #16]
 80027a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027ae:	602b      	str	r3, [r5, #0]
 80027b0:	e776      	b.n	80026a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b2:	f7fe fab9 	bl	8000d28 <HAL_GetTick>
 80027b6:	1b80      	subs	r0, r0, r6
 80027b8:	2802      	cmp	r0, #2
 80027ba:	d9ef      	bls.n	800279c <HAL_RCC_OscConfig+0x118>
 80027bc:	e7a9      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80027be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027c0:	f7fe fab2 	bl	8000d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c4:	4d64      	ldr	r5, [pc, #400]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80027c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c8:	682b      	ldr	r3, [r5, #0]
 80027ca:	0799      	lsls	r1, r3, #30
 80027cc:	f57f af68 	bpl.w	80026a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe faaa 	bl	8000d28 <HAL_GetTick>
 80027d4:	1b80      	subs	r0, r0, r6
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d9f6      	bls.n	80027c8 <HAL_RCC_OscConfig+0x144>
 80027da:	e79a      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027dc:	6962      	ldr	r2, [r4, #20]
 80027de:	4b60      	ldr	r3, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x2dc>)
 80027e0:	b17a      	cbz	r2, 8002802 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027e6:	f7fe fa9f 	bl	8000d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4d5b      	ldr	r5, [pc, #364]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027f0:	079f      	lsls	r7, r3, #30
 80027f2:	f53f af59 	bmi.w	80026a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f6:	f7fe fa97 	bl	8000d28 <HAL_GetTick>
 80027fa:	1b80      	subs	r0, r0, r6
 80027fc:	2802      	cmp	r0, #2
 80027fe:	d9f6      	bls.n	80027ee <HAL_RCC_OscConfig+0x16a>
 8002800:	e787      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002802:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002804:	f7fe fa90 	bl	8000d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	4d53      	ldr	r5, [pc, #332]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800280a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800280e:	0798      	lsls	r0, r3, #30
 8002810:	f57f af4a 	bpl.w	80026a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe fa88 	bl	8000d28 <HAL_GetTick>
 8002818:	1b80      	subs	r0, r0, r6
 800281a:	2802      	cmp	r0, #2
 800281c:	d9f6      	bls.n	800280c <HAL_RCC_OscConfig+0x188>
 800281e:	e778      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002820:	4b4d      	ldr	r3, [pc, #308]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 8002822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002824:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002828:	d128      	bne.n	800287c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	9201      	str	r2, [sp, #4]
 800282c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800283e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	4d48      	ldr	r5, [pc, #288]	; (8002964 <HAL_RCC_OscConfig+0x2e0>)
 8002842:	682b      	ldr	r3, [r5, #0]
 8002844:	05d9      	lsls	r1, r3, #23
 8002846:	d51b      	bpl.n	8002880 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	68a3      	ldr	r3, [r4, #8]
 800284a:	4d43      	ldr	r5, [pc, #268]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 800284c:	2b01      	cmp	r3, #1
 800284e:	d127      	bne.n	80028a0 <HAL_RCC_OscConfig+0x21c>
 8002850:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002858:	f7fe fa66 	bl	8000d28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	4d3e      	ldr	r5, [pc, #248]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800285e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002866:	079b      	lsls	r3, r3, #30
 8002868:	d539      	bpl.n	80028de <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800286a:	2e00      	cmp	r6, #0
 800286c:	f43f af20 	beq.w	80026b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002870:	4a39      	ldr	r2, [pc, #228]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 8002872:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	e719      	b.n	80026b0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800287c:	2600      	movs	r6, #0
 800287e:	e7df      	b.n	8002840 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002888:	f7fe fa4e 	bl	8000d28 <HAL_GetTick>
 800288c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	05da      	lsls	r2, r3, #23
 8002892:	d4d9      	bmi.n	8002848 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fa48 	bl	8000d28 <HAL_GetTick>
 8002898:	1bc0      	subs	r0, r0, r7
 800289a:	2802      	cmp	r0, #2
 800289c:	d9f7      	bls.n	800288e <HAL_RCC_OscConfig+0x20a>
 800289e:	e738      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d104      	bne.n	80028ae <HAL_RCC_OscConfig+0x22a>
 80028a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	672b      	str	r3, [r5, #112]	; 0x70
 80028ac:	e7d0      	b.n	8002850 <HAL_RCC_OscConfig+0x1cc>
 80028ae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	672a      	str	r2, [r5, #112]	; 0x70
 80028b6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80028b8:	f022 0204 	bic.w	r2, r2, #4
 80028bc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ca      	bne.n	8002858 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80028c2:	f7fe fa31 	bl	8000d28 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80028ca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028ce:	0798      	lsls	r0, r3, #30
 80028d0:	d5cb      	bpl.n	800286a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fa29 	bl	8000d28 <HAL_GetTick>
 80028d6:	1bc0      	subs	r0, r0, r7
 80028d8:	4540      	cmp	r0, r8
 80028da:	d9f7      	bls.n	80028cc <HAL_RCC_OscConfig+0x248>
 80028dc:	e719      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fa23 	bl	8000d28 <HAL_GetTick>
 80028e2:	1bc0      	subs	r0, r0, r7
 80028e4:	4540      	cmp	r0, r8
 80028e6:	d9bd      	bls.n	8002864 <HAL_RCC_OscConfig+0x1e0>
 80028e8:	e713      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4d1b      	ldr	r5, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
 80028ec:	68ab      	ldr	r3, [r5, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	f43f aeca 	beq.w	800268c <HAL_RCC_OscConfig+0x8>
 80028f8:	4e1b      	ldr	r6, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x2e4>)
 80028fa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80028fe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002900:	d134      	bne.n	800296c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002902:	f7fe fa11 	bl	8000d28 <HAL_GetTick>
 8002906:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	0199      	lsls	r1, r3, #6
 800290c:	d41e      	bmi.n	800294c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290e:	6a22      	ldr	r2, [r4, #32]
 8002910:	69e3      	ldr	r3, [r4, #28]
 8002912:	4313      	orrs	r3, r2
 8002914:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002916:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800291a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800291c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002920:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4c0d      	ldr	r4, [pc, #52]	; (8002958 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002924:	0852      	lsrs	r2, r2, #1
 8002926:	3a01      	subs	r2, #1
 8002928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800292c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800292e:	2301      	movs	r3, #1
 8002930:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002932:	f7fe f9f9 	bl	8000d28 <HAL_GetTick>
 8002936:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	019a      	lsls	r2, r3, #6
 800293c:	f53f aebc 	bmi.w	80026b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f9f2 	bl	8000d28 <HAL_GetTick>
 8002944:	1b40      	subs	r0, r0, r5
 8002946:	2802      	cmp	r0, #2
 8002948:	d9f6      	bls.n	8002938 <HAL_RCC_OscConfig+0x2b4>
 800294a:	e6e2      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe f9ec 	bl	8000d28 <HAL_GetTick>
 8002950:	1bc0      	subs	r0, r0, r7
 8002952:	2802      	cmp	r0, #2
 8002954:	d9d8      	bls.n	8002908 <HAL_RCC_OscConfig+0x284>
 8002956:	e6dc      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
 8002958:	40023800 	.word	0x40023800
 800295c:	42470000 	.word	0x42470000
 8002960:	42470e80 	.word	0x42470e80
 8002964:	40007000 	.word	0x40007000
 8002968:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800296c:	f7fe f9dc 	bl	8000d28 <HAL_GetTick>
 8002970:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	682b      	ldr	r3, [r5, #0]
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	f57f ae9f 	bpl.w	80026b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe f9d5 	bl	8000d28 <HAL_GetTick>
 800297e:	1b00      	subs	r0, r0, r4
 8002980:	2802      	cmp	r0, #2
 8002982:	d9f6      	bls.n	8002972 <HAL_RCC_OscConfig+0x2ee>
 8002984:	e6c5      	b.n	8002712 <HAL_RCC_OscConfig+0x8e>
 8002986:	bf00      	nop

08002988 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002988:	4913      	ldr	r1, [pc, #76]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800298a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298c:	688b      	ldr	r3, [r1, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x16>
 8002996:	2b08      	cmp	r3, #8
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800299a:	4810      	ldr	r0, [pc, #64]	; (80029dc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800299c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800299e:	4810      	ldr	r0, [pc, #64]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x58>)
 80029a0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ac:	bf14      	ite	ne
 80029ae:	480c      	ldrne	r0, [pc, #48]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b0:	480a      	ldreq	r0, [pc, #40]	; (80029dc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029b6:	bf18      	it	ne
 80029b8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	fba1 0100 	umull	r0, r1, r1, r0
 80029c2:	f7fd fc01 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80029d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029d6:	bd08      	pop	{r3, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	007a1200 	.word	0x007a1200

080029e4 <HAL_RCC_ClockConfig>:
{
 80029e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80029ea:	4604      	mov	r4, r0
 80029ec:	b910      	cbnz	r0, 80029f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
 80029f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HAL_RCC_ClockConfig+0x124>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f002 020f 	and.w	r2, r2, #15
 80029fc:	428a      	cmp	r2, r1
 80029fe:	d328      	bcc.n	8002a52 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	6821      	ldr	r1, [r4, #0]
 8002a02:	078f      	lsls	r7, r1, #30
 8002a04:	d42d      	bmi.n	8002a62 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	07c8      	lsls	r0, r1, #31
 8002a08:	d440      	bmi.n	8002a8c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <HAL_RCC_ClockConfig+0x124>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f002 020f 	and.w	r2, r2, #15
 8002a12:	4295      	cmp	r5, r2
 8002a14:	d366      	bcc.n	8002ae4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	0751      	lsls	r1, r2, #29
 8002a1a:	d46c      	bmi.n	8002af6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	0713      	lsls	r3, r2, #28
 8002a1e:	d507      	bpl.n	8002a30 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a20:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <HAL_RCC_ClockConfig+0x128>)
 8002a22:	6921      	ldr	r1, [r4, #16]
 8002a24:	6893      	ldr	r3, [r2, #8]
 8002a26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a2e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a30:	f7ff ffaa 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_RCC_ClockConfig+0x128>)
 8002a36:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <HAL_RCC_ClockConfig+0x12c>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	40d8      	lsrs	r0, r3
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_RCC_ClockConfig+0x130>)
 8002a44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe f924 	bl	8000c94 <HAL_InitTick>
  return HAL_OK;
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	4299      	cmp	r1, r3
 8002a5e:	d1c6      	bne.n	80029ee <HAL_RCC_ClockConfig+0xa>
 8002a60:	e7ce      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1c>
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	bf1e      	ittt	ne
 8002a6a:	689a      	ldrne	r2, [r3, #8]
 8002a6c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002a70:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a74:	bf42      	ittt	mi
 8002a76:	689a      	ldrmi	r2, [r3, #8]
 8002a78:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002a7c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68a0      	ldr	r0, [r4, #8]
 8002a82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a86:	4302      	orrs	r2, r0
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	e7bc      	b.n	8002a06 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8c:	6862      	ldr	r2, [r4, #4]
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <HAL_RCC_ClockConfig+0x128>)
 8002a90:	2a01      	cmp	r2, #1
 8002a92:	d11d      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	d0a8      	beq.n	80029ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9c:	4e1b      	ldr	r6, [pc, #108]	; (8002b0c <HAL_RCC_ClockConfig+0x128>)
 8002a9e:	68b3      	ldr	r3, [r6, #8]
 8002aa0:	f023 0303 	bic.w	r3, r3, #3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002aa8:	f7fe f93e 	bl	8000d28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002ab0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	68b3      	ldr	r3, [r6, #8]
 8002ab4:	6862      	ldr	r2, [r4, #4]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002abe:	d0a4      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe f932 	bl	8000d28 <HAL_GetTick>
 8002ac4:	1bc0      	subs	r0, r0, r7
 8002ac6:	4540      	cmp	r0, r8
 8002ac8:	d9f3      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002aca:	2003      	movs	r0, #3
}
 8002acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad0:	1e91      	subs	r1, r2, #2
 8002ad2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	d802      	bhi.n	8002ade <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002adc:	e7dd      	b.n	8002a9a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	f013 0f02 	tst.w	r3, #2
 8002ae2:	e7da      	b.n	8002a9a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae4:	b2ea      	uxtb	r2, r5
 8002ae6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	429d      	cmp	r5, r3
 8002af0:	f47f af7d 	bne.w	80029ee <HAL_RCC_ClockConfig+0xa>
 8002af4:	e78f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af6:	4905      	ldr	r1, [pc, #20]	; (8002b0c <HAL_RCC_ClockConfig+0x128>)
 8002af8:	68e0      	ldr	r0, [r4, #12]
 8002afa:	688b      	ldr	r3, [r1, #8]
 8002afc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002b00:	4303      	orrs	r3, r0
 8002b02:	608b      	str	r3, [r1, #8]
 8002b04:	e78a      	b.n	8002a1c <HAL_RCC_ClockConfig+0x38>
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	080041d8 	.word	0x080041d8
 8002b14:	20000000 	.word	0x20000000

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002b18:	4b01      	ldr	r3, [pc, #4]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	4a03      	ldr	r2, [pc, #12]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b32:	6810      	ldr	r0, [r2, #0]
}
 8002b34:	40d8      	lsrs	r0, r3
 8002b36:	4770      	bx	lr
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	080041e8 	.word	0x080041e8
 8002b40:	20000000 	.word	0x20000000

08002b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b44:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002b46:	4604      	mov	r4, r0
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d036      	beq.n	8002bba <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002b50:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002b54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b58:	b91b      	cbnz	r3, 8002b62 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b5a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b5e:	f7fd fed5 	bl	800090c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b62:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b64:	68a0      	ldr	r0, [r4, #8]
 8002b66:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002b6e:	680b      	ldr	r3, [r1, #0]
 8002b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b74:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	4303      	orrs	r3, r0
 8002b7a:	68e0      	ldr	r0, [r4, #12]
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	6920      	ldr	r0, [r4, #16]
 8002b80:	4303      	orrs	r3, r0
 8002b82:	6960      	ldr	r0, [r4, #20]
 8002b84:	4303      	orrs	r3, r0
 8002b86:	69e0      	ldr	r0, [r4, #28]
 8002b88:	4303      	orrs	r3, r0
 8002b8a:	6a20      	ldr	r0, [r4, #32]
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b90:	4303      	orrs	r3, r0
 8002b92:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002b96:	4303      	orrs	r3, r0
 8002b98:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b9a:	0c12      	lsrs	r2, r2, #16
 8002b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b9e:	f002 0204 	and.w	r2, r2, #4
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ba6:	69cb      	ldr	r3, [r1, #28]
 8002ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bac:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bae:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002bb8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
}
 8002bbc:	bd10      	pop	{r4, pc}

08002bbe <HAL_TIM_PeriodElapsedCallback>:
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_IC_CaptureCallback>:
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIM_TriggerCallback>:
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc8:	6803      	ldr	r3, [r0, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	0791      	lsls	r1, r2, #30
{
 8002bce:	b510      	push	{r4, lr}
 8002bd0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd2:	d50e      	bpl.n	8002bf2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	0792      	lsls	r2, r2, #30
 8002bd8:	d50b      	bpl.n	8002bf2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bda:	f06f 0202 	mvn.w	r2, #2
 8002bde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be8:	d077      	beq.n	8002cda <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	f7ff ffea 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	0750      	lsls	r0, r2, #29
 8002bf8:	d510      	bpl.n	8002c1c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	0751      	lsls	r1, r2, #29
 8002bfe:	d50d      	bpl.n	8002c1c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c00:	f06f 0204 	mvn.w	r2, #4
 8002c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c06:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c08:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c0a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c10:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c12:	d068      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c14:	f7ff ffd5 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	0712      	lsls	r2, r2, #28
 8002c22:	d50f      	bpl.n	8002c44 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	0710      	lsls	r0, r2, #28
 8002c28:	d50c      	bpl.n	8002c44 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2a:	f06f 0208 	mvn.w	r2, #8
 8002c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c32:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3a:	d05a      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3c:	f7ff ffc1 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c40:	2300      	movs	r3, #0
 8002c42:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	06d2      	lsls	r2, r2, #27
 8002c4a:	d510      	bpl.n	8002c6e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	06d0      	lsls	r0, r2, #27
 8002c50:	d50d      	bpl.n	8002c6e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c52:	f06f 0210 	mvn.w	r2, #16
 8002c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c58:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c60:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c64:	d04b      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	f7ff ffac 	bl	8002bc2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	07d1      	lsls	r1, r2, #31
 8002c74:	d508      	bpl.n	8002c88 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	07d2      	lsls	r2, r2, #31
 8002c7a:	d505      	bpl.n	8002c88 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c7c:	f06f 0201 	mvn.w	r2, #1
 8002c80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff ff9b 	bl	8002bbe <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	0610      	lsls	r0, r2, #24
 8002c8e:	d508      	bpl.n	8002ca2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	0611      	lsls	r1, r2, #24
 8002c94:	d505      	bpl.n	8002ca2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f000 f8d6 	bl	8002e4e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	0652      	lsls	r2, r2, #25
 8002ca8:	d508      	bpl.n	8002cbc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	0650      	lsls	r0, r2, #25
 8002cae:	d505      	bpl.n	8002cbc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff ff85 	bl	8002bc6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	0691      	lsls	r1, r2, #26
 8002cc2:	d522      	bpl.n	8002d0a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	0692      	lsls	r2, r2, #26
 8002cc8:	d51f      	bpl.n	8002d0a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002cce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd0:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002cd6:	f000 b8b9 	b.w	8002e4c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	f7ff ff71 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7ff ff70 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ce4:	e783      	b.n	8002bee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	f7ff ff6b 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff ff6a 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cf0:	e792      	b.n	8002c18 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	f7ff ff65 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7ff ff64 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cfc:	e7a0      	b.n	8002c40 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	f7ff ff5f 	bl	8002bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7ff ff5e 	bl	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d08:	e7af      	b.n	8002c6a <HAL_TIM_IRQHandler+0xa2>
 8002d0a:	bd10      	pop	{r4, pc}

08002d0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002d0e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002d10:	4290      	cmp	r0, r2
 8002d12:	d012      	beq.n	8002d3a <TIM_Base_SetConfig+0x2e>
 8002d14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d18:	d00f      	beq.n	8002d3a <TIM_Base_SetConfig+0x2e>
 8002d1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d1e:	4290      	cmp	r0, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_Base_SetConfig+0x2e>
 8002d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d26:	4290      	cmp	r0, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_Base_SetConfig+0x2e>
 8002d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_Base_SetConfig+0x2e>
 8002d32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d36:	4290      	cmp	r0, r2
 8002d38:	d11d      	bne.n	8002d76 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002d3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d40:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <TIM_Base_SetConfig+0xbc>)
 8002d44:	4290      	cmp	r0, r2
 8002d46:	d104      	bne.n	8002d52 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d48:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	e028      	b.n	8002da4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002d52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d56:	d0f7      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d58:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <TIM_Base_SetConfig+0xc0>)
 8002d5a:	4290      	cmp	r0, r2
 8002d5c:	d0f4      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d62:	4290      	cmp	r0, r2
 8002d64:	d0f0      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d6a:	4290      	cmp	r0, r2
 8002d6c:	d0ec      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d6e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d72:	4290      	cmp	r0, r2
 8002d74:	d0e8      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <TIM_Base_SetConfig+0xc4>)
 8002d78:	4290      	cmp	r0, r2
 8002d7a:	d0e5      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d80:	4290      	cmp	r0, r2
 8002d82:	d0e1      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d88:	4290      	cmp	r0, r2
 8002d8a:	d0dd      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d8c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d90:	4290      	cmp	r0, r2
 8002d92:	d0d9      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d98:	4290      	cmp	r0, r2
 8002d9a:	d0d5      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
 8002d9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da0:	4290      	cmp	r0, r2
 8002da2:	d0d1      	beq.n	8002d48 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8002da4:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da6:	688b      	ldr	r3, [r1, #8]
 8002da8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002daa:	680b      	ldr	r3, [r1, #0]
 8002dac:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <TIM_Base_SetConfig+0xbc>)
 8002db0:	4298      	cmp	r0, r3
 8002db2:	d006      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb6>
 8002db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db8:	4298      	cmp	r0, r3
 8002dba:	d002      	beq.n	8002dc2 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	6143      	str	r3, [r0, #20]
}
 8002dc0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc2:	690b      	ldr	r3, [r1, #16]
 8002dc4:	6303      	str	r3, [r0, #48]	; 0x30
 8002dc6:	e7f9      	b.n	8002dbc <TIM_Base_SetConfig+0xb0>
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40014000 	.word	0x40014000

08002dd4 <HAL_TIM_Base_Init>:
{ 
 8002dd4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	b1a0      	cbz	r0, 8002e04 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002dda:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002de2:	b91b      	cbnz	r3, 8002dec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002de4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002de8:	f7fd fdb6 	bl	8000958 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	1d21      	adds	r1, r4, #4
 8002df6:	f7ff ff89 	bl	8002d0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002e00:	2000      	movs	r0, #0
 8002e02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e04:	2001      	movs	r0, #1
}
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002e08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e0c:	2b01      	cmp	r3, #1
{
 8002e0e:	b510      	push	{r4, lr}
 8002e10:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002e14:	d018      	beq.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e16:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e1a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002e1c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e1e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e20:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e26:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e34:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002e42:	2300      	movs	r3, #0
 8002e44:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002e48:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8002e4a:	bd10      	pop	{r4, pc}

08002e4c <HAL_TIMEx_CommutationCallback>:
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	4770      	bx	lr

08002e50 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e50:	b084      	sub	sp, #16
 8002e52:	b538      	push	{r3, r4, r5, lr}
 8002e54:	ad05      	add	r5, sp, #20
 8002e56:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e5c:	2b01      	cmp	r3, #1
{
 8002e5e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e60:	d126      	bne.n	8002eb0 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e62:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e6a:	68c3      	ldr	r3, [r0, #12]
 8002e6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e74:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e76:	68c3      	ldr	r3, [r0, #12]
 8002e78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e7c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e80:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e82:	bf02      	ittt	eq
 8002e84:	68c3      	ldreq	r3, [r0, #12]
 8002e86:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002e8a:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002e8c:	f000 f88a 	bl	8002fa4 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8002e90:	9b08      	ldr	r3, [sp, #32]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e96:	68a3      	ldr	r3, [r4, #8]
 8002e98:	f043 0306 	orr.w	r3, r3, #6
 8002e9c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	f043 0320 	orr.w	r3, r3, #32
 8002ea4:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eaa:	2000      	movs	r0, #0
 8002eac:	b004      	add	sp, #16
 8002eae:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002eb0:	68c3      	ldr	r3, [r0, #12]
 8002eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb6:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002eb8:	f000 f874 	bl	8002fa4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ec0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ec2:	e7e5      	b.n	8002e90 <USB_CoreInit+0x40>

08002ec4 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ec4:	6883      	ldr	r3, [r0, #8]
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002ecc:	2000      	movs	r0, #0
 8002ece:	4770      	bx	lr

08002ed0 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ed0:	6883      	ldr	r3, [r0, #8]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	4770      	bx	lr

08002edc <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002edc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ede:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002ee0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002ee2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002ee6:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002ee8:	d108      	bne.n	8002efc <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002eea:	68c3      	ldr	r3, [r0, #12]
 8002eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ef0:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8002ef2:	2032      	movs	r0, #50	; 0x32
 8002ef4:	f7fd ff1e 	bl	8000d34 <HAL_Delay>
  
  return HAL_OK;
}
 8002ef8:	2000      	movs	r0, #0
 8002efa:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002efc:	2900      	cmp	r1, #0
 8002efe:	d1f8      	bne.n	8002ef2 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002f00:	68c3      	ldr	r3, [r0, #12]
 8002f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f06:	60c3      	str	r3, [r0, #12]
 8002f08:	e7f3      	b.n	8002ef2 <USB_SetCurrentMode+0x16>
	...

08002f0c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002f0c:	0189      	lsls	r1, r1, #6
 8002f0e:	f041 0120 	orr.w	r1, r1, #32
 8002f12:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <USB_FlushTxFifo+0x20>)
 8002f14:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002f16:	3a01      	subs	r2, #1
 8002f18:	d005      	beq.n	8002f26 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f1a:	6903      	ldr	r3, [r0, #16]
 8002f1c:	f013 0320 	ands.w	r3, r3, #32
 8002f20:	d1f9      	bne.n	8002f16 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002f22:	4618      	mov	r0, r3
 8002f24:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f26:	2003      	movs	r0, #3
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	00030d41 	.word	0x00030d41

08002f30 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f30:	2310      	movs	r3, #16
 8002f32:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <USB_FlushRxFifo+0x1c>)
 8002f34:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002f36:	3a01      	subs	r2, #1
 8002f38:	d005      	beq.n	8002f46 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f3a:	6903      	ldr	r3, [r0, #16]
 8002f3c:	f013 0310 	ands.w	r3, r3, #16
 8002f40:	d1f9      	bne.n	8002f36 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002f42:	4618      	mov	r0, r3
 8002f44:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f46:	2003      	movs	r0, #3
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	00030d41 	.word	0x00030d41

08002f50 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002f50:	b510      	push	{r4, lr}
 8002f52:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8002f56:	b94c      	cbnz	r4, 8002f6c <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8002f58:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002f5a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8002f66:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8002f68:	4299      	cmp	r1, r3
 8002f6a:	d101      	bne.n	8002f70 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8002f70:	f851 0b04 	ldr.w	r0, [r1], #4
 8002f74:	6010      	str	r0, [r2, #0]
 8002f76:	e7f7      	b.n	8002f68 <USB_WritePacket+0x18>

08002f78 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8002f78:	3203      	adds	r2, #3
 8002f7a:	f022 0203 	bic.w	r2, r2, #3
 8002f7e:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002f80:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8002f84:	4291      	cmp	r1, r2
 8002f86:	d101      	bne.n	8002f8c <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8002f8c:	6803      	ldr	r3, [r0, #0]
 8002f8e:	f841 3b04 	str.w	r3, [r1], #4
 8002f92:	e7f7      	b.n	8002f84 <USB_ReadPacket+0xc>

08002f94 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8002f94:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002f96:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8002f98:	4010      	ands	r0, r2
 8002f9a:	4770      	bx	lr

08002f9c <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8002f9c:	6940      	ldr	r0, [r0, #20]
}
 8002f9e:	f000 0001 	and.w	r0, r0, #1
 8002fa2:	4770      	bx	lr

08002fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	d101      	bne.n	8002fae <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002faa:	2003      	movs	r0, #3
 8002fac:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fae:	6902      	ldr	r2, [r0, #16]
 8002fb0:	2a00      	cmp	r2, #0
 8002fb2:	daf8      	bge.n	8002fa6 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002fb4:	6903      	ldr	r3, [r0, #16]
 8002fb6:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <USB_CoreReset+0x2c>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	d0f3      	beq.n	8002faa <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002fc2:	6903      	ldr	r3, [r0, #16]
 8002fc4:	f013 0301 	ands.w	r3, r3, #1
 8002fc8:	d1f9      	bne.n	8002fbe <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002fca:	4618      	mov	r0, r3
}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	00030d41 	.word	0x00030d41

08002fd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	b538      	push	{r3, r4, r5, lr}
 8002fd8:	4604      	mov	r4, r0
 8002fda:	a805      	add	r0, sp, #20
 8002fdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8002fe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8002fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ff0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ff4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffc:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8002ffe:	9b07      	ldr	r3, [sp, #28]
 8003000:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003002:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003006:	d13c      	bne.n	8003082 <USB_HostInit+0xae>
 8003008:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800300c:	d039      	beq.n	8003082 <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003016:	2110      	movs	r1, #16
 8003018:	4620      	mov	r0, r4
 800301a:	f7ff ff77 	bl	8002f0c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800301e:	4620      	mov	r0, r4
 8003020:	f7ff ff86 	bl	8002f30 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003024:	2300      	movs	r3, #0
 8003026:	9906      	ldr	r1, [sp, #24]
 8003028:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8003030:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003032:	428b      	cmp	r3, r1
 8003034:	d12a      	bne.n	800308c <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8003036:	2101      	movs	r1, #1
 8003038:	4620      	mov	r0, r4
 800303a:	f000 f85a 	bl	80030f2 <USB_DriveVbus>
  
  HAL_Delay(200U);
 800303e:	20c8      	movs	r0, #200	; 0xc8
 8003040:	f7fd fe78 	bl	8000d34 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8003048:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8003052:	d120      	bne.n	8003096 <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003058:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800305c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <USB_HostInit+0xd8>)
 8003060:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003064:	9b08      	ldr	r3, [sp, #32]
 8003066:	b91b      	cbnz	r3, 8003070 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003068:	69a3      	ldr	r3, [r4, #24]
 800306a:	f043 0310 	orr.w	r3, r3, #16
 800306e:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003070:	69a2      	ldr	r2, [r4, #24]
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <USB_HostInit+0xdc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8003078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307c:	2000      	movs	r0, #0
 800307e:	b004      	add	sp, #16
 8003080:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8003082:	f023 0304 	bic.w	r3, r3, #4
 8003086:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800308a:	e7c4      	b.n	8003016 <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800308c:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800308e:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003090:	60d5      	str	r5, [r2, #12]
 8003092:	3220      	adds	r2, #32
 8003094:	e7cd      	b.n	8003032 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 8003096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 800309c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80030a0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <USB_HostInit+0xe0>)
 80030a4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030a8:	e7dc      	b.n	8003064 <USB_HostInit+0x90>
 80030aa:	bf00      	nop
 80030ac:	004000e0 	.word	0x004000e0
 80030b0:	a3200008 	.word	0xa3200008
 80030b4:	00e00300 	.word	0x00e00300

080030b8 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80030b8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80030bc:	f023 0303 	bic.w	r3, r3, #3
{
 80030c0:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80030c2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80030c6:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80030ca:	f001 0303 	and.w	r3, r1, #3
 80030ce:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 80030d0:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80030d2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 80030d6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80030da:	d104      	bne.n	80030e6 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80030dc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80030e0:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 80030e2:	2000      	movs	r0, #0
 80030e4:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80030e6:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 80030e8:	bf04      	itt	eq
 80030ea:	f241 7370 	movweq	r3, #6000	; 0x1770
 80030ee:	6053      	streq	r3, [r2, #4]
 80030f0:	e7f7      	b.n	80030e2 <USB_InitFSLSPClkSel+0x2a>

080030f2 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80030f2:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80030f4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80030f8:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80030fa:	9b01      	ldr	r3, [sp, #4]
 80030fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003100:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003102:	9b01      	ldr	r3, [sp, #4]
 8003104:	04da      	lsls	r2, r3, #19
 8003106:	d406      	bmi.n	8003116 <USB_DriveVbus+0x24>
 8003108:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 800310a:	bf02      	ittt	eq
 800310c:	9b01      	ldreq	r3, [sp, #4]
 800310e:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003112:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003116:	9b01      	ldr	r3, [sp, #4]
 8003118:	04db      	lsls	r3, r3, #19
 800311a:	d505      	bpl.n	8003128 <USB_DriveVbus+0x36>
 800311c:	b921      	cbnz	r1, 8003128 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800311e:	9b01      	ldr	r3, [sp, #4]
 8003120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003124:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8003128:	2000      	movs	r0, #0
 800312a:	b002      	add	sp, #8
 800312c:	4770      	bx	lr

0800312e <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800312e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003132:	6880      	ldr	r0, [r0, #8]
}
 8003134:	b280      	uxth	r0, r0
 8003136:	4770      	bx	lr

08003138 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003138:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 800313a:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800313e:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8003142:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8003146:	f04f 36ff 	mov.w	r6, #4294967295
 800314a:	60a6      	str	r6, [r4, #8]
 800314c:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800314e:	2d03      	cmp	r5, #3
 8003150:	d814      	bhi.n	800317c <USB_HC_Init+0x44>
 8003152:	e8df f005 	tbb	[pc, r5]
 8003156:	5302      	.short	0x5302
 8003158:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800315a:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800315e:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003160:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8003162:	da04      	bge.n	800316e <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003164:	68e6      	ldr	r6, [r4, #12]
 8003166:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800316a:	60e6      	str	r6, [r4, #12]
 800316c:	e006      	b.n	800317c <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 800316e:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003172:	d003      	beq.n	800317c <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003174:	68e6      	ldr	r6, [r4, #12]
 8003176:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 800317a:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800317c:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 8003180:	2601      	movs	r6, #1
 8003182:	fa06 f101 	lsl.w	r1, r6, r1
 8003186:	ea41 010c 	orr.w	r1, r1, ip
 800318a:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800318e:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8003190:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8003192:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003194:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8003198:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800319c:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80031a0:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031a2:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80031a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80031a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80031ac:	2f00      	cmp	r7, #0
 80031ae:	bfb4      	ite	lt
 80031b0:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 80031b4:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80031b6:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80031ba:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80031bc:	ea4f 4385 	mov.w	r3, r5, lsl #18
 80031c0:	ea42 0201 	orr.w	r2, r2, r1
 80031c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031c8:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80031cc:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80031d0:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80031d4:	bf0c      	ite	eq
 80031d6:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 80031da:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80031dc:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80031de:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 80031e0:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80031e2:	bf02      	ittt	eq
 80031e4:	6823      	ldreq	r3, [r4, #0]
 80031e6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80031ea:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 80031ec:	2000      	movs	r0, #0
 80031ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80031f0:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 80031f4:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80031f6:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 80031f8:	dac0      	bge.n	800317c <USB_HC_Init+0x44>
 80031fa:	e7b3      	b.n	8003164 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80031fc:	f240 2625 	movw	r6, #549	; 0x225
 8003200:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8003202:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8003204:	bfbe      	ittt	lt
 8003206:	68e6      	ldrlt	r6, [r4, #12]
 8003208:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 800320c:	60e6      	strlt	r6, [r4, #12]
 800320e:	e7b5      	b.n	800317c <USB_HC_Init+0x44>

08003210 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 800321e:	2300      	movs	r3, #0
 8003220:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 8003222:	2300      	movs	r3, #0
 8003224:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 800322a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322e:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323a:	d02b      	beq.n	8003294 <USB_HC_StartXfer+0x84>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	791b      	ldrb	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d127      	bne.n	8003294 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <USB_HC_StartXfer+0x52>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	795b      	ldrb	r3, [r3, #5]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d107      	bne.n	8003262 <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	4619      	mov	r1, r3
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fa0f 	bl	800367c <USB_DoPing>
      return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e10d      	b.n	800347e <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d115      	bne.n	8003294 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	4619      	mov	r1, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800328c:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d019      	beq.n	80032d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	8912      	ldrh	r2, [r2, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	3b01      	subs	r3, #1
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	8912      	ldrh	r2, [r2, #8]
 80032ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b0:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80032b2:	8bfa      	ldrh	r2, [r7, #30]
 80032b4:	8b3b      	ldrh	r3, [r7, #24]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d90c      	bls.n	80032d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80032ba:	8b3b      	ldrh	r3, [r7, #24]
 80032bc:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80032be:	8bfb      	ldrh	r3, [r7, #30]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	8912      	ldrh	r2, [r2, #8]
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	e001      	b.n	80032d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	78db      	ldrb	r3, [r3, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80032dc:	8bfb      	ldrh	r3, [r7, #30]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	8912      	ldrh	r2, [r2, #8]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	4619      	mov	r1, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8003304:	8bfb      	ldrh	r3, [r7, #30]
 8003306:	04db      	lsls	r3, r3, #19
 8003308:	4618      	mov	r0, r3
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <USB_HC_StartXfer+0x278>)
 800330c:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800330e:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	7a9b      	ldrb	r3, [r3, #10]
 8003314:	075b      	lsls	r3, r3, #29
 8003316:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800331a:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800331c:	610b      	str	r3, [r1, #16]
  
  if (dma)
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	4619      	mov	r1, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003376:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	4619      	mov	r1, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	7f7a      	ldrb	r2, [r7, #29]
 800339a:	0752      	lsls	r2, r2, #29
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033b8:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c0:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d14f      	bne.n	800347c <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	78db      	ldrb	r3, [r3, #3]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d14b      	bne.n	800347c <USB_HC_StartXfer+0x26c>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d047      	beq.n	800347c <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	79db      	ldrb	r3, [r3, #7]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d831      	bhi.n	8003458 <USB_HC_StartXfer+0x248>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <USB_HC_StartXfer+0x1ec>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003431 	.word	0x08003431
 8003404:	0800340d 	.word	0x0800340d
 8003408:	08003431 	.word	0x08003431
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	3303      	adds	r3, #3
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8003416:	8b7a      	ldrh	r2, [r7, #26]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	b29b      	uxth	r3, r3
 800341e:	429a      	cmp	r2, r3
 8003420:	d91c      	bls.n	800345c <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	619a      	str	r2, [r3, #24]
        }
        break;
 800342e:	e015      	b.n	800345c <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	3303      	adds	r3, #3
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800343a:	8b7a      	ldrh	r2, [r7, #26]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	b29b      	uxth	r3, r3
 8003446:	429a      	cmp	r2, r3
 8003448:	d90a      	bls.n	8003460 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	619a      	str	r2, [r3, #24]
        }
        break;
 8003456:	e003      	b.n	8003460 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8003458:	bf00      	nop
 800345a:	e002      	b.n	8003462 <USB_HC_StartXfer+0x252>
        break;
 800345c:	bf00      	nop
 800345e:	e000      	b.n	8003462 <USB_HC_StartXfer+0x252>
        break;
 8003460:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785a      	ldrb	r2, [r3, #1]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	b298      	uxth	r0, r3
 8003470:	2300      	movs	r3, #0
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4603      	mov	r3, r0
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff fd6a 	bl	8002f50 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	1ff80000 	.word	0x1ff80000

0800348c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	b29b      	uxth	r3, r3
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0c9b      	lsrs	r3, r3, #18
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <USB_HC_Halt+0x40>
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d160      	bne.n	80035ac <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	4619      	mov	r1, r3
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800350a:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d135      	bne.n	8003584 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003524:	4619      	mov	r1, r3
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003538:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	4619      	mov	r1, r3
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003568:	d81e      	bhi.n	80035a8 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800357c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003580:	d0ec      	beq.n	800355c <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003582:	e074      	b.n	800366e <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	4619      	mov	r1, r3
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035a4:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80035a6:	e062      	b.n	800366e <USB_HC_Halt+0x1c4>
          break;
 80035a8:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80035aa:	e060      	b.n	800366e <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b8:	4619      	mov	r1, r3
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035cc:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d135      	bne.n	8003648 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	4619      	mov	r1, r3
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035fc:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	4619      	mov	r1, r3
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800361e:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800362c:	d81e      	bhi.n	800366c <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003644:	d0ec      	beq.n	8003620 <USB_HC_Halt+0x176>
 8003646:	e012      	b.n	800366e <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	4619      	mov	r1, r3
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003668:	600b      	str	r3, [r1, #0]
 800366a:	e000      	b.n	800366e <USB_HC_Halt+0x1c4>
          break;
 800366c:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	04db      	lsls	r3, r3, #19
 80036a2:	4619      	mov	r1, r3
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <USB_DoPing+0x74>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	1ff80000 	.word	0x1ff80000

080036f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fbe5 	bl	8002ed0 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8003706:	2110      	movs	r1, #16
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fbff 	bl	8002f0c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fc0e 	bl	8002f30 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
 8003718:	e01f      	b.n	800375a <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003730:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003738:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003740:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	3301      	adds	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d9dc      	bls.n	800371a <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]
 8003764:	e034      	b.n	80037d0 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800377c:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003784:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800378c:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3301      	adds	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ac:	d80c      	bhi.n	80037c8 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c4:	d0ec      	beq.n	80037a0 <USB_StopHost+0xac>
 80037c6:	e000      	b.n	80037ca <USB_StopHost+0xd6>
        break;
 80037c8:	bf00      	nop
  for (i = 0; i <= 15; i++)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	3301      	adds	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	d9c7      	bls.n	8003766 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037dc:	461a      	mov	r2, r3
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ea:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fb69 	bl	8002ec4 <USB_EnableGlobalInt>
  return HAL_OK;  
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	4770      	bx	lr

08003800 <USBH_CDC_InterfaceDeInit>:
{
 8003800:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003802:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003806:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8003808:	7821      	ldrb	r1, [r4, #0]
{
 800380a:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 800380c:	b139      	cbz	r1, 800381e <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800380e:	f000 fb84 	bl	8003f1a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003812:	7821      	ldrb	r1, [r4, #0]
 8003814:	4628      	mov	r0, r5
 8003816:	f000 fb9d 	bl	8003f54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 800381a:	2300      	movs	r3, #0
 800381c:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800381e:	7b21      	ldrb	r1, [r4, #12]
 8003820:	b141      	cbz	r1, 8003834 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003822:	4628      	mov	r0, r5
 8003824:	f000 fb79 	bl	8003f1a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003828:	7b21      	ldrb	r1, [r4, #12]
 800382a:	4628      	mov	r0, r5
 800382c:	f000 fb92 	bl	8003f54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 8003830:	2300      	movs	r3, #0
 8003832:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003834:	7b61      	ldrb	r1, [r4, #13]
 8003836:	b141      	cbz	r1, 800384a <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003838:	4628      	mov	r0, r5
 800383a:	f000 fb6e 	bl	8003f1a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800383e:	7b61      	ldrb	r1, [r4, #13]
 8003840:	4628      	mov	r0, r5
 8003842:	f000 fb87 	bl	8003f54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 8003846:	2300      	movs	r3, #0
 8003848:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800384a:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 800384e:	69d8      	ldr	r0, [r3, #28]
 8003850:	b128      	cbz	r0, 800385e <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003852:	f000 fbe1 	bl	8004018 <free>
    phost->pActiveClass->pData = 0;
 8003856:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
}
 800385e:	2000      	movs	r0, #0
 8003860:	bd38      	pop	{r3, r4, r5, pc}

08003862 <USBH_CDC_InterfaceInit>:
{	
 8003862:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 8003864:	2202      	movs	r2, #2
{	
 8003866:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, 
 8003868:	2301      	movs	r3, #1
 800386a:	4611      	mov	r1, r2
{	
 800386c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 800386e:	f000 f9b4 	bl	8003bda <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8003872:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8003874:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 8003876:	d102      	bne.n	800387e <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003878:	2002      	movs	r0, #2
}
 800387a:	b005      	add	sp, #20
 800387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800387e:	4601      	mov	r1, r0
 8003880:	4628      	mov	r0, r5
 8003882:	f000 f9a1 	bl	8003bc8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003886:	2050      	movs	r0, #80	; 0x50
 8003888:	f8d5 7374 	ldr.w	r7, [r5, #884]	; 0x374
 800388c:	f000 fbbc 	bl	8004008 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003890:	231a      	movs	r3, #26
 8003892:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003896:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003898:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 800389c:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800389e:	bf42      	ittt	mi
 80038a0:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80038a2:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
 80038a6:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80038a8:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80038aa:	7841      	ldrb	r1, [r0, #1]
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 fb39 	bl	8003f24 <USBH_AllocPipe>
 80038b2:	4601      	mov	r1, r0
 80038b4:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 80038b6:	8960      	ldrh	r0, [r4, #10]
 80038b8:	9002      	str	r0, [sp, #8]
 80038ba:	2003      	movs	r0, #3
 80038bc:	9001      	str	r0, [sp, #4]
 80038be:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80038c2:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80038c6:	7862      	ldrb	r2, [r4, #1]
 80038c8:	9000      	str	r0, [sp, #0]
 80038ca:	4628      	mov	r0, r5
 80038cc:	f000 fb16 	bl	8003efc <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 80038d0:	2200      	movs	r2, #0
 80038d2:	7821      	ldrb	r1, [r4, #0]
 80038d4:	4628      	mov	r0, r5
 80038d6:	f7fd f9c4 	bl	8000c62 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 80038da:	2300      	movs	r3, #0
 80038dc:	461a      	mov	r2, r3
 80038de:	210a      	movs	r1, #10
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f97a 	bl	8003bda <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 80038e6:	28ff      	cmp	r0, #255	; 0xff
 80038e8:	d0c6      	beq.n	8003878 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80038ea:	231a      	movs	r3, #26
 80038ec:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80038f0:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80038f4:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80038f8:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
 80038fc:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003900:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003904:	bf0d      	iteet	eq
 8003906:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003908:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800390a:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800390c:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 800390e:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003912:	bf08      	it	eq
 8003914:	73a3      	strbeq	r3, [r4, #14]
 8003916:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800391a:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800391c:	bf18      	it	ne
 800391e:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003920:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003922:	bf14      	ite	ne
 8003924:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003926:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003928:	f000 fafc 	bl	8003f24 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 800392c:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800392e:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8003930:	4628      	mov	r0, r5
 8003932:	f000 faf7 	bl	8003f24 <USBH_AllocPipe>
 8003936:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003938:	8b20      	ldrh	r0, [r4, #24]
 800393a:	9002      	str	r0, [sp, #8]
 800393c:	2602      	movs	r6, #2
 800393e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003942:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003946:	7ba2      	ldrb	r2, [r4, #14]
 8003948:	7b61      	ldrb	r1, [r4, #13]
 800394a:	9601      	str	r6, [sp, #4]
 800394c:	9000      	str	r0, [sp, #0]
 800394e:	4628      	mov	r0, r5
 8003950:	f000 fad4 	bl	8003efc <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003954:	8b60      	ldrh	r0, [r4, #26]
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800395c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003960:	7be2      	ldrb	r2, [r4, #15]
 8003962:	7b21      	ldrb	r1, [r4, #12]
 8003964:	9601      	str	r6, [sp, #4]
 8003966:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003968:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800396a:	4628      	mov	r0, r5
 800396c:	f000 fac6 	bl	8003efc <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8003970:	4632      	mov	r2, r6
 8003972:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003974:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8003978:	4628      	mov	r0, r5
 800397a:	f7fd f972 	bl	8000c62 <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 800397e:	4632      	mov	r2, r6
 8003980:	7b21      	ldrb	r1, [r4, #12]
 8003982:	4628      	mov	r0, r5
 8003984:	f7fd f96d 	bl	8000c62 <USBH_LL_SetToggle>
      status = USBH_OK; 
 8003988:	4630      	mov	r0, r6
 800398a:	e776      	b.n	800387a <USBH_CDC_InterfaceInit+0x18>

0800398c <USBH_CDC_ClassRequest>:
{   
 800398c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 800398e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003992:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003994:	23a1      	movs	r3, #161	; 0xa1
 8003996:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003998:	2321      	movs	r3, #33	; 0x21
 800399a:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 800399c:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80039a2:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80039a4:	82c2      	strh	r2, [r0, #22]
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80039a6:	3140      	adds	r1, #64	; 0x40
{   
 80039a8:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80039aa:	f000 f97d 	bl	8003ca8 <USBH_CtlReq>
  if(status == USBH_OK)
 80039ae:	4605      	mov	r5, r0
 80039b0:	b920      	cbnz	r0, 80039bc <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 80039b2:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80039b6:	2102      	movs	r1, #2
 80039b8:	4620      	mov	r0, r4
 80039ba:	4798      	blx	r3
}
 80039bc:	4628      	mov	r0, r5
 80039be:	bd38      	pop	{r3, r4, r5, pc}

080039c0 <USBH_CDC_TransmitCallback>:
 80039c0:	4770      	bx	lr

080039c2 <USBH_CDC_ReceiveCallback>:
 80039c2:	4770      	bx	lr

080039c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80039c4:	4770      	bx	lr

080039c6 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 80039c6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80039ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 80039cc:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80039ce:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80039d2:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d83d      	bhi.n	8003a54 <USBH_CDC_Process+0x8e>
 80039d8:	e8df f003 	tbb	[pc, r3]
 80039dc:	42170603 	.word	0x42170603
 80039e0:	a8          	.byte	0xa8
 80039e1:	00          	.byte	0x00
    status = USBH_OK;
 80039e2:	2000      	movs	r0, #0
}
 80039e4:	b002      	add	sp, #8
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 80039e8:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80039ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 80039ec:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80039ee:	2320      	movs	r3, #32
 80039f0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80039f2:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80039f8:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80039fa:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 80039fc:	f000 f954 	bl	8003ca8 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003a00:	bb50      	cbnz	r0, 8003a58 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 8003a02:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 8003a04:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8003a08:	e024      	b.n	8003a54 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003a0a:	23a1      	movs	r3, #161	; 0xa1
 8003a0c:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003a0e:	2321      	movs	r3, #33	; 0x21
 8003a10:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003a12:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003a18:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003a1a:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003a1c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003a20:	f000 f942 	bl	8003ca8 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003a24:	b9c0      	cbnz	r0, 8003a58 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8003a26:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE; 
 8003a2a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8003a2e:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8003a38:	4291      	cmp	r1, r2
 8003a3a:	d10b      	bne.n	8003a54 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a40:	795a      	ldrb	r2, [r3, #5]
 8003a42:	4291      	cmp	r1, r2
 8003a44:	d106      	bne.n	8003a54 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003a46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d102      	bne.n	8003a54 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f7ff ffb8 	bl	80039c4 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003a54:	2001      	movs	r0, #1
 8003a56:	e7c5      	b.n	80039e4 <USBH_CDC_Process+0x1e>
    else if(req_status != USBH_BUSY)
 8003a58:	2801      	cmp	r0, #1
 8003a5a:	d0fb      	beq.n	8003a54 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_ERROR_STATE; 
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e7d1      	b.n	8003a04 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8003a60:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003a64:	2901      	cmp	r1, #1
 8003a66:	d023      	beq.n	8003ab0 <USBH_CDC_Process+0xea>
 8003a68:	2902      	cmp	r1, #2
 8003a6a:	d030      	beq.n	8003ace <USBH_CDC_Process+0x108>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003a6c:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8003a70:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003a72:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d047      	beq.n	8003b0a <USBH_CDC_Process+0x144>
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d1ea      	bne.n	8003a54 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 8003a7e:	7b31      	ldrb	r1, [r6, #12]
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7fd f8dd 	bl	8000c40 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8003a86:	2801      	cmp	r0, #1
 8003a88:	d1e4      	bne.n	8003a54 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003a8a:	7b31      	ldrb	r1, [r6, #12]
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f7fd f893 	bl	8000bb8 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8003a92:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003a94:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8003a96:	4293      	cmp	r3, r2
 8003a98:	4610      	mov	r0, r2
 8003a9a:	d040      	beq.n	8003b1e <USBH_CDC_Process+0x158>
 8003a9c:	8b71      	ldrh	r1, [r6, #26]
 8003a9e:	4291      	cmp	r1, r2
 8003aa0:	d23d      	bcs.n	8003b1e <USBH_CDC_Process+0x158>
        CDC_Handle->RxDataLength -= length ;
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003aa6:	6a33      	ldr	r3, [r6, #32]
 8003aa8:	4418      	add	r0, r3
 8003aaa:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8003aac:	2303      	movs	r3, #3
 8003aae:	e033      	b.n	8003b18 <USBH_CDC_Process+0x152>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003ab0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ab2:	8b22      	ldrh	r2, [r4, #24]
 8003ab4:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8003ab6:	9100      	str	r1, [sp, #0]
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003ab8:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8003aba:	bf98      	it	ls
 8003abc:	b282      	uxthls	r2, r0
 8003abe:	69e1      	ldr	r1, [r4, #28]
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 f9f4 	bl	8003eae <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8003ac6:	2302      	movs	r3, #2
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8003ac8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8003acc:	e7ce      	b.n	8003a6c <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 8003ace:	7b61      	ldrb	r1, [r4, #13]
 8003ad0:	f7fd f8b6 	bl	8000c40 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8003ad4:	2801      	cmp	r0, #1
 8003ad6:	d115      	bne.n	8003b04 <USBH_CDC_Process+0x13e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ada:	8b22      	ldrh	r2, [r4, #24]
 8003adc:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8003ade:	bf83      	ittte	hi
 8003ae0:	1a9b      	subhi	r3, r3, r2
 8003ae2:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003ae4:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 8003ae6:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003ae8:	bf8a      	itet	hi
 8003aea:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 8003aec:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003aee:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 8003af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003af2:	b10b      	cbz	r3, 8003af8 <USBH_CDC_Process+0x132>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8003af4:	2301      	movs	r3, #1
 8003af6:	e7e7      	b.n	8003ac8 <USBH_CDC_Process+0x102>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 8003af8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8003afc:	4628      	mov	r0, r5
 8003afe:	f7ff ff5f 	bl	80039c0 <USBH_CDC_TransmitCallback>
 8003b02:	e7b3      	b.n	8003a6c <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 8003b04:	2802      	cmp	r0, #2
 8003b06:	d1b1      	bne.n	8003a6c <USBH_CDC_Process+0xa6>
 8003b08:	e7f4      	b.n	8003af4 <USBH_CDC_Process+0x12e>
    USBH_BulkReceiveData (phost,
 8003b0a:	7b33      	ldrb	r3, [r6, #12]
 8003b0c:	8b72      	ldrh	r2, [r6, #26]
 8003b0e:	6a31      	ldr	r1, [r6, #32]
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 f9e3 	bl	8003edc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003b16:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8003b18:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8003b1c:	e79a      	b.n	8003a54 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003b24:	4628      	mov	r0, r5
 8003b26:	f7ff ff4c 	bl	80039c2 <USBH_CDC_ReceiveCallback>
 8003b2a:	e793      	b.n	8003a54 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00); 
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f000 f978 	bl	8003e22 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d18e      	bne.n	8003a54 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003b36:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8003b3a:	e78b      	b.n	8003a54 <USBH_CDC_Process+0x8e>

08003b3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003b3c:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8003b40:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8003b44:	2100      	movs	r1, #0
 8003b46:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d1fb      	bne.n	8003b46 <DeInitStateMachine+0xa>
 8003b4e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003b52:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8003b5c:	4291      	cmp	r1, r2
 8003b5e:	d1fb      	bne.n	8003b58 <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003b60:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8003b62:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003b64:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003b66:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003b68:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8003b6a:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8003b6e:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8003b70:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8003b72:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003b74:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003b78:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	4770      	bx	lr

08003b80 <USBH_Init>:
{
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	460d      	mov	r5, r1
  if(phost == NULL)
 8003b84:	4604      	mov	r4, r0
 8003b86:	b180      	cbz	r0, 8003baa <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8003b88:	2300      	movs	r3, #0
  phost->id = id;
 8003b8a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8003b8e:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8003b92:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 8003b96:	f7ff ffd1 	bl	8003b3c <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003b9a:	b10d      	cbz	r5, 8003ba0 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003b9c:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  USBH_LL_Init(phost);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7fc ffc1 	bl	8000b28 <USBH_LL_Init>
  return USBH_OK;
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 8003baa:	2002      	movs	r0, #2
}
 8003bac:	bd38      	pop	{r3, r4, r5, pc}

08003bae <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8003bae:	b149      	cbz	r1, 8003bc4 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003bb0:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003bb4:	b933      	cbnz	r3, 8003bc4 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 8003bbc:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8003bc4:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003bc6:	4770      	bx	lr

08003bc8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003bc8:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8003bcc:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8003bce:	bf86      	itte	hi
 8003bd0:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8003bd4:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8003bd6:	2002      	movls	r0, #2
  }
  return status;  
}
 8003bd8:	4770      	bx	lr

08003bda <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003bda:	b530      	push	{r4, r5, lr}
 8003bdc:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8003bde:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8003be2:	428d      	cmp	r5, r1
 8003be4:	d001      	beq.n	8003bea <USBH_FindInterface+0x10>
 8003be6:	29ff      	cmp	r1, #255	; 0xff
 8003be8:	d10d      	bne.n	8003c06 <USBH_FindInterface+0x2c>
 8003bea:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 8003bee:	4295      	cmp	r5, r2
 8003bf0:	d001      	beq.n	8003bf6 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8003bf2:	2aff      	cmp	r2, #255	; 0xff
 8003bf4:	d107      	bne.n	8003c06 <USBH_FindInterface+0x2c>
 8003bf6:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8003bfa:	429d      	cmp	r5, r3
 8003bfc:	d101      	bne.n	8003c02 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8003bfe:	b2e0      	uxtb	r0, r4
 8003c00:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8003c02:	2bff      	cmp	r3, #255	; 0xff
 8003c04:	d0fb      	beq.n	8003bfe <USBH_FindInterface+0x24>
 8003c06:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003c08:	2c02      	cmp	r4, #2
 8003c0a:	f100 001a 	add.w	r0, r0, #26
 8003c0e:	d1e6      	bne.n	8003bde <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8003c10:	20ff      	movs	r0, #255	; 0xff
}
 8003c12:	bd30      	pop	{r4, r5, pc}

08003c14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003c14:	b510      	push	{r4, lr}
 8003c16:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003c18:	f7fc ffb2 	bl	8000b80 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7fd f812 	bl	8000c48 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8003c24:	2000      	movs	r0, #0
 8003c26:	bd10      	pop	{r4, pc}

08003c28 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8003c28:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8003c2c:	4770      	bx	lr

08003c2e <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8003c2e:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 8003c32:	3201      	adds	r2, #1
 8003c34:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003c38:	7802      	ldrb	r2, [r0, #0]
 8003c3a:	2a0a      	cmp	r2, #10
 8003c3c:	d104      	bne.n	8003c48 <USBH_LL_IncTimer+0x1a>
 8003c3e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003c42:	b10b      	cbz	r3, 8003c48 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	4718      	bx	r3
 8003c48:	4770      	bx	lr

08003c4a <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8003c4a:	7802      	ldrb	r2, [r0, #0]
{
 8003c4c:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8003c4e:	b94a      	cbnz	r2, 8003c64 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 8003c50:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
    phost->device.is_connected = 1;
 8003c54:	2201      	movs	r2, #1
 8003c56:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8003c5a:	b10b      	cbz	r3, 8003c60 <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003c5c:	2104      	movs	r1, #4
 8003c5e:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8003c60:	2000      	movs	r0, #0
 8003c62:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8003c64:	7802      	ldrb	r2, [r0, #0]
 8003c66:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 8003c68:	bf04      	itt	eq
 8003c6a:	2202      	moveq	r2, #2
 8003c6c:	7002      	strbeq	r2, [r0, #0]
 8003c6e:	e7f7      	b.n	8003c60 <USBH_LL_Connect+0x16>

08003c70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8003c70:	b510      	push	{r4, lr}
 8003c72:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8003c74:	f7fc ff92 	bl	8000b9c <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003c78:	7921      	ldrb	r1, [r4, #4]
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f000 f96a 	bl	8003f54 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8003c80:	7961      	ldrb	r1, [r4, #5]
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 f966 	bl	8003f54 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8003c8e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003c92:	b113      	cbz	r3, 8003c9a <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003c94:	2105      	movs	r1, #5
 8003c96:	4620      	mov	r0, r4
 8003c98:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7fc ff70 	bl	8000b80 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	bd10      	pop	{r4, pc}

08003ca8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003caa:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8003cac:	7880      	ldrb	r0, [r0, #2]
 8003cae:	2801      	cmp	r0, #1
 8003cb0:	d003      	beq.n	8003cba <USBH_CtlReq+0x12>
 8003cb2:	2802      	cmp	r0, #2
 8003cb4:	d008      	beq.n	8003cc8 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	e004      	b.n	8003cc4 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8003cba:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8003cbc:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8003cbe:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 8003cc0:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8003cc2:	70a3      	strb	r3, [r4, #2]
}
 8003cc4:	b003      	add	sp, #12
 8003cc6:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8003cc8:	7e23      	ldrb	r3, [r4, #24]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	2b0a      	cmp	r3, #10
 8003cce:	d8f2      	bhi.n	8003cb6 <USBH_CtlReq+0xe>
 8003cd0:	e8df f003 	tbb	[pc, r3]
 8003cd4:	31260f06 	.word	0x31260f06
 8003cd8:	6b604a3d 	.word	0x6b604a3d
 8003cdc:	897c      	.short	0x897c
 8003cde:	92          	.byte	0x92
 8003cdf:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 8003ce0:	7962      	ldrb	r2, [r4, #5]
 8003ce2:	f104 0110 	add.w	r1, r4, #16
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 f8a9 	bl	8003e3e <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8003cec:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8003cee:	7623      	strb	r3, [r4, #24]
 8003cf0:	e7e1      	b.n	8003cb6 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8003cf2:	7961      	ldrb	r1, [r4, #5]
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fc ffa3 	bl	8000c40 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003cfa:	2801      	cmp	r0, #1
 8003cfc:	d123      	bne.n	8003d46 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 8003cfe:	8ae2      	ldrh	r2, [r4, #22]
 8003d00:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003d04:	b132      	cbz	r2, 8003d14 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da02      	bge.n	8003d10 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	7623      	strb	r3, [r4, #24]
 8003d0e:	e7d9      	b.n	8003cc4 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 8003d10:	2305      	movs	r3, #5
 8003d12:	e7ec      	b.n	8003cee <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	da01      	bge.n	8003d1c <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8003d18:	2309      	movs	r3, #9
 8003d1a:	e7e8      	b.n	8003cee <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 8003d1c:	2307      	movs	r3, #7
 8003d1e:	e7e6      	b.n	8003cee <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 8003d20:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003d24:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8003d26:	89a2      	ldrh	r2, [r4, #12]
 8003d28:	7923      	ldrb	r3, [r4, #4]
 8003d2a:	68a1      	ldr	r1, [r4, #8]
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f000 f8ae 	bl	8003e8e <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8003d32:	2304      	movs	r3, #4
 8003d34:	e7db      	b.n	8003cee <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8003d36:	7921      	ldrb	r1, [r4, #4]
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7fc ff81 	bl	8000c40 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003d3e:	2801      	cmp	r0, #1
 8003d40:	d0ea      	beq.n	8003d18 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8003d42:	2805      	cmp	r0, #5
 8003d44:	d01a      	beq.n	8003d7c <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8003d46:	2804      	cmp	r0, #4
 8003d48:	d1b5      	bne.n	8003cb6 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8003d4a:	230b      	movs	r3, #11
 8003d4c:	e7cf      	b.n	8003cee <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8003d4e:	2501      	movs	r5, #1
 8003d50:	7963      	ldrb	r3, [r4, #5]
 8003d52:	89a2      	ldrh	r2, [r4, #12]
 8003d54:	9500      	str	r5, [sp, #0]
 8003d56:	68a1      	ldr	r1, [r4, #8]
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f881 	bl	8003e60 <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8003d5e:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003d62:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003d64:	2306      	movs	r3, #6
 8003d66:	e7c2      	b.n	8003cee <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8003d68:	7961      	ldrb	r1, [r4, #5]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7fc ff68 	bl	8000c40 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 8003d70:	2801      	cmp	r0, #1
 8003d72:	d0d3      	beq.n	8003d1c <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 8003d74:	2805      	cmp	r0, #5
 8003d76:	d103      	bne.n	8003d80 <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 8003d78:	230c      	movs	r3, #12
 8003d7a:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	e7a1      	b.n	8003cc4 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003d80:	2802      	cmp	r0, #2
 8003d82:	d0c5      	beq.n	8003d10 <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 8003d84:	2804      	cmp	r0, #4
 8003d86:	d196      	bne.n	8003cb6 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 8003d88:	230b      	movs	r3, #11
 8003d8a:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 8003d90:	2002      	movs	r0, #2
  return status;
 8003d92:	e797      	b.n	8003cc4 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8003d94:	2200      	movs	r2, #0
 8003d96:	7923      	ldrb	r3, [r4, #4]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 f877 	bl	8003e8e <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 8003da0:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003da4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003da6:	2308      	movs	r3, #8
 8003da8:	e7a1      	b.n	8003cee <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8003daa:	7921      	ldrb	r1, [r4, #4]
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7fc ff47 	bl	8000c40 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003db2:	2801      	cmp	r0, #1
 8003db4:	d104      	bne.n	8003dc0 <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 8003db6:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8003db8:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003dba:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8003dbc:	7620      	strb	r0, [r4, #24]
 8003dbe:	e781      	b.n	8003cc4 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003dc0:	2804      	cmp	r0, #4
 8003dc2:	d0c2      	beq.n	8003d4a <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 8003dc4:	2805      	cmp	r0, #5
 8003dc6:	f47f af76 	bne.w	8003cb6 <USBH_CtlReq+0xe>
 8003dca:	e7d7      	b.n	8003d7c <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2501      	movs	r5, #1
 8003dd0:	7963      	ldrb	r3, [r4, #5]
 8003dd2:	9500      	str	r5, [sp, #0]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 f842 	bl	8003e60 <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8003ddc:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8003de0:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003de2:	230a      	movs	r3, #10
 8003de4:	e783      	b.n	8003cee <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8003de6:	7961      	ldrb	r1, [r4, #5]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7fc ff29 	bl	8000c40 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003dee:	2801      	cmp	r0, #1
 8003df0:	d0e1      	beq.n	8003db6 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003df2:	2802      	cmp	r0, #2
 8003df4:	d1a7      	bne.n	8003d46 <USBH_CtlReq+0x9e>
 8003df6:	e78f      	b.n	8003d18 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003df8:	7e63      	ldrb	r3, [r4, #25]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	7663      	strb	r3, [r4, #25]
 8003e02:	d806      	bhi.n	8003e12 <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7fc fec9 	bl	8000b9c <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003e0e:	70a0      	strb	r0, [r4, #2]
 8003e10:	e758      	b.n	8003cc4 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003e12:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003e16:	2106      	movs	r1, #6
 8003e18:	4620      	mov	r0, r4
 8003e1a:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	7663      	strb	r3, [r4, #25]
 8003e20:	e7b4      	b.n	8003d8c <USBH_CtlReq+0xe4>

08003e22 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003e22:	7883      	ldrb	r3, [r0, #2]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8003e28:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003e2a:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003e2c:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8003e2e:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003e30:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003e32:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8003e34:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8003e36:	2200      	movs	r2, #0
 8003e38:	4611      	mov	r1, r2
 8003e3a:	f7ff bf35 	b.w	8003ca8 <USBH_CtlReq>

08003e3e <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 8003e3e:	b530      	push	{r4, r5, lr}
 8003e40:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003e42:	2400      	movs	r4, #0
{
 8003e44:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003e46:	2308      	movs	r3, #8
 8003e48:	9302      	str	r3, [sp, #8]
 8003e4a:	9101      	str	r1, [sp, #4]
 8003e4c:	9403      	str	r4, [sp, #12]
 8003e4e:	9400      	str	r4, [sp, #0]
 8003e50:	4623      	mov	r3, r4
 8003e52:	4622      	mov	r2, r4
 8003e54:	4629      	mov	r1, r5
 8003e56:	f7fc fed9 	bl	8000c0c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	b005      	add	sp, #20
 8003e5e:	bd30      	pop	{r4, r5, pc}

08003e60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003e60:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003e62:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003e66:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003e68:	2d00      	cmp	r5, #0
{
 8003e6a:	461c      	mov	r4, r3
 8003e6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003e70:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8003e72:	bf18      	it	ne
 8003e74:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9101      	str	r1, [sp, #4]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4621      	mov	r1, r4
 8003e84:	f7fc fec2 	bl	8000c0c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8003e88:	2000      	movs	r0, #0
 8003e8a:	b005      	add	sp, #20
 8003e8c:	bd30      	pop	{r4, r5, pc}

08003e8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003e8e:	b530      	push	{r4, r5, lr}
 8003e90:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003e92:	2400      	movs	r4, #0
{
 8003e94:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003e96:	9202      	str	r2, [sp, #8]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	9101      	str	r1, [sp, #4]
 8003e9c:	9403      	str	r4, [sp, #12]
 8003e9e:	9200      	str	r2, [sp, #0]
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	f7fc feb2 	bl	8000c0c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	b005      	add	sp, #20
 8003eac:	bd30      	pop	{r4, r5, pc}

08003eae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8003eae:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003eb0:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8003eb4:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003eb6:	2d00      	cmp	r5, #0
{ 
 8003eb8:	461c      	mov	r4, r3
 8003eba:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ebe:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8003ec0:	bf18      	it	ne
 8003ec2:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	9101      	str	r1, [sp, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2302      	movs	r3, #2
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	f7fc fe9b 	bl	8000c0c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	b005      	add	sp, #20
 8003eda:	bd30      	pop	{r4, r5, pc}

08003edc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003edc:	b530      	push	{r4, r5, lr}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003ee2:	2400      	movs	r4, #0
 8003ee4:	9202      	str	r2, [sp, #8]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	9101      	str	r1, [sp, #4]
 8003eea:	9403      	str	r4, [sp, #12]
 8003eec:	9200      	str	r2, [sp, #0]
 8003eee:	2302      	movs	r3, #2
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	f7fc fe8b 	bl	8000c0c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	b005      	add	sp, #20
 8003efa:	bd30      	pop	{r4, r5, pc}

08003efc <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003efe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003f02:	9402      	str	r4, [sp, #8]
 8003f04:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003f08:	9401      	str	r4, [sp, #4]
 8003f0a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003f0e:	9400      	str	r4, [sp, #0]
 8003f10:	f7fc fe56 	bl	8000bc0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 8003f14:	2000      	movs	r0, #0
 8003f16:	b004      	add	sp, #16
 8003f18:	bd10      	pop	{r4, pc}

08003f1a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8003f1a:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8003f1c:	f7fc fe68 	bl	8000bf0 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 8003f20:	2000      	movs	r0, #0
 8003f22:	bd08      	pop	{r3, pc}

08003f24 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8003f24:	b530      	push	{r4, r5, lr}
 8003f26:	2300      	movs	r3, #0
 8003f28:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8003f2c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f30:	042d      	lsls	r5, r5, #16
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	d408      	bmi.n	8003f48 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8003f36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003f3a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 8003f3e:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8003f40:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 8003f44:	b2d0      	uxtb	r0, r2
 8003f46:	bd30      	pop	{r4, r5, pc}
 8003f48:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	d1ee      	bne.n	8003f2c <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 8003f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f52:	e7f7      	b.n	8003f44 <USBH_AllocPipe+0x20>

08003f54 <USBH_FreePipe>:
   if(idx < 11)
 8003f54:	290a      	cmp	r1, #10
 8003f56:	bf9f      	itttt	ls
 8003f58:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8003f5c:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 8003f60:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003f64:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 8003f68:	2000      	movs	r0, #0
 8003f6a:	4770      	bx	lr

08003f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f72:	e003      	b.n	8003f7c <LoopCopyDataInit>

08003f74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f7a:	3104      	adds	r1, #4

08003f7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f7c:	480b      	ldr	r0, [pc, #44]	; (8003fac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f84:	d3f6      	bcc.n	8003f74 <CopyDataInit>
  ldr  r2, =_sbss
 8003f86:	4a0b      	ldr	r2, [pc, #44]	; (8003fb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f88:	e002      	b.n	8003f90 <LoopFillZerobss>

08003f8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f8c:	f842 3b04 	str.w	r3, [r2], #4

08003f90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f94:	d3f9      	bcc.n	8003f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f96:	f7fc fd31 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f9a:	f000 f811 	bl	8003fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f9e:	f7fc fb0b 	bl	80005b8 <main>
  bx  lr    
 8003fa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003fa8:	08004220 	.word	0x08004220
  ldr  r0, =_sdata
 8003fac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fb0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003fb4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8003fb8:	20000848 	.word	0x20000848

08003fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fbc:	e7fe      	b.n	8003fbc <ADC_IRQHandler>
	...

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4e0d      	ldr	r6, [pc, #52]	; (8003ff8 <__libc_init_array+0x38>)
 8003fc4:	4c0d      	ldr	r4, [pc, #52]	; (8003ffc <__libc_init_array+0x3c>)
 8003fc6:	1ba4      	subs	r4, r4, r6
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	2500      	movs	r5, #0
 8003fcc:	42a5      	cmp	r5, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	4e0b      	ldr	r6, [pc, #44]	; (8004000 <__libc_init_array+0x40>)
 8003fd2:	4c0c      	ldr	r4, [pc, #48]	; (8004004 <__libc_init_array+0x44>)
 8003fd4:	f000 f8f4 	bl	80041c0 <_init>
 8003fd8:	1ba4      	subs	r4, r4, r6
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	2500      	movs	r5, #0
 8003fde:	42a5      	cmp	r5, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe8:	4798      	blx	r3
 8003fea:	3501      	adds	r5, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ff2:	4798      	blx	r3
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	08004218 	.word	0x08004218
 8003ffc:	08004218 	.word	0x08004218
 8004000:	08004218 	.word	0x08004218
 8004004:	0800421c 	.word	0x0800421c

08004008 <malloc>:
 8004008:	4b02      	ldr	r3, [pc, #8]	; (8004014 <malloc+0xc>)
 800400a:	4601      	mov	r1, r0
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	f000 b859 	b.w	80040c4 <_malloc_r>
 8004012:	bf00      	nop
 8004014:	2000002c 	.word	0x2000002c

08004018 <free>:
 8004018:	4b02      	ldr	r3, [pc, #8]	; (8004024 <free+0xc>)
 800401a:	4601      	mov	r1, r0
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f000 b803 	b.w	8004028 <_free_r>
 8004022:	bf00      	nop
 8004024:	2000002c 	.word	0x2000002c

08004028 <_free_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4605      	mov	r5, r0
 800402c:	2900      	cmp	r1, #0
 800402e:	d045      	beq.n	80040bc <_free_r+0x94>
 8004030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004034:	1f0c      	subs	r4, r1, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	bfb8      	it	lt
 800403a:	18e4      	addlt	r4, r4, r3
 800403c:	f000 f8b0 	bl	80041a0 <__malloc_lock>
 8004040:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <_free_r+0x98>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	4610      	mov	r0, r2
 8004046:	b933      	cbnz	r3, 8004056 <_free_r+0x2e>
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	6014      	str	r4, [r2, #0]
 800404c:	4628      	mov	r0, r5
 800404e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004052:	f000 b8a6 	b.w	80041a2 <__malloc_unlock>
 8004056:	42a3      	cmp	r3, r4
 8004058:	d90c      	bls.n	8004074 <_free_r+0x4c>
 800405a:	6821      	ldr	r1, [r4, #0]
 800405c:	1862      	adds	r2, r4, r1
 800405e:	4293      	cmp	r3, r2
 8004060:	bf04      	itt	eq
 8004062:	681a      	ldreq	r2, [r3, #0]
 8004064:	685b      	ldreq	r3, [r3, #4]
 8004066:	6063      	str	r3, [r4, #4]
 8004068:	bf04      	itt	eq
 800406a:	1852      	addeq	r2, r2, r1
 800406c:	6022      	streq	r2, [r4, #0]
 800406e:	6004      	str	r4, [r0, #0]
 8004070:	e7ec      	b.n	800404c <_free_r+0x24>
 8004072:	4613      	mov	r3, r2
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	b10a      	cbz	r2, 800407c <_free_r+0x54>
 8004078:	42a2      	cmp	r2, r4
 800407a:	d9fa      	bls.n	8004072 <_free_r+0x4a>
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	1858      	adds	r0, r3, r1
 8004080:	42a0      	cmp	r0, r4
 8004082:	d10b      	bne.n	800409c <_free_r+0x74>
 8004084:	6820      	ldr	r0, [r4, #0]
 8004086:	4401      	add	r1, r0
 8004088:	1858      	adds	r0, r3, r1
 800408a:	4282      	cmp	r2, r0
 800408c:	6019      	str	r1, [r3, #0]
 800408e:	d1dd      	bne.n	800404c <_free_r+0x24>
 8004090:	6810      	ldr	r0, [r2, #0]
 8004092:	6852      	ldr	r2, [r2, #4]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	4401      	add	r1, r0
 8004098:	6019      	str	r1, [r3, #0]
 800409a:	e7d7      	b.n	800404c <_free_r+0x24>
 800409c:	d902      	bls.n	80040a4 <_free_r+0x7c>
 800409e:	230c      	movs	r3, #12
 80040a0:	602b      	str	r3, [r5, #0]
 80040a2:	e7d3      	b.n	800404c <_free_r+0x24>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	1821      	adds	r1, r4, r0
 80040a8:	428a      	cmp	r2, r1
 80040aa:	bf04      	itt	eq
 80040ac:	6811      	ldreq	r1, [r2, #0]
 80040ae:	6852      	ldreq	r2, [r2, #4]
 80040b0:	6062      	str	r2, [r4, #4]
 80040b2:	bf04      	itt	eq
 80040b4:	1809      	addeq	r1, r1, r0
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	605c      	str	r4, [r3, #4]
 80040ba:	e7c7      	b.n	800404c <_free_r+0x24>
 80040bc:	bd38      	pop	{r3, r4, r5, pc}
 80040be:	bf00      	nop
 80040c0:	200000b0 	.word	0x200000b0

080040c4 <_malloc_r>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	1ccd      	adds	r5, r1, #3
 80040c8:	f025 0503 	bic.w	r5, r5, #3
 80040cc:	3508      	adds	r5, #8
 80040ce:	2d0c      	cmp	r5, #12
 80040d0:	bf38      	it	cc
 80040d2:	250c      	movcc	r5, #12
 80040d4:	2d00      	cmp	r5, #0
 80040d6:	4606      	mov	r6, r0
 80040d8:	db01      	blt.n	80040de <_malloc_r+0x1a>
 80040da:	42a9      	cmp	r1, r5
 80040dc:	d903      	bls.n	80040e6 <_malloc_r+0x22>
 80040de:	230c      	movs	r3, #12
 80040e0:	6033      	str	r3, [r6, #0]
 80040e2:	2000      	movs	r0, #0
 80040e4:	bd70      	pop	{r4, r5, r6, pc}
 80040e6:	f000 f85b 	bl	80041a0 <__malloc_lock>
 80040ea:	4a23      	ldr	r2, [pc, #140]	; (8004178 <_malloc_r+0xb4>)
 80040ec:	6814      	ldr	r4, [r2, #0]
 80040ee:	4621      	mov	r1, r4
 80040f0:	b991      	cbnz	r1, 8004118 <_malloc_r+0x54>
 80040f2:	4c22      	ldr	r4, [pc, #136]	; (800417c <_malloc_r+0xb8>)
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	b91b      	cbnz	r3, 8004100 <_malloc_r+0x3c>
 80040f8:	4630      	mov	r0, r6
 80040fa:	f000 f841 	bl	8004180 <_sbrk_r>
 80040fe:	6020      	str	r0, [r4, #0]
 8004100:	4629      	mov	r1, r5
 8004102:	4630      	mov	r0, r6
 8004104:	f000 f83c 	bl	8004180 <_sbrk_r>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d126      	bne.n	800415a <_malloc_r+0x96>
 800410c:	230c      	movs	r3, #12
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	4630      	mov	r0, r6
 8004112:	f000 f846 	bl	80041a2 <__malloc_unlock>
 8004116:	e7e4      	b.n	80040e2 <_malloc_r+0x1e>
 8004118:	680b      	ldr	r3, [r1, #0]
 800411a:	1b5b      	subs	r3, r3, r5
 800411c:	d41a      	bmi.n	8004154 <_malloc_r+0x90>
 800411e:	2b0b      	cmp	r3, #11
 8004120:	d90f      	bls.n	8004142 <_malloc_r+0x7e>
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	50cd      	str	r5, [r1, r3]
 8004126:	18cc      	adds	r4, r1, r3
 8004128:	4630      	mov	r0, r6
 800412a:	f000 f83a 	bl	80041a2 <__malloc_unlock>
 800412e:	f104 000b 	add.w	r0, r4, #11
 8004132:	1d23      	adds	r3, r4, #4
 8004134:	f020 0007 	bic.w	r0, r0, #7
 8004138:	1ac3      	subs	r3, r0, r3
 800413a:	d01b      	beq.n	8004174 <_malloc_r+0xb0>
 800413c:	425a      	negs	r2, r3
 800413e:	50e2      	str	r2, [r4, r3]
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	428c      	cmp	r4, r1
 8004144:	bf0d      	iteet	eq
 8004146:	6863      	ldreq	r3, [r4, #4]
 8004148:	684b      	ldrne	r3, [r1, #4]
 800414a:	6063      	strne	r3, [r4, #4]
 800414c:	6013      	streq	r3, [r2, #0]
 800414e:	bf18      	it	ne
 8004150:	460c      	movne	r4, r1
 8004152:	e7e9      	b.n	8004128 <_malloc_r+0x64>
 8004154:	460c      	mov	r4, r1
 8004156:	6849      	ldr	r1, [r1, #4]
 8004158:	e7ca      	b.n	80040f0 <_malloc_r+0x2c>
 800415a:	1cc4      	adds	r4, r0, #3
 800415c:	f024 0403 	bic.w	r4, r4, #3
 8004160:	42a0      	cmp	r0, r4
 8004162:	d005      	beq.n	8004170 <_malloc_r+0xac>
 8004164:	1a21      	subs	r1, r4, r0
 8004166:	4630      	mov	r0, r6
 8004168:	f000 f80a 	bl	8004180 <_sbrk_r>
 800416c:	3001      	adds	r0, #1
 800416e:	d0cd      	beq.n	800410c <_malloc_r+0x48>
 8004170:	6025      	str	r5, [r4, #0]
 8004172:	e7d9      	b.n	8004128 <_malloc_r+0x64>
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	bf00      	nop
 8004178:	200000b0 	.word	0x200000b0
 800417c:	200000b4 	.word	0x200000b4

08004180 <_sbrk_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4c06      	ldr	r4, [pc, #24]	; (800419c <_sbrk_r+0x1c>)
 8004184:	2300      	movs	r3, #0
 8004186:	4605      	mov	r5, r0
 8004188:	4608      	mov	r0, r1
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	f000 f80a 	bl	80041a4 <_sbrk>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_sbrk_r+0x1a>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	b103      	cbz	r3, 800419a <_sbrk_r+0x1a>
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	20000844 	.word	0x20000844

080041a0 <__malloc_lock>:
 80041a0:	4770      	bx	lr

080041a2 <__malloc_unlock>:
 80041a2:	4770      	bx	lr

080041a4 <_sbrk>:
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <_sbrk+0x14>)
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	4602      	mov	r2, r0
 80041aa:	b909      	cbnz	r1, 80041b0 <_sbrk+0xc>
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <_sbrk+0x18>)
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	4402      	add	r2, r0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4770      	bx	lr
 80041b8:	200000b8 	.word	0x200000b8
 80041bc:	20000848 	.word	0x20000848

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
