
STM32F303VDT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001764  08001764  00011764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001794  08001794  00011794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800179c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015855  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000263b  00000000  00000000  00035891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008f8c  00000000  00000000  00037ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009a0  00000000  00000000  00040e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000dc8  00000000  00000000  000417f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006068  00000000  00000000  000425c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e58  00000000  00000000  00048628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004c480  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001dac  00000000  00000000  0004c4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800174c 	.word	0x0800174c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800174c 	.word	0x0800174c

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b510      	push	{r4, lr}
 80001d6:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80001d8:	2303      	movs	r3, #3
 80001da:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80001e8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001ea:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ec:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ee:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80001f0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001f4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80001f6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f000 fc24 	bl	8000a44 <HAL_RCC_OscConfig>
 80001fc:	4601      	mov	r1, r0
 80001fe:	b100      	cbz	r0, 8000202 <SystemClock_Config+0x2e>
 8000200:	e7fe      	b.n	8000200 <SystemClock_Config+0x2c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000202:	230f      	movs	r3, #15
 8000204:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000208:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000210:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000212:	f000 fec1 	bl	8000f98 <HAL_RCC_ClockConfig>
 8000216:	b100      	cbz	r0, 800021a <SystemClock_Config+0x46>
 8000218:	e7fe      	b.n	8000218 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800021a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800021e:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000220:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000222:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000224:	f000 ff80 	bl	8001128 <HAL_RCCEx_PeriphCLKConfig>
 8000228:	4604      	mov	r4, r0
 800022a:	b100      	cbz	r0, 800022e <SystemClock_Config+0x5a>
 800022c:	e7fe      	b.n	800022c <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800022e:	f000 ff75 	bl	800111c <HAL_RCC_GetHCLKFreq>
 8000232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000236:	fbb0 f0f3 	udiv	r0, r0, r3
 800023a:	f000 fa65 	bl	8000708 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800023e:	2004      	movs	r0, #4
 8000240:	f000 fa78 	bl	8000734 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000244:	4622      	mov	r2, r4
 8000246:	4621      	mov	r1, r4
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 fa1c 	bl	8000688 <HAL_NVIC_SetPriority>
}
 8000250:	b026      	add	sp, #152	; 0x98
 8000252:	bd10      	pop	{r4, pc}

08000254 <OwnInit>:

}

/* USER CODE BEGIN 4 */
void OwnInit(void)
{
 8000254:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(&htim6);
 8000256:	4c08      	ldr	r4, [pc, #32]	; (8000278 <OwnInit+0x24>)
 8000258:	4620      	mov	r0, r4
 800025a:	f001 f8a9 	bl	80013b0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800025e:	4620      	mov	r0, r4
	HAL_TIM_Base_Start(&htim7);
 8000260:	4c06      	ldr	r4, [pc, #24]	; (800027c <OwnInit+0x28>)
	HAL_TIM_Base_Start_IT(&htim6);
 8000262:	f001 f8b2 	bl	80013ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim7);
 8000266:	4620      	mov	r0, r4
 8000268:	f001 f8a2 	bl	80013b0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 800026c:	4620      	mov	r0, r4

}
 800026e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Start_IT(&htim7);
 8000272:	f001 b8aa 	b.w	80013ca <HAL_TIM_Base_Start_IT>
 8000276:	bf00      	nop
 8000278:	20000078 	.word	0x20000078
 800027c:	200000b8 	.word	0x200000b8

08000280 <main>:
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000284:	f000 f9ca 	bl	800061c <HAL_Init>
  SystemClock_Config();
 8000288:	f7ff ffa4 	bl	80001d4 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800028c:	4b41      	ldr	r3, [pc, #260]	; (8000394 <main+0x114>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800028e:	4842      	ldr	r0, [pc, #264]	; (8000398 <main+0x118>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000290:	695a      	ldr	r2, [r3, #20]
  htim6.Instance = TIM6;
 8000292:	4c42      	ldr	r4, [pc, #264]	; (800039c <main+0x11c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000294:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000298:	615a      	str	r2, [r3, #20]
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80002a0:	9201      	str	r2, [sp, #4]
 80002a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	695a      	ldr	r2, [r3, #20]
 80002a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80002b2:	9202      	str	r2, [sp, #8]
 80002b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80002bc:	615a      	str	r2, [r3, #20]
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80002c4:	9203      	str	r2, [sp, #12]
 80002c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	695a      	ldr	r2, [r3, #20]
 80002ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002ce:	615a      	str	r2, [r3, #20]
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2102      	movs	r1, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e0:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002e2:	f000 fb09 	bl	80008f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002e6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e8:	482b      	ldr	r0, [pc, #172]	; (8000398 <main+0x118>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002ea:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ec:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f4:	f000 fa30 	bl	8000758 <HAL_GPIO_Init>
  htim6.Init.Prescaler = 8000;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <main+0x120>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fa:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000;
 80002fc:	f44f 57fa 	mov.w	r7, #8000	; 0x1f40
 8000300:	e884 0088 	stmia.w	r4, {r3, r7}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000304:	4620      	mov	r0, r4
  htim6.Init.Period = 500;
 8000306:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800030a:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800030e:	f001 f987 	bl	8001620 <HAL_TIM_Base_Init>
 8000312:	b100      	cbz	r0, 8000316 <main+0x96>
 8000314:	e7fe      	b.n	8000314 <main+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000316:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000318:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800031a:	a905      	add	r1, sp, #20
 800031c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800031e:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000320:	f001 f998 	bl	8001654 <HAL_TIMEx_MasterConfigSynchronization>
 8000324:	b100      	cbz	r0, 8000328 <main+0xa8>
 8000326:	e7fe      	b.n	8000326 <main+0xa6>
  htim7.Instance = TIM7;
 8000328:	4c1e      	ldr	r4, [pc, #120]	; (80003a4 <main+0x124>)
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <main+0x128>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	60a0      	str	r0, [r4, #8]
  htim7.Init.Prescaler = 8000;
 800032e:	e884 0088 	stmia.w	r4, {r3, r7}
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000332:	61a0      	str	r0, [r4, #24]
  htim7.Init.Period = 2000;
 8000334:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000338:	4620      	mov	r0, r4
  htim7.Init.Period = 2000;
 800033a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800033c:	f001 f970 	bl	8001620 <HAL_TIM_Base_Init>
 8000340:	b100      	cbz	r0, 8000344 <main+0xc4>
 8000342:	e7fe      	b.n	8000342 <main+0xc2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000344:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000346:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000348:	a905      	add	r1, sp, #20
 800034a:	4620      	mov	r0, r4
 800034c:	f001 f982 	bl	8001654 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	b100      	cbz	r0, 8000354 <main+0xd4>
 8000352:	e7fe      	b.n	8000352 <main+0xd2>
  hi2c3.Instance = I2C3;
 8000354:	4c15      	ldr	r4, [pc, #84]	; (80003ac <main+0x12c>)
  hi2c3.Init.Timing = 0x2000090E;
 8000356:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <main+0x130>)
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <main+0x134>)
  hi2c3.Init.OwnAddress1 = 0;
 800035a:	60a0      	str	r0, [r4, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	6120      	str	r0, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800035e:	6160      	str	r0, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000360:	61a0      	str	r0, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	61e0      	str	r0, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000366:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x2000090E;
 8000368:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036c:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800036e:	f000 facc 	bl	800090a <HAL_I2C_Init>
 8000372:	4601      	mov	r1, r0
 8000374:	b100      	cbz	r0, 8000378 <main+0xf8>
 8000376:	e7fe      	b.n	8000376 <main+0xf6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000378:	4620      	mov	r0, r4
 800037a:	f000 fb17 	bl	80009ac <HAL_I2CEx_ConfigAnalogFilter>
 800037e:	4601      	mov	r1, r0
 8000380:	b100      	cbz	r0, 8000384 <main+0x104>
 8000382:	e7fe      	b.n	8000382 <main+0x102>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000384:	4620      	mov	r0, r4
 8000386:	f000 fb37 	bl	80009f8 <HAL_I2CEx_ConfigDigitalFilter>
 800038a:	b100      	cbz	r0, 800038e <main+0x10e>
 800038c:	e7fe      	b.n	800038c <main+0x10c>
  OwnInit();
 800038e:	f7ff ff61 	bl	8000254 <OwnInit>
 8000392:	e7fe      	b.n	8000392 <main+0x112>
 8000394:	40021000 	.word	0x40021000
 8000398:	48000400 	.word	0x48000400
 800039c:	20000078 	.word	0x20000078
 80003a0:	40001000 	.word	0x40001000
 80003a4:	200000b8 	.word	0x200000b8
 80003a8:	40001400 	.word	0x40001400
 80003ac:	2000002c 	.word	0x2000002c
 80003b0:	40007800 	.word	0x40007800
 80003b4:	2000090e 	.word	0x2000090e

080003b8 <Timer6>:



void Timer6(void)
{
 80003b8:	b508      	push	{r3, lr}

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80003ba:	2102      	movs	r1, #2
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <Timer6+0x20>)
 80003be:	f000 faa0 	bl	8000902 <HAL_GPIO_TogglePin>
	/*if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_SET)
	{
		HAL_UART_Transmit(&huart2, str2, 4, 0xFFFF);
	}*/
	monitor++;
 80003c2:	4a06      	ldr	r2, [pc, #24]	; (80003dc <Timer6+0x24>)
 80003c4:	7813      	ldrb	r3, [r2, #0]
 80003c6:	3301      	adds	r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	7013      	strb	r3, [r2, #0]
	value = monitor;
 80003cc:	7813      	ldrb	r3, [r2, #0]
 80003ce:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <Timer6+0x28>)
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	7013      	strb	r3, [r2, #0]
 80003d4:	bd08      	pop	{r3, pc}
 80003d6:	bf00      	nop
 80003d8:	48000400 	.word	0x48000400
 80003dc:	20000028 	.word	0x20000028
 80003e0:	20000100 	.word	0x20000100

080003e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <HAL_MspInit+0x78>)
{
 80003e6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e8:	699a      	ldr	r2, [r3, #24]
 80003ea:	f042 0201 	orr.w	r2, r2, #1
 80003ee:	619a      	str	r2, [r3, #24]
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f8:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003fc:	f000 f932 	bl	8000664 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	4611      	mov	r1, r2
 8000404:	f06f 000b 	mvn.w	r0, #11
 8000408:	f000 f93e 	bl	8000688 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	4611      	mov	r1, r2
 8000410:	f06f 000a 	mvn.w	r0, #10
 8000414:	f000 f938 	bl	8000688 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	4611      	mov	r1, r2
 800041c:	f06f 0009 	mvn.w	r0, #9
 8000420:	f000 f932 	bl	8000688 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	4611      	mov	r1, r2
 8000428:	f06f 0004 	mvn.w	r0, #4
 800042c:	f000 f92c 	bl	8000688 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	4611      	mov	r1, r2
 8000434:	f06f 0003 	mvn.w	r0, #3
 8000438:	f000 f926 	bl	8000688 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	4611      	mov	r1, r2
 8000440:	f06f 0001 	mvn.w	r0, #1
 8000444:	f000 f920 	bl	8000688 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	4611      	mov	r1, r2
 800044c:	f04f 30ff 	mov.w	r0, #4294967295
 8000450:	f000 f91a 	bl	8000688 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000454:	b003      	add	sp, #12
 8000456:	f85d fb04 	ldr.w	pc, [sp], #4
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000460:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8000462:	6802      	ldr	r2, [r0, #0]
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <HAL_I2C_MspInit+0x58>)
 8000466:	429a      	cmp	r2, r3
{
 8000468:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C3)
 800046a:	d123      	bne.n	80004b4 <HAL_I2C_MspInit+0x54>
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800046e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000472:	2612      	movs	r6, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000474:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000476:	a901      	add	r1, sp, #4
 8000478:	4810      	ldr	r0, [pc, #64]	; (80004bc <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800047a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800047c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 8000482:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000484:	f000 f968 	bl	8000758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000488:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	a901      	add	r1, sp, #4
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000492:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000494:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000496:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000498:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 800049a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f000 f95c 	bl	8000758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <HAL_I2C_MspInit+0x60>)
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80004a8:	61da      	str	r2, [r3, #28]
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80004b4:	b006      	add	sp, #24
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	40007800 	.word	0x40007800
 80004bc:	48000800 	.word	0x48000800
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 80004c6:	6803      	ldr	r3, [r0, #0]
 80004c8:	4a15      	ldr	r2, [pc, #84]	; (8000520 <HAL_TIM_Base_MspInit+0x5c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d114      	bne.n	80004f8 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_TIM_Base_MspInit+0x60>)
 80004d0:	69da      	ldr	r2, [r3, #28]
 80004d2:	f042 0210 	orr.w	r2, r2, #16
 80004d6:	61da      	str	r2, [r3, #28]
 80004d8:	69db      	ldr	r3, [r3, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004dc:	f003 0310 	and.w	r3, r3, #16
 80004e0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004e2:	2036      	movs	r0, #54	; 0x36
 80004e4:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004e6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004e8:	f000 f8ce 	bl	8000688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004ec:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80004ee:	f000 f8ff 	bl	80006f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80004f2:	b003      	add	sp, #12
 80004f4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_TIM_Base_MspInit+0x64>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d1f9      	bne.n	80004f2 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_TIM_Base_MspInit+0x60>)
 8000500:	69da      	ldr	r2, [r3, #28]
 8000502:	f042 0220 	orr.w	r2, r2, #32
 8000506:	61da      	str	r2, [r3, #28]
 8000508:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000512:	2037      	movs	r0, #55	; 0x37
 8000514:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000516:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000518:	f000 f8b6 	bl	8000688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800051c:	2037      	movs	r0, #55	; 0x37
 800051e:	e7e6      	b.n	80004ee <HAL_TIM_Base_MspInit+0x2a>
 8000520:	40001000 	.word	0x40001000
 8000524:	40021000 	.word	0x40021000
 8000528:	40001400 	.word	0x40001400

0800052c <NMI_Handler>:
 800052c:	4770      	bx	lr

0800052e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800052e:	e7fe      	b.n	800052e <HardFault_Handler>

08000530 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler>

08000532 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler>

08000534 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler>

08000536 <SVC_Handler>:
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:
 8000538:	4770      	bx	lr

0800053a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800053a:	4770      	bx	lr

0800053c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800053c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053e:	f000 f87f 	bl	8000640 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000546:	f000 b902 	b.w	800074e <HAL_SYSTICK_IRQHandler>
	...

0800054c <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
*/
void TIM6_DAC_IRQHandler(void)
{
 800054c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <TIM6_DAC_IRQHandler+0x10>)
 8000550:	f000 ff4b 	bl	80013ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  Timer6();
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Timer6();
 8000558:	f7ff bf2e 	b.w	80003b8 <Timer6>
 800055c:	20000078 	.word	0x20000078

08000560 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000560:	4801      	ldr	r0, [pc, #4]	; (8000568 <TIM7_IRQHandler+0x8>)
 8000562:	f000 bf42 	b.w	80013ea <HAL_TIM_IRQHandler>
 8000566:	bf00      	nop
 8000568:	200000b8 	.word	0x200000b8

0800056c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056c:	4915      	ldr	r1, [pc, #84]	; (80005c4 <SystemInit+0x58>)
 800056e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000572:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <SystemInit+0x5c>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	f042 0201 	orr.w	r2, r2, #1
 8000582:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000584:	6858      	ldr	r0, [r3, #4]
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <SystemInit+0x60>)
 8000588:	4002      	ands	r2, r0
 800058a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000592:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000596:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800059e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005a6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80005a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005aa:	f022 020f 	bic.w	r2, r2, #15
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80005b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SystemInit+0x64>)
 80005b4:	4002      	ands	r2, r0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005c0:	608b      	str	r3, [r1, #8]
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	40021000 	.word	0x40021000
 80005cc:	f87fc00c 	.word	0xf87fc00c
 80005d0:	ff00fccc 	.word	0xff00fccc

080005d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_InitTick+0x3c>)
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_InitTick+0x40>)
{
 80005da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	7818      	ldrb	r0, [r3, #0]
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80005e6:	6810      	ldr	r0, [r2, #0]
 80005e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ec:	f000 f88c 	bl	8000708 <HAL_SYSTICK_Config>
 80005f0:	4604      	mov	r4, r0
 80005f2:	b958      	cbnz	r0, 800060c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f4:	2d0f      	cmp	r5, #15
 80005f6:	d809      	bhi.n	800060c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	4602      	mov	r2, r0
 80005fa:	4629      	mov	r1, r5
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f842 	bl	8000688 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_InitTick+0x44>)
 8000606:	4620      	mov	r0, r4
 8000608:	601d      	str	r5, [r3, #0]
 800060a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800060c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800060e:	bd38      	pop	{r3, r4, r5, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	20000004 	.word	0x20000004
 8000618:	20000008 	.word	0x20000008

0800061c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x20>)
{
 800061e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	6813      	ldr	r3, [r2, #0]
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f81b 	bl	8000664 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ffd0 	bl	80005d4 <HAL_InitTick>
  HAL_MspInit();
 8000634:	f7ff fed6 	bl	80003e4 <HAL_MspInit>
}
 8000638:	2000      	movs	r0, #0
 800063a:	bd08      	pop	{r3, pc}
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <HAL_IncTick+0x10>)
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_IncTick+0x14>)
 8000644:	6811      	ldr	r1, [r2, #0]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	440b      	add	r3, r1
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000104 	.word	0x20000104
 8000654:	20000004 	.word	0x20000004

08000658 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <HAL_GetTick+0x8>)
 800065a:	6818      	ldr	r0, [r3, #0]
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000104 	.word	0x20000104

08000664 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000666:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000668:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800066c:	041b      	lsls	r3, r3, #16
 800066e:	0c1b      	lsrs	r3, r3, #16
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000674:	0200      	lsls	r0, r0, #8
 8000676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800067e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000680:	60d3      	str	r3, [r2, #12]
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	68dc      	ldr	r4, [r3, #12]
 800068e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000692:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	2b04      	cmp	r3, #4
 800069a:	bf28      	it	cs
 800069c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	f04f 0501 	mov.w	r5, #1
 80006a4:	fa05 f303 	lsl.w	r3, r5, r3
 80006a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ac:	bf8c      	ite	hi
 80006ae:	3c03      	subhi	r4, #3
 80006b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b2:	4019      	ands	r1, r3
 80006b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b6:	fa05 f404 	lsl.w	r4, r5, r4
 80006ba:	3c01      	subs	r4, #1
 80006bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	ea42 0201 	orr.w	r2, r2, r1
 80006c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	bfaf      	iteee	ge
 80006ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	f000 000f 	andlt.w	r0, r0, #15
 80006d2:	4b06      	ldrlt	r3, [pc, #24]	; (80006ec <HAL_NVIC_SetPriority+0x64>)
 80006d4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	bfa5      	ittet	ge
 80006d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	e000ed14 	.word	0xe000ed14

080006f0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006f0:	0942      	lsrs	r2, r0, #5
 80006f2:	2301      	movs	r3, #1
 80006f4:	f000 001f 	and.w	r0, r0, #31
 80006f8:	fa03 f000 	lsl.w	r0, r3, r0
 80006fc:	4b01      	ldr	r3, [pc, #4]	; (8000704 <HAL_NVIC_EnableIRQ+0x14>)
 80006fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100

08000708 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000708:	3801      	subs	r0, #1
 800070a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800070e:	d20a      	bcs.n	8000726 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000714:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	21f0      	movs	r1, #240	; 0xf0
 8000718:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000736:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000738:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800073a:	bf0c      	ite	eq
 800073c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000740:	f022 0204 	bicne.w	r2, r2, #4
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	4770      	bx	lr
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800074c:	4770      	bx	lr

0800074e <HAL_SYSTICK_IRQHandler>:
{
 800074e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000750:	f7ff fffc 	bl	800074c <HAL_SYSTICK_Callback>
 8000754:	bd08      	pop	{r3, pc}
	...

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80008f4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4a61      	ldr	r2, [pc, #388]	; (80008ec <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000766:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000768:	fa38 f403 	lsrs.w	r4, r8, r3
 800076c:	d102      	bne.n	8000774 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800076e:	b003      	add	sp, #12
 8000770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000774:	f04f 0e01 	mov.w	lr, #1
 8000778:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800077c:	ea18 060e 	ands.w	r6, r8, lr
 8000780:	f000 80a6 	beq.w	80008d0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000784:	684c      	ldr	r4, [r1, #4]
 8000786:	f024 0710 	bic.w	r7, r4, #16
 800078a:	2f02      	cmp	r7, #2
 800078c:	d116      	bne.n	80007bc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800078e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000792:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000796:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800079a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800079e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a2:	f04f 0c0f 	mov.w	ip, #15
 80007a6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007aa:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007ae:	690d      	ldr	r5, [r1, #16]
 80007b0:	fa05 f50b 	lsl.w	r5, r5, fp
 80007b4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80007b8:	f8ca 5020 	str.w	r5, [sl, #32]
 80007bc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c6:	fa05 f50a 	lsl.w	r5, r5, sl
 80007ca:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007cc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007da:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007de:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007e0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	d811      	bhi.n	800080a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ec:	68cf      	ldr	r7, [r1, #12]
 80007ee:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007f2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007fa:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007fe:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000802:	409f      	lsls	r7, r3
 8000804:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000808:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800080a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800080c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800080e:	688f      	ldr	r7, [r1, #8]
 8000810:	fa07 f70a 	lsl.w	r7, r7, sl
 8000814:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000816:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000818:	00e5      	lsls	r5, r4, #3
 800081a:	d559      	bpl.n	80008d0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000820:	f045 0501 	orr.w	r5, r5, #1
 8000824:	f8c9 5018 	str.w	r5, [r9, #24]
 8000828:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800082c:	f023 0703 	bic.w	r7, r3, #3
 8000830:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000834:	f005 0501 	and.w	r5, r5, #1
 8000838:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800083c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800083e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000844:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000846:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800084a:	f04f 0e0f 	mov.w	lr, #15
 800084e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000852:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000856:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800085a:	d03b      	beq.n	80008d4 <HAL_GPIO_Init+0x17c>
 800085c:	4d24      	ldr	r5, [pc, #144]	; (80008f0 <HAL_GPIO_Init+0x198>)
 800085e:	42a8      	cmp	r0, r5
 8000860:	d03a      	beq.n	80008d8 <HAL_GPIO_Init+0x180>
 8000862:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000866:	42a8      	cmp	r0, r5
 8000868:	d038      	beq.n	80008dc <HAL_GPIO_Init+0x184>
 800086a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086e:	42a8      	cmp	r0, r5
 8000870:	d036      	beq.n	80008e0 <HAL_GPIO_Init+0x188>
 8000872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000876:	42a8      	cmp	r0, r5
 8000878:	d034      	beq.n	80008e4 <HAL_GPIO_Init+0x18c>
 800087a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087e:	42a8      	cmp	r0, r5
 8000880:	d032      	beq.n	80008e8 <HAL_GPIO_Init+0x190>
 8000882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000886:	42a8      	cmp	r0, r5
 8000888:	bf14      	ite	ne
 800088a:	2507      	movne	r5, #7
 800088c:	2506      	moveq	r5, #6
 800088e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000892:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000896:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000898:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800089a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800089c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf0c      	ite	eq
 80008a2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008a4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80008a6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008a8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008aa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008ae:	bf0c      	ite	eq
 80008b0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008b2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80008b4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008b6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008bc:	bf0c      	ite	eq
 80008be:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008c0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80008c2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008c4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008c8:	bf54      	ite	pl
 80008ca:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80008cc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80008ce:	60d5      	str	r5, [r2, #12]
    position++;
 80008d0:	3301      	adds	r3, #1
 80008d2:	e749      	b.n	8000768 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008d4:	2500      	movs	r5, #0
 80008d6:	e7da      	b.n	800088e <HAL_GPIO_Init+0x136>
 80008d8:	2501      	movs	r5, #1
 80008da:	e7d8      	b.n	800088e <HAL_GPIO_Init+0x136>
 80008dc:	2502      	movs	r5, #2
 80008de:	e7d6      	b.n	800088e <HAL_GPIO_Init+0x136>
 80008e0:	2503      	movs	r5, #3
 80008e2:	e7d4      	b.n	800088e <HAL_GPIO_Init+0x136>
 80008e4:	2504      	movs	r5, #4
 80008e6:	e7d2      	b.n	800088e <HAL_GPIO_Init+0x136>
 80008e8:	2505      	movs	r5, #5
 80008ea:	e7d0      	b.n	800088e <HAL_GPIO_Init+0x136>
 80008ec:	40010400 	.word	0x40010400
 80008f0:	48000400 	.word	0x48000400
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f8:	b10a      	cbz	r2, 80008fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008fa:	6181      	str	r1, [r0, #24]
 80008fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008fe:	6281      	str	r1, [r0, #40]	; 0x28
 8000900:	4770      	bx	lr

08000902 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000902:	6943      	ldr	r3, [r0, #20]
 8000904:	4059      	eors	r1, r3
 8000906:	6141      	str	r1, [r0, #20]
 8000908:	4770      	bx	lr

0800090a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800090a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800090c:	4604      	mov	r4, r0
 800090e:	2800      	cmp	r0, #0
 8000910:	d04a      	beq.n	80009a8 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000912:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000916:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800091a:	b91b      	cbnz	r3, 8000924 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800091c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000920:	f7ff fd9e 	bl	8000460 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000924:	2324      	movs	r3, #36	; 0x24
 8000926:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800092a:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800092c:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	f022 0201 	bic.w	r2, r2, #1
 8000934:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000936:	6862      	ldr	r2, [r4, #4]
 8000938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800093c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800093e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000940:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800094a:	d124      	bne.n	8000996 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800094c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000950:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000952:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000954:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000956:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800095a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800095e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000966:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000968:	6922      	ldr	r2, [r4, #16]
 800096a:	430a      	orrs	r2, r1
 800096c:	69a1      	ldr	r1, [r4, #24]
 800096e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000974:	6a21      	ldr	r1, [r4, #32]
 8000976:	69e2      	ldr	r2, [r4, #28]
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000984:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000986:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000988:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800098a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800098e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000990:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000994:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000996:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800099a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800099c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800099e:	bf04      	itt	eq
 80009a0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80009a4:	605a      	streq	r2, [r3, #4]
 80009a6:	e7d4      	b.n	8000952 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80009a8:	2001      	movs	r0, #1
}
 80009aa:	bd10      	pop	{r4, pc}

080009ac <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009ac:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	2a20      	cmp	r2, #32
{
 80009b4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009b6:	d11d      	bne.n	80009f4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d019      	beq.n	80009f4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009c0:	2324      	movs	r3, #36	; 0x24
 80009c2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009c6:	6803      	ldr	r3, [r0, #0]
 80009c8:	681c      	ldr	r4, [r3, #0]
 80009ca:	f024 0401 	bic.w	r4, r4, #1
 80009ce:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009d0:	681c      	ldr	r4, [r3, #0]
 80009d2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80009d6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009d8:	681c      	ldr	r4, [r3, #0]
 80009da:	4321      	orrs	r1, r4
 80009dc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009de:	6819      	ldr	r1, [r3, #0]
 80009e0:	f041 0101 	orr.w	r1, r1, #1
 80009e4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009e6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80009e8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80009ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80009f0:	4618      	mov	r0, r3
 80009f2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80009f4:	2002      	movs	r0, #2
  }
}
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80009f8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009fa:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80009fe:	b2e4      	uxtb	r4, r4
 8000a00:	2c20      	cmp	r4, #32
 8000a02:	d11c      	bne.n	8000a3e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d018      	beq.n	8000a3e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a0c:	2324      	movs	r3, #36	; 0x24
 8000a0e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f022 0201 	bic.w	r2, r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a1c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a1e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a22:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a26:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	f042 0201 	orr.w	r2, r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a30:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a32:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000a3e:	2002      	movs	r0, #2
  }
}
 8000a40:	bd10      	pop	{r4, pc}
	...

08000a44 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a44:	6803      	ldr	r3, [r0, #0]
{
 8000a46:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4a:	07df      	lsls	r7, r3, #31
{
 8000a4c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4e:	d411      	bmi.n	8000a74 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	079e      	lsls	r6, r3, #30
 8000a54:	f100 808b 	bmi.w	8000b6e <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	071c      	lsls	r4, r3, #28
 8000a5c:	f100 80fe 	bmi.w	8000c5c <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	0758      	lsls	r0, r3, #29
 8000a64:	f100 8147 	bmi.w	8000cf6 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a68:	69aa      	ldr	r2, [r5, #24]
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 81dd 	bne.w	8000e2a <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a70:	2000      	movs	r0, #0
 8000a72:	e024      	b.n	8000abe <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a74:	4cbd      	ldr	r4, [pc, #756]	; (8000d6c <HAL_RCC_OscConfig+0x328>)
 8000a76:	6863      	ldr	r3, [r4, #4]
 8000a78:	f003 030c 	and.w	r3, r3, #12
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d00a      	beq.n	8000a96 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a80:	6863      	ldr	r3, [r4, #4]
 8000a82:	f003 030c 	and.w	r3, r3, #12
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d11c      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x80>
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a94:	d116      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a9a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a9e:	6821      	ldr	r1, [r4, #0]
 8000aa0:	fa93 f3a3 	rbit	r3, r3
 8000aa4:	fab3 f383 	clz	r3, r3
 8000aa8:	f003 031f 	and.w	r3, r3, #31
 8000aac:	2201      	movs	r2, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	420b      	tst	r3, r1
 8000ab4:	d0cc      	beq.n	8000a50 <HAL_RCC_OscConfig+0xc>
 8000ab6:	686b      	ldr	r3, [r5, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1c9      	bne.n	8000a50 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000abc:	2001      	movs	r0, #1
}
 8000abe:	b002      	add	sp, #8
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac4:	686b      	ldr	r3, [r5, #4]
 8000ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aca:	d11e      	bne.n	8000b0a <HAL_RCC_OscConfig+0xc6>
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fdc0 	bl	8000658 <HAL_GetTick>
 8000ad8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000adc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ade:	2701      	movs	r7, #1
 8000ae0:	fa96 f3a6 	rbit	r3, r6
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	fa96 f3a6 	rbit	r3, r6
 8000aea:	fab3 f383 	clz	r3, r3
 8000aee:	f003 031f 	and.w	r3, r3, #31
 8000af2:	fa07 f303 	lsl.w	r3, r7, r3
 8000af6:	4213      	tst	r3, r2
 8000af8:	d1aa      	bne.n	8000a50 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000afa:	f7ff fdad 	bl	8000658 <HAL_GetTick>
 8000afe:	eba0 0008 	sub.w	r0, r0, r8
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d9ec      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e7d9      	b.n	8000abe <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0a:	bb0b      	cbnz	r3, 8000b50 <HAL_RCC_OscConfig+0x10c>
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b12:	6023      	str	r3, [r4, #0]
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fd9c 	bl	8000658 <HAL_GetTick>
 8000b20:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000b24:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b26:	2701      	movs	r7, #1
 8000b28:	fa96 f3a6 	rbit	r3, r6
 8000b2c:	6822      	ldr	r2, [r4, #0]
 8000b2e:	fa96 f3a6 	rbit	r3, r6
 8000b32:	fab3 f383 	clz	r3, r3
 8000b36:	f003 031f 	and.w	r3, r3, #31
 8000b3a:	fa07 f303 	lsl.w	r3, r7, r3
 8000b3e:	4213      	tst	r3, r2
 8000b40:	d086      	beq.n	8000a50 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b42:	f7ff fd89 	bl	8000658 <HAL_GetTick>
 8000b46:	eba0 0008 	sub.w	r0, r0, r8
 8000b4a:	2864      	cmp	r0, #100	; 0x64
 8000b4c:	d9ec      	bls.n	8000b28 <HAL_RCC_OscConfig+0xe4>
 8000b4e:	e7da      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	d103      	bne.n	8000b60 <HAL_RCC_OscConfig+0x11c>
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5c:	6023      	str	r3, [r4, #0]
 8000b5e:	e7b5      	b.n	8000acc <HAL_RCC_OscConfig+0x88>
 8000b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b64:	6023      	str	r3, [r4, #0]
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6c:	e7b1      	b.n	8000ad2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b6e:	4c7f      	ldr	r4, [pc, #508]	; (8000d6c <HAL_RCC_OscConfig+0x328>)
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	f013 0f0c 	tst.w	r3, #12
 8000b76:	d00a      	beq.n	8000b8e <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d124      	bne.n	8000bcc <HAL_RCC_OscConfig+0x188>
 8000b82:	6863      	ldr	r3, [r4, #4]
 8000b84:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b8c:	d11e      	bne.n	8000bcc <HAL_RCC_OscConfig+0x188>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b94:	6821      	ldr	r1, [r4, #0]
 8000b96:	fa93 f3a3 	rbit	r3, r3
 8000b9a:	fab3 f383 	clz	r3, r3
 8000b9e:	f003 031f 	and.w	r3, r3, #31
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	420b      	tst	r3, r1
 8000baa:	d002      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x16e>
 8000bac:	68eb      	ldr	r3, [r5, #12]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d184      	bne.n	8000abc <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb2:	6821      	ldr	r1, [r4, #0]
 8000bb4:	23f8      	movs	r3, #248	; 0xf8
 8000bb6:	fa93 f3a3 	rbit	r3, r3
 8000bba:	fab3 f283 	clz	r2, r3
 8000bbe:	692b      	ldr	r3, [r5, #16]
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	6023      	str	r3, [r4, #0]
 8000bca:	e745      	b.n	8000a58 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bcc:	68ea      	ldr	r2, [r5, #12]
 8000bce:	2601      	movs	r6, #1
 8000bd0:	b30a      	cbz	r2, 8000c16 <HAL_RCC_OscConfig+0x1d2>
 8000bd2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	2702      	movs	r7, #2
 8000be6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000be8:	f7ff fd36 	bl	8000658 <HAL_GetTick>
 8000bec:	4680      	mov	r8, r0
 8000bee:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf2:	6822      	ldr	r2, [r4, #0]
 8000bf4:	fa97 f3a7 	rbit	r3, r7
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	fa06 f303 	lsl.w	r3, r6, r3
 8000c04:	4213      	tst	r3, r2
 8000c06:	d1d4      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fd26 	bl	8000658 <HAL_GetTick>
 8000c0c:	eba0 0008 	sub.w	r0, r0, r8
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9ec      	bls.n	8000bee <HAL_RCC_OscConfig+0x1aa>
 8000c14:	e777      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
 8000c16:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000c1a:	fab3 f383 	clz	r3, r3
 8000c1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	2702      	movs	r7, #2
 8000c2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fd14 	bl	8000658 <HAL_GetTick>
 8000c30:	4680      	mov	r8, r0
 8000c32:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c36:	6822      	ldr	r2, [r4, #0]
 8000c38:	fa97 f3a7 	rbit	r3, r7
 8000c3c:	fab3 f383 	clz	r3, r3
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	fa06 f303 	lsl.w	r3, r6, r3
 8000c48:	4213      	tst	r3, r2
 8000c4a:	f43f af05 	beq.w	8000a58 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fd03 	bl	8000658 <HAL_GetTick>
 8000c52:	eba0 0008 	sub.w	r0, r0, r8
 8000c56:	2802      	cmp	r0, #2
 8000c58:	d9eb      	bls.n	8000c32 <HAL_RCC_OscConfig+0x1ee>
 8000c5a:	e754      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c5c:	696a      	ldr	r2, [r5, #20]
 8000c5e:	4e43      	ldr	r6, [pc, #268]	; (8000d6c <HAL_RCC_OscConfig+0x328>)
 8000c60:	4943      	ldr	r1, [pc, #268]	; (8000d70 <HAL_RCC_OscConfig+0x32c>)
 8000c62:	2401      	movs	r4, #1
 8000c64:	b31a      	cbz	r2, 8000cae <HAL_RCC_OscConfig+0x26a>
 8000c66:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000c6a:	fab3 f383 	clz	r3, r3
 8000c6e:	440b      	add	r3, r1
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	2702      	movs	r7, #2
 8000c74:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000c76:	f7ff fcef 	bl	8000658 <HAL_GetTick>
 8000c7a:	4680      	mov	r8, r0
 8000c7c:	fa97 f3a7 	rbit	r3, r7
 8000c80:	fa97 f3a7 	rbit	r3, r7
 8000c84:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c8a:	fa97 f3a7 	rbit	r3, r7
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	f003 031f 	and.w	r3, r3, #31
 8000c96:	fa04 f303 	lsl.w	r3, r4, r3
 8000c9a:	4213      	tst	r3, r2
 8000c9c:	f47f aee0 	bne.w	8000a60 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca0:	f7ff fcda 	bl	8000658 <HAL_GetTick>
 8000ca4:	eba0 0008 	sub.w	r0, r0, r8
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d9e7      	bls.n	8000c7c <HAL_RCC_OscConfig+0x238>
 8000cac:	e72b      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
 8000cae:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	2702      	movs	r7, #2
 8000cbc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fccb 	bl	8000658 <HAL_GetTick>
 8000cc2:	4680      	mov	r8, r0
 8000cc4:	fa97 f3a7 	rbit	r3, r7
 8000cc8:	fa97 f3a7 	rbit	r3, r7
 8000ccc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000cd2:	fa97 f3a7 	rbit	r3, r7
 8000cd6:	fab3 f383 	clz	r3, r3
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	fa04 f303 	lsl.w	r3, r4, r3
 8000ce2:	4213      	tst	r3, r2
 8000ce4:	f43f aebc 	beq.w	8000a60 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fcb6 	bl	8000658 <HAL_GetTick>
 8000cec:	eba0 0008 	sub.w	r0, r0, r8
 8000cf0:	2802      	cmp	r0, #2
 8000cf2:	d9e7      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x280>
 8000cf4:	e707      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf6:	4c1d      	ldr	r4, [pc, #116]	; (8000d6c <HAL_RCC_OscConfig+0x328>)
 8000cf8:	69e3      	ldr	r3, [r4, #28]
 8000cfa:	00d9      	lsls	r1, r3, #3
 8000cfc:	d434      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	69e3      	ldr	r3, [r4, #28]
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	61e3      	str	r3, [r4, #28]
 8000d06:	69e3      	ldr	r3, [r4, #28]
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d10:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d12:	4f18      	ldr	r7, [pc, #96]	; (8000d74 <HAL_RCC_OscConfig+0x330>)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	05da      	lsls	r2, r3, #23
 8000d18:	d52e      	bpl.n	8000d78 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1a:	68ab      	ldr	r3, [r5, #8]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d13c      	bne.n	8000d9a <HAL_RCC_OscConfig+0x356>
 8000d20:	6a23      	ldr	r3, [r4, #32]
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d28:	f7ff fc96 	bl	8000658 <HAL_GetTick>
 8000d2c:	2702      	movs	r7, #2
 8000d2e:	4682      	mov	sl, r0
 8000d30:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d32:	f04f 0801 	mov.w	r8, #1
 8000d36:	fa97 f3a7 	rbit	r3, r7
 8000d3a:	fa97 f3a7 	rbit	r3, r7
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d06b      	beq.n	8000e1a <HAL_RCC_OscConfig+0x3d6>
 8000d42:	6a22      	ldr	r2, [r4, #32]
 8000d44:	fa99 f3a9 	rbit	r3, r9
 8000d48:	fab3 f383 	clz	r3, r3
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	fa08 f303 	lsl.w	r3, r8, r3
 8000d54:	4213      	tst	r3, r2
 8000d56:	d057      	beq.n	8000e08 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	f43f ae85 	beq.w	8000a68 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5e:	69e3      	ldr	r3, [r4, #28]
 8000d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d64:	61e3      	str	r3, [r4, #28]
 8000d66:	e67f      	b.n	8000a68 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e7d2      	b.n	8000d12 <HAL_RCC_OscConfig+0x2ce>
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	10908120 	.word	0x10908120
 8000d74:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d80:	f7ff fc6a 	bl	8000658 <HAL_GetTick>
 8000d84:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	d4c6      	bmi.n	8000d1a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8c:	f7ff fc64 	bl	8000658 <HAL_GetTick>
 8000d90:	eba0 0008 	sub.w	r0, r0, r8
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	d9f6      	bls.n	8000d86 <HAL_RCC_OscConfig+0x342>
 8000d98:	e6b5      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9a:	bb3b      	cbnz	r3, 8000dec <HAL_RCC_OscConfig+0x3a8>
 8000d9c:	6a23      	ldr	r3, [r4, #32]
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	6223      	str	r3, [r4, #32]
 8000da4:	6a23      	ldr	r3, [r4, #32]
 8000da6:	f023 0304 	bic.w	r3, r3, #4
 8000daa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc54 	bl	8000658 <HAL_GetTick>
 8000db0:	2702      	movs	r7, #2
 8000db2:	4682      	mov	sl, r0
 8000db4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db6:	f04f 0801 	mov.w	r8, #1
 8000dba:	fa97 f3a7 	rbit	r3, r7
 8000dbe:	fa97 f3a7 	rbit	r3, r7
 8000dc2:	b373      	cbz	r3, 8000e22 <HAL_RCC_OscConfig+0x3de>
 8000dc4:	6a22      	ldr	r2, [r4, #32]
 8000dc6:	fa99 f3a9 	rbit	r3, r9
 8000dca:	fab3 f383 	clz	r3, r3
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	fa08 f303 	lsl.w	r3, r8, r3
 8000dd6:	4213      	tst	r3, r2
 8000dd8:	d0be      	beq.n	8000d58 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fc3d 	bl	8000658 <HAL_GetTick>
 8000dde:	f241 3388 	movw	r3, #5000	; 0x1388
 8000de2:	eba0 000a 	sub.w	r0, r0, sl
 8000de6:	4298      	cmp	r0, r3
 8000de8:	d9e7      	bls.n	8000dba <HAL_RCC_OscConfig+0x376>
 8000dea:	e68c      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dec:	2b05      	cmp	r3, #5
 8000dee:	6a23      	ldr	r3, [r4, #32]
 8000df0:	d103      	bne.n	8000dfa <HAL_RCC_OscConfig+0x3b6>
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6223      	str	r3, [r4, #32]
 8000df8:	e792      	b.n	8000d20 <HAL_RCC_OscConfig+0x2dc>
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6223      	str	r3, [r4, #32]
 8000e00:	6a23      	ldr	r3, [r4, #32]
 8000e02:	f023 0304 	bic.w	r3, r3, #4
 8000e06:	e78e      	b.n	8000d26 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e08:	f7ff fc26 	bl	8000658 <HAL_GetTick>
 8000e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e10:	eba0 000a 	sub.w	r0, r0, sl
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d98e      	bls.n	8000d36 <HAL_RCC_OscConfig+0x2f2>
 8000e18:	e675      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
 8000e1a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e20:	e790      	b.n	8000d44 <HAL_RCC_OscConfig+0x300>
 8000e22:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e28:	e7cd      	b.n	8000dc6 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e2a:	4c44      	ldr	r4, [pc, #272]	; (8000f3c <HAL_RCC_OscConfig+0x4f8>)
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	f43f ae42 	beq.w	8000abc <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e38:	2a02      	cmp	r2, #2
 8000e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e3e:	d158      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x4ae>
 8000e40:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e56:	f7ff fbff 	bl	8000658 <HAL_GetTick>
 8000e5a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000e5e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e60:	2601      	movs	r6, #1
 8000e62:	fa97 f3a7 	rbit	r3, r7
 8000e66:	6822      	ldr	r2, [r4, #0]
 8000e68:	fa97 f3a7 	rbit	r3, r7
 8000e6c:	fab3 f383 	clz	r3, r3
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	fa06 f303 	lsl.w	r3, r6, r3
 8000e78:	4213      	tst	r3, r2
 8000e7a:	d133      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e80:	f023 030f 	bic.w	r3, r3, #15
 8000e84:	4313      	orrs	r3, r2
 8000e86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e88:	6862      	ldr	r2, [r4, #4]
 8000e8a:	6a2b      	ldr	r3, [r5, #32]
 8000e8c:	69e9      	ldr	r1, [r5, #28]
 8000e8e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000e92:	430b      	orrs	r3, r1
 8000e94:	4313      	orrs	r3, r2
 8000e96:	6063      	str	r3, [r4, #4]
 8000e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ea8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000eb2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fbd0 	bl	8000658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eb8:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000eba:	4607      	mov	r7, r0
 8000ebc:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ec0:	6822      	ldr	r2, [r4, #0]
 8000ec2:	fa95 f3a5 	rbit	r3, r5
 8000ec6:	fab3 f383 	clz	r3, r3
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	fa06 f303 	lsl.w	r3, r6, r3
 8000ed2:	4213      	tst	r3, r2
 8000ed4:	f47f adcc 	bne.w	8000a70 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed8:	f7ff fbbe 	bl	8000658 <HAL_GetTick>
 8000edc:	1bc0      	subs	r0, r0, r7
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9ec      	bls.n	8000ebc <HAL_RCC_OscConfig+0x478>
 8000ee2:	e610      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee4:	f7ff fbb8 	bl	8000658 <HAL_GetTick>
 8000ee8:	eba0 0008 	sub.w	r0, r0, r8
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9b8      	bls.n	8000e62 <HAL_RCC_OscConfig+0x41e>
 8000ef0:	e609      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
 8000ef2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ef6:	fab3 f383 	clz	r3, r3
 8000efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f08:	f7ff fba6 	bl	8000658 <HAL_GetTick>
 8000f0c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f10:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f12:	2601      	movs	r6, #1
 8000f14:	fa95 f3a5 	rbit	r3, r5
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	fa95 f3a5 	rbit	r3, r5
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	fa06 f303 	lsl.w	r3, r6, r3
 8000f2a:	4213      	tst	r3, r2
 8000f2c:	f43f ada0 	beq.w	8000a70 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f30:	f7ff fb92 	bl	8000658 <HAL_GetTick>
 8000f34:	1bc0      	subs	r0, r0, r7
 8000f36:	2802      	cmp	r0, #2
 8000f38:	d9ec      	bls.n	8000f14 <HAL_RCC_OscConfig+0x4d0>
 8000f3a:	e5e4      	b.n	8000b06 <HAL_RCC_OscConfig+0xc2>
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000f40:	4911      	ldr	r1, [pc, #68]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x48>)
 8000f42:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f44:	f003 020c 	and.w	r2, r3, #12
 8000f48:	2a08      	cmp	r2, #8
 8000f4a:	d11a      	bne.n	8000f82 <HAL_RCC_GetSysClockFreq+0x42>
 8000f4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f50:	fa92 f2a2 	rbit	r2, r2
 8000f54:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f56:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000f5c:	fa90 f0a0 	rbit	r0, r0
 8000f60:	fab0 f080 	clz	r0, r0
 8000f64:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f6c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f6e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f74:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x54>)
 8000f78:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f7c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f7e:	4348      	muls	r0, r1
 8000f80:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	08001774 	.word	0x08001774
 8000f90:	08001784 	.word	0x08001784
 8000f94:	007a1200 	.word	0x007a1200

08000f98 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f98:	4a5c      	ldr	r2, [pc, #368]	; (800110c <HAL_RCC_ClockConfig+0x174>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	428b      	cmp	r3, r1
{
 8000fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	4606      	mov	r6, r0
 8000fa8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000faa:	d330      	bcc.n	800100e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fac:	6832      	ldr	r2, [r6, #0]
 8000fae:	0791      	lsls	r1, r2, #30
 8000fb0:	d43a      	bmi.n	8001028 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb2:	07d2      	lsls	r2, r2, #31
 8000fb4:	d440      	bmi.n	8001038 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fb6:	4a55      	ldr	r2, [pc, #340]	; (800110c <HAL_RCC_ClockConfig+0x174>)
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	429d      	cmp	r5, r3
 8000fc0:	f0c0 8092 	bcc.w	80010e8 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc4:	6832      	ldr	r2, [r6, #0]
 8000fc6:	4c52      	ldr	r4, [pc, #328]	; (8001110 <HAL_RCC_ClockConfig+0x178>)
 8000fc8:	f012 0f04 	tst.w	r2, #4
 8000fcc:	f040 8097 	bne.w	80010fe <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd0:	0713      	lsls	r3, r2, #28
 8000fd2:	d506      	bpl.n	8000fe2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fd4:	6863      	ldr	r3, [r4, #4]
 8000fd6:	6932      	ldr	r2, [r6, #16]
 8000fd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fdc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fe0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fe2:	f7ff ffad 	bl	8000f40 <HAL_RCC_GetSysClockFreq>
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	22f0      	movs	r2, #240	; 0xf0
 8000fea:	fa92 f2a2 	rbit	r2, r2
 8000fee:	fab2 f282 	clz	r2, r2
 8000ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff6:	40d3      	lsrs	r3, r2
 8000ff8:	4a46      	ldr	r2, [pc, #280]	; (8001114 <HAL_RCC_ClockConfig+0x17c>)
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	40d8      	lsrs	r0, r3
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_ClockConfig+0x180>)
 8001000:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fae6 	bl	80005d4 <HAL_InitTick>
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
}
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f023 0307 	bic.w	r3, r3, #7
 8001014:	430b      	orrs	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	4299      	cmp	r1, r3
 8001020:	d0c4      	beq.n	8000fac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001028:	4939      	ldr	r1, [pc, #228]	; (8001110 <HAL_RCC_ClockConfig+0x178>)
 800102a:	68b0      	ldr	r0, [r6, #8]
 800102c:	684b      	ldr	r3, [r1, #4]
 800102e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001032:	4303      	orrs	r3, r0
 8001034:	604b      	str	r3, [r1, #4]
 8001036:	e7bc      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001038:	6872      	ldr	r2, [r6, #4]
 800103a:	4c35      	ldr	r4, [pc, #212]	; (8001110 <HAL_RCC_ClockConfig+0x178>)
 800103c:	2a01      	cmp	r2, #1
 800103e:	d128      	bne.n	8001092 <HAL_RCC_ClockConfig+0xfa>
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001048:	6821      	ldr	r1, [r4, #0]
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	d0e1      	beq.n	8001022 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105e:	6863      	ldr	r3, [r4, #4]
 8001060:	f023 0303 	bic.w	r3, r3, #3
 8001064:	431a      	orrs	r2, r3
 8001066:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001068:	f7ff faf6 	bl	8000658 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106c:	6873      	ldr	r3, [r6, #4]
 800106e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001070:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001072:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001076:	d11f      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	6863      	ldr	r3, [r4, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b04      	cmp	r3, #4
 8001080:	d099      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001082:	f7ff fae9 	bl	8000658 <HAL_GetTick>
 8001086:	1bc0      	subs	r0, r0, r7
 8001088:	4540      	cmp	r0, r8
 800108a:	d9f5      	bls.n	8001078 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 800108c:	2003      	movs	r0, #3
 800108e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001092:	2a02      	cmp	r2, #2
 8001094:	bf0c      	ite	eq
 8001096:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800109a:	2302      	movne	r3, #2
 800109c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	6820      	ldr	r0, [r4, #0]
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4203      	tst	r3, r0
 80010b6:	e7d1      	b.n	800105c <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d110      	bne.n	80010de <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	f43f af77 	beq.w	8000fb6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c8:	f7ff fac6 	bl	8000658 <HAL_GetTick>
 80010cc:	1bc0      	subs	r0, r0, r7
 80010ce:	4540      	cmp	r0, r8
 80010d0:	d9f4      	bls.n	80010bc <HAL_RCC_ClockConfig+0x124>
 80010d2:	e7db      	b.n	800108c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d4:	f7ff fac0 	bl	8000658 <HAL_GetTick>
 80010d8:	1bc0      	subs	r0, r0, r7
 80010da:	4540      	cmp	r0, r8
 80010dc:	d8d6      	bhi.n	800108c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	f013 0f0c 	tst.w	r3, #12
 80010e4:	d1f6      	bne.n	80010d4 <HAL_RCC_ClockConfig+0x13c>
 80010e6:	e766      	b.n	8000fb6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f023 0307 	bic.w	r3, r3, #7
 80010ee:	432b      	orrs	r3, r5
 80010f0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	429d      	cmp	r5, r3
 80010fa:	d192      	bne.n	8001022 <HAL_RCC_ClockConfig+0x8a>
 80010fc:	e762      	b.n	8000fc4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010fe:	6863      	ldr	r3, [r4, #4]
 8001100:	68f1      	ldr	r1, [r6, #12]
 8001102:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001106:	430b      	orrs	r3, r1
 8001108:	6063      	str	r3, [r4, #4]
 800110a:	e761      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x38>
 800110c:	40022000 	.word	0x40022000
 8001110:	40021000 	.word	0x40021000
 8001114:	08001764 	.word	0x08001764
 8001118:	20000000 	.word	0x20000000

0800111c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <HAL_RCC_GetHCLKFreq+0x8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000

08001128 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001128:	6803      	ldr	r3, [r0, #0]
{
 800112a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800112e:	03df      	lsls	r7, r3, #15
{
 8001130:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001132:	d523      	bpl.n	800117c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001134:	4d9b      	ldr	r5, [pc, #620]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001136:	69eb      	ldr	r3, [r5, #28]
 8001138:	00de      	lsls	r6, r3, #3
 800113a:	f100 80d7 	bmi.w	80012ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	69eb      	ldr	r3, [r5, #28]
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61eb      	str	r3, [r5, #28]
 8001146:	69eb      	ldr	r3, [r5, #28]
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001150:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4f95      	ldr	r7, [pc, #596]	; (80013a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	05d8      	lsls	r0, r3, #23
 8001158:	f140 80ca 	bpl.w	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800115c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800115e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001162:	f040 80da 	bne.w	800131a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001166:	6a2b      	ldr	r3, [r5, #32]
 8001168:	6862      	ldr	r2, [r4, #4]
 800116a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800116e:	4313      	orrs	r3, r2
 8001170:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001172:	b11e      	cbz	r6, 800117c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001174:	69eb      	ldr	r3, [r5, #28]
 8001176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800117a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	07c3      	lsls	r3, r0, #31
 8001180:	d506      	bpl.n	8001190 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001182:	4a88      	ldr	r2, [pc, #544]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001184:	68a1      	ldr	r1, [r4, #8]
 8001186:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001188:	f023 0303 	bic.w	r3, r3, #3
 800118c:	430b      	orrs	r3, r1
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001190:	0787      	lsls	r7, r0, #30
 8001192:	d506      	bpl.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001194:	4a83      	ldr	r2, [pc, #524]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001196:	68e1      	ldr	r1, [r4, #12]
 8001198:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800119a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800119e:	430b      	orrs	r3, r1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80011a2:	0746      	lsls	r6, r0, #29
 80011a4:	d506      	bpl.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80011a6:	4a7f      	ldr	r2, [pc, #508]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011a8:	6921      	ldr	r1, [r4, #16]
 80011aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011ac:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011b4:	0685      	lsls	r5, r0, #26
 80011b6:	d506      	bpl.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011b8:	4a7a      	ldr	r2, [pc, #488]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011ba:	69e1      	ldr	r1, [r4, #28]
 80011bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011be:	f023 0310 	bic.w	r3, r3, #16
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011c6:	0381      	lsls	r1, r0, #14
 80011c8:	d506      	bpl.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80011ca:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011cc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80011ce:	6853      	ldr	r3, [r2, #4]
 80011d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80011d8:	0642      	lsls	r2, r0, #25
 80011da:	d506      	bpl.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80011dc:	4a71      	ldr	r2, [pc, #452]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011de:	6a21      	ldr	r1, [r4, #32]
 80011e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e2:	f023 0320 	bic.w	r3, r3, #32
 80011e6:	430b      	orrs	r3, r1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80011ea:	0343      	lsls	r3, r0, #13
 80011ec:	d506      	bpl.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80011ee:	4a6d      	ldr	r2, [pc, #436]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80011fc:	0707      	lsls	r7, r0, #28
 80011fe:	d506      	bpl.n	800120e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001200:	4a68      	ldr	r2, [pc, #416]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001202:	6961      	ldr	r1, [r4, #20]
 8001204:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001206:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800120a:	430b      	orrs	r3, r1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800120e:	06c6      	lsls	r6, r0, #27
 8001210:	d506      	bpl.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001212:	4a64      	ldr	r2, [pc, #400]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001214:	69a1      	ldr	r1, [r4, #24]
 8001216:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001218:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800121c:	430b      	orrs	r3, r1
 800121e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001220:	0585      	lsls	r5, r0, #22
 8001222:	d506      	bpl.n	8001232 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001224:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001226:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001228:	6853      	ldr	r3, [r2, #4]
 800122a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800122e:	430b      	orrs	r3, r1
 8001230:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001232:	0601      	lsls	r1, r0, #24
 8001234:	d506      	bpl.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001236:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001238:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800123a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800123c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001240:	430b      	orrs	r3, r1
 8001242:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001244:	05c2      	lsls	r2, r0, #23
 8001246:	d506      	bpl.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001248:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800124a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800124c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800124e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001252:	430b      	orrs	r3, r1
 8001254:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001256:	04c3      	lsls	r3, r0, #19
 8001258:	d506      	bpl.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800125c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800125e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001264:	430b      	orrs	r3, r1
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001268:	0487      	lsls	r7, r0, #18
 800126a:	d506      	bpl.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800126e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001270:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001272:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001276:	430b      	orrs	r3, r1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800127a:	02c6      	lsls	r6, r0, #11
 800127c:	d506      	bpl.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800127e:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001280:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001282:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001288:	430b      	orrs	r3, r1
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800128c:	0285      	lsls	r5, r0, #10
 800128e:	d506      	bpl.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001290:	4a44      	ldr	r2, [pc, #272]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001292:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001294:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001296:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800129a:	430b      	orrs	r3, r1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800129e:	0241      	lsls	r1, r0, #9
 80012a0:	d506      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80012a2:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80012b0:	0202      	lsls	r2, r0, #8
 80012b2:	d506      	bpl.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80012b4:	4a3b      	ldr	r2, [pc, #236]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80012b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012be:	430b      	orrs	r3, r1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80012c2:	01c3      	lsls	r3, r0, #7
 80012c4:	d506      	bpl.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80012ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80012d4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80012d8:	d01c      	beq.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80012de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012e4:	430b      	orrs	r3, r1
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
 80012ea:	e013      	b.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80012ec:	2600      	movs	r6, #0
 80012ee:	e730      	b.n	8001152 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80012f8:	f7ff f9ae 	bl	8000658 <HAL_GetTick>
 80012fc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	05d9      	lsls	r1, r3, #23
 8001302:	f53f af2b 	bmi.w	800115c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff f9a7 	bl	8000658 <HAL_GetTick>
 800130a:	eba0 0008 	sub.w	r0, r0, r8
 800130e:	2864      	cmp	r0, #100	; 0x64
 8001310:	d9f5      	bls.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
}
 8001314:	b002      	add	sp, #8
 8001316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800131a:	6862      	ldr	r2, [r4, #4]
 800131c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001320:	4293      	cmp	r3, r2
 8001322:	f43f af20 	beq.w	8001166 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001326:	6a29      	ldr	r1, [r5, #32]
 8001328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001330:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001334:	f8df e074 	ldr.w	lr, [pc, #116]	; 80013ac <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001338:	fab2 f282 	clz	r2, r2
 800133c:	4472      	add	r2, lr
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	2701      	movs	r7, #1
 8001342:	6017      	str	r7, [r2, #0]
 8001344:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	4473      	add	r3, lr
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001354:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001356:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001358:	f57f af05 	bpl.w	8001166 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 800135c:	f7ff f97c 	bl	8000658 <HAL_GetTick>
 8001360:	f04f 0802 	mov.w	r8, #2
 8001364:	4682      	mov	sl, r0
 8001366:	46c1      	mov	r9, r8
 8001368:	fa98 f3a8 	rbit	r3, r8
 800136c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	b1a3      	cbz	r3, 800139c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001372:	6a2a      	ldr	r2, [r5, #32]
 8001374:	fa99 f3a9 	rbit	r3, r9
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa07 f303 	lsl.w	r3, r7, r3
 8001384:	4213      	tst	r3, r2
 8001386:	f47f aeee 	bne.w	8001166 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff f965 	bl	8000658 <HAL_GetTick>
 800138e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001392:	eba0 000a 	sub.w	r0, r0, sl
 8001396:	4298      	cmp	r0, r3
 8001398:	d9e6      	bls.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800139a:	e7ba      	b.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800139c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80013a2:	e7e7      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40007000 	.word	0x40007000
 80013ac:	10908100 	.word	0x10908100

080013b0 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80013b0:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 80013c6:	2000      	movs	r0, #0
 80013c8:	4770      	bx	lr

080013ca <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013ca:	6803      	ldr	r3, [r0, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80013dc:	2000      	movs	r0, #0
 80013de:	4770      	bx	lr

080013e0 <HAL_TIM_PeriodElapsedCallback>:
 80013e0:	4770      	bx	lr

080013e2 <HAL_TIM_OC_DelayElapsedCallback>:
 80013e2:	4770      	bx	lr

080013e4 <HAL_TIM_IC_CaptureCallback>:
 80013e4:	4770      	bx	lr

080013e6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80013e6:	4770      	bx	lr

080013e8 <HAL_TIM_TriggerCallback>:
 80013e8:	4770      	bx	lr

080013ea <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	0791      	lsls	r1, r2, #30
{
 80013f0:	b510      	push	{r4, lr}
 80013f2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013f4:	d50f      	bpl.n	8001416 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	0792      	lsls	r2, r2, #30
 80013fa:	d50c      	bpl.n	8001416 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80013fc:	f06f 0202 	mvn.w	r2, #2
 8001400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001402:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001404:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001406:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001408:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800140a:	f000 8085 	beq.w	8001518 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800140e:	f7ff ffe9 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001412:	2300      	movs	r3, #0
 8001414:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	0752      	lsls	r2, r2, #29
 800141c:	d510      	bpl.n	8001440 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	0750      	lsls	r0, r2, #29
 8001422:	d50d      	bpl.n	8001440 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001424:	f06f 0204 	mvn.w	r2, #4
 8001428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800142a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800142c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800142e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001432:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001434:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001436:	d075      	beq.n	8001524 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001438:	f7ff ffd4 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800143c:	2300      	movs	r3, #0
 800143e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	0711      	lsls	r1, r2, #28
 8001446:	d50f      	bpl.n	8001468 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	0712      	lsls	r2, r2, #28
 800144c:	d50c      	bpl.n	8001468 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800144e:	f06f 0208 	mvn.w	r2, #8
 8001452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001454:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001456:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001458:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800145a:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800145c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800145e:	d067      	beq.n	8001530 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001460:	f7ff ffc0 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001464:	2300      	movs	r3, #0
 8001466:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	06d0      	lsls	r0, r2, #27
 800146e:	d510      	bpl.n	8001492 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	06d1      	lsls	r1, r2, #27
 8001474:	d50d      	bpl.n	8001492 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001476:	f06f 0210 	mvn.w	r2, #16
 800147a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800147c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800147e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001480:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001484:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001486:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001488:	d058      	beq.n	800153c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800148a:	f7ff ffab 	bl	80013e4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800148e:	2300      	movs	r3, #0
 8001490:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	07d2      	lsls	r2, r2, #31
 8001498:	d508      	bpl.n	80014ac <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	07d0      	lsls	r0, r2, #31
 800149e:	d505      	bpl.n	80014ac <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80014a0:	f06f 0201 	mvn.w	r2, #1
 80014a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff ff9a 	bl	80013e0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	0611      	lsls	r1, r2, #24
 80014b2:	d508      	bpl.n	80014c6 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	0612      	lsls	r2, r2, #24
 80014b8:	d505      	bpl.n	80014c6 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80014ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 f8f2 	bl	80016aa <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	05d0      	lsls	r0, r2, #23
 80014cc:	d508      	bpl.n	80014e0 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	0611      	lsls	r1, r2, #24
 80014d2:	d505      	bpl.n	80014e0 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80014d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80014d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80014da:	4620      	mov	r0, r4
 80014dc:	f000 f8e6 	bl	80016ac <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	0652      	lsls	r2, r2, #25
 80014e6:	d508      	bpl.n	80014fa <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	0650      	lsls	r0, r2, #25
 80014ec:	d505      	bpl.n	80014fa <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80014ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ff77 	bl	80013e8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	0691      	lsls	r1, r2, #26
 8001500:	d522      	bpl.n	8001548 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	0692      	lsls	r2, r2, #26
 8001506:	d51f      	bpl.n	8001548 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001508:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800150c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800150e:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001514:	f000 b8c8 	b.w	80016a8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001518:	f7ff ff63 	bl	80013e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff ff62 	bl	80013e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001522:	e776      	b.n	8001412 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001524:	f7ff ff5d 	bl	80013e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff ff5c 	bl	80013e6 <HAL_TIM_PWM_PulseFinishedCallback>
 800152e:	e785      	b.n	800143c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001530:	f7ff ff57 	bl	80013e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff ff56 	bl	80013e6 <HAL_TIM_PWM_PulseFinishedCallback>
 800153a:	e793      	b.n	8001464 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800153c:	f7ff ff51 	bl	80013e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ff50 	bl	80013e6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001546:	e7a2      	b.n	800148e <HAL_TIM_IRQHandler+0xa4>
 8001548:	bd10      	pop	{r4, pc}
	...

0800154c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800154c:	4a32      	ldr	r2, [pc, #200]	; (8001618 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800154e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001550:	4290      	cmp	r0, r2
 8001552:	d012      	beq.n	800157a <TIM_Base_SetConfig+0x2e>
 8001554:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001558:	d00f      	beq.n	800157a <TIM_Base_SetConfig+0x2e>
 800155a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800155e:	4290      	cmp	r0, r2
 8001560:	d00b      	beq.n	800157a <TIM_Base_SetConfig+0x2e>
 8001562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001566:	4290      	cmp	r0, r2
 8001568:	d007      	beq.n	800157a <TIM_Base_SetConfig+0x2e>
 800156a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800156e:	4290      	cmp	r0, r2
 8001570:	d003      	beq.n	800157a <TIM_Base_SetConfig+0x2e>
 8001572:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001576:	4290      	cmp	r0, r2
 8001578:	d115      	bne.n	80015a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800157a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800157c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001580:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <TIM_Base_SetConfig+0xcc>)
 8001584:	4290      	cmp	r0, r2
 8001586:	d01d      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 8001588:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800158c:	d01a      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 800158e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001592:	4290      	cmp	r0, r2
 8001594:	d016      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 8001596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159a:	4290      	cmp	r0, r2
 800159c:	d012      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 800159e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80015a2:	4290      	cmp	r0, r2
 80015a4:	d00e      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <TIM_Base_SetConfig+0xd0>)
 80015a8:	4290      	cmp	r0, r2
 80015aa:	d00b      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 80015ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b0:	4290      	cmp	r0, r2
 80015b2:	d007      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 80015b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b8:	4290      	cmp	r0, r2
 80015ba:	d003      	beq.n	80015c4 <TIM_Base_SetConfig+0x78>
 80015bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015c0:	4290      	cmp	r0, r2
 80015c2:	d103      	bne.n	80015cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015c4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015ca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015cc:	694a      	ldr	r2, [r1, #20]
 80015ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80015d4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015d6:	688b      	ldr	r3, [r1, #8]
 80015d8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015da:	680b      	ldr	r3, [r1, #0]
 80015dc:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <TIM_Base_SetConfig+0xcc>)
 80015e0:	4298      	cmp	r0, r3
 80015e2:	d013      	beq.n	800160c <TIM_Base_SetConfig+0xc0>
 80015e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e8:	4298      	cmp	r0, r3
 80015ea:	d00f      	beq.n	800160c <TIM_Base_SetConfig+0xc0>
 80015ec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d00b      	beq.n	800160c <TIM_Base_SetConfig+0xc0>
 80015f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f8:	4298      	cmp	r0, r3
 80015fa:	d007      	beq.n	800160c <TIM_Base_SetConfig+0xc0>
 80015fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001600:	4298      	cmp	r0, r3
 8001602:	d003      	beq.n	800160c <TIM_Base_SetConfig+0xc0>
 8001604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001608:	4298      	cmp	r0, r3
 800160a:	d101      	bne.n	8001610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800160c:	690b      	ldr	r3, [r1, #16]
 800160e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001610:	2301      	movs	r3, #1
 8001612:	6143      	str	r3, [r0, #20]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40012c00 	.word	0x40012c00
 800161c:	40014000 	.word	0x40014000

08001620 <HAL_TIM_Base_Init>:
{ 
 8001620:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001622:	4604      	mov	r4, r0
 8001624:	b1a0      	cbz	r0, 8001650 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001626:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800162a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800162e:	b91b      	cbnz	r3, 8001638 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001630:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001634:	f7fe ff46 	bl	80004c4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001638:	2302      	movs	r3, #2
 800163a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	1d21      	adds	r1, r4, #4
 8001642:	f7ff ff83 	bl	800154c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001646:	2301      	movs	r3, #1
 8001648:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800164c:	2000      	movs	r0, #0
 800164e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001650:	2001      	movs	r0, #1
}
 8001652:	bd10      	pop	{r4, pc}

08001654 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001654:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001658:	2b01      	cmp	r3, #1
{
 800165a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800165c:	d020      	beq.n	80016a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800165e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001660:	4d10      	ldr	r5, [pc, #64]	; (80016a4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8001662:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001664:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001666:	42aa      	cmp	r2, r5
 8001668:	d007      	beq.n	800167a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800166a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800166e:	42aa      	cmp	r2, r5
 8001670:	d003      	beq.n	800167a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8001672:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001676:	42aa      	cmp	r2, r5
 8001678:	d103      	bne.n	8001682 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800167a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800167c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001680:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001682:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001684:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800168a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800168c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001690:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001692:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001694:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001696:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001698:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 800169c:	4618      	mov	r0, r3
 800169e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80016a0:	2002      	movs	r0, #2
} 
 80016a2:	bd30      	pop	{r4, r5, pc}
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <HAL_TIMEx_CommutationCallback>:
 80016a8:	4770      	bx	lr

080016aa <HAL_TIMEx_BreakCallback>:
 80016aa:	4770      	bx	lr

080016ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80016ac:	4770      	bx	lr
	...

080016b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016b6:	e003      	b.n	80016c0 <LoopCopyDataInit>

080016b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016be:	3104      	adds	r1, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016c8:	d3f6      	bcc.n	80016b8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016cc:	e002      	b.n	80016d4 <LoopFillZerobss>

080016ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016d0:	f842 3b04 	str.w	r3, [r2], #4

080016d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <LoopForever+0x16>)
	cmp	r2, r3
 80016d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016d8:	d3f9      	bcc.n	80016ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016da:	f7fe ff47 	bl	800056c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f000 f811 	bl	8001704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e2:	f7fe fdcd 	bl	8000280 <main>

080016e6 <LoopForever>:

LoopForever:
    b LoopForever
 80016e6:	e7fe      	b.n	80016e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016e8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80016ec:	0800179c 	.word	0x0800179c
	ldr	r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016f4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80016f8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80016fc:	20000108 	.word	0x20000108

08001700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>
	...

08001704 <__libc_init_array>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	4e0d      	ldr	r6, [pc, #52]	; (800173c <__libc_init_array+0x38>)
 8001708:	4c0d      	ldr	r4, [pc, #52]	; (8001740 <__libc_init_array+0x3c>)
 800170a:	1ba4      	subs	r4, r4, r6
 800170c:	10a4      	asrs	r4, r4, #2
 800170e:	2500      	movs	r5, #0
 8001710:	42a5      	cmp	r5, r4
 8001712:	d109      	bne.n	8001728 <__libc_init_array+0x24>
 8001714:	4e0b      	ldr	r6, [pc, #44]	; (8001744 <__libc_init_array+0x40>)
 8001716:	4c0c      	ldr	r4, [pc, #48]	; (8001748 <__libc_init_array+0x44>)
 8001718:	f000 f818 	bl	800174c <_init>
 800171c:	1ba4      	subs	r4, r4, r6
 800171e:	10a4      	asrs	r4, r4, #2
 8001720:	2500      	movs	r5, #0
 8001722:	42a5      	cmp	r5, r4
 8001724:	d105      	bne.n	8001732 <__libc_init_array+0x2e>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800172c:	4798      	blx	r3
 800172e:	3501      	adds	r5, #1
 8001730:	e7ee      	b.n	8001710 <__libc_init_array+0xc>
 8001732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001736:	4798      	blx	r3
 8001738:	3501      	adds	r5, #1
 800173a:	e7f2      	b.n	8001722 <__libc_init_array+0x1e>
 800173c:	08001794 	.word	0x08001794
 8001740:	08001794 	.word	0x08001794
 8001744:	08001794 	.word	0x08001794
 8001748:	08001798 	.word	0x08001798

0800174c <_init>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr

08001758 <_fini>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr
